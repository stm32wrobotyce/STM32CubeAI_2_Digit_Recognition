
AI_Digit_Recognition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be04  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005daf0  0800bfe0  0800bfe0  0001bfe0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08069ad0  08069ad0  00080ac0  2**0
                  CONTENTS
  4 .ARM          00000008  08069ad0  08069ad0  00079ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08069ad8  08069ad8  00080ac0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08069ad8  08069ad8  00079ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08069adc  08069adc  00079adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000ac0  20000000  08069ae0  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007ce4  20000ac0  0806a5a0  00080ac0  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200087a4  0806a5a0  000887a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00080ac0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002be92  00000000  00000000  00080af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000064b0  00000000  00000000  000ac982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001244c  00000000  00000000  000b2e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e0  00000000  00000000  000c5280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c98  00000000  00000000  000c6760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031a44  00000000  00000000  000c83f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027ff6  00000000  00000000  000f9e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012be57  00000000  00000000  00121e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000ce  00000000  00000000  0024dc89  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047b4  00000000  00000000  0024dd58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         0000009c  00000000  00000000  0025250c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000014d  00000000  00000000  002525a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000ac0 	.word	0x20000ac0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bfbc 	.word	0x0800bfbc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000ac4 	.word	0x20000ac4
 800020c:	0800bfbc 	.word	0x0800bfbc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2uiz>:
 8000b5c:	004a      	lsls	r2, r1, #1
 8000b5e:	d211      	bcs.n	8000b84 <__aeabi_d2uiz+0x28>
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d211      	bcs.n	8000b8a <__aeabi_d2uiz+0x2e>
 8000b66:	d50d      	bpl.n	8000b84 <__aeabi_d2uiz+0x28>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d40e      	bmi.n	8000b90 <__aeabi_d2uiz+0x34>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8e:	d102      	bne.n	8000b96 <__aeabi_d2uiz+0x3a>
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295
 8000b94:	4770      	bx	lr
 8000b96:	f04f 0000 	mov.w	r0, #0
 8000b9a:	4770      	bx	lr

08000b9c <__aeabi_uldivmod>:
 8000b9c:	b953      	cbnz	r3, 8000bb4 <__aeabi_uldivmod+0x18>
 8000b9e:	b94a      	cbnz	r2, 8000bb4 <__aeabi_uldivmod+0x18>
 8000ba0:	2900      	cmp	r1, #0
 8000ba2:	bf08      	it	eq
 8000ba4:	2800      	cmpeq	r0, #0
 8000ba6:	bf1c      	itt	ne
 8000ba8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bac:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb0:	f000 b96e 	b.w	8000e90 <__aeabi_idiv0>
 8000bb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bbc:	f000 f806 	bl	8000bcc <__udivmoddi4>
 8000bc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc8:	b004      	add	sp, #16
 8000bca:	4770      	bx	lr

08000bcc <__udivmoddi4>:
 8000bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd0:	9d08      	ldr	r5, [sp, #32]
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f040 8083 	bne.w	8000ce2 <__udivmoddi4+0x116>
 8000bdc:	428a      	cmp	r2, r1
 8000bde:	4617      	mov	r7, r2
 8000be0:	d947      	bls.n	8000c72 <__udivmoddi4+0xa6>
 8000be2:	fab2 f282 	clz	r2, r2
 8000be6:	b142      	cbz	r2, 8000bfa <__udivmoddi4+0x2e>
 8000be8:	f1c2 0020 	rsb	r0, r2, #32
 8000bec:	fa24 f000 	lsr.w	r0, r4, r0
 8000bf0:	4091      	lsls	r1, r2
 8000bf2:	4097      	lsls	r7, r2
 8000bf4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bf8:	4094      	lsls	r4, r2
 8000bfa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bfe:	0c23      	lsrs	r3, r4, #16
 8000c00:	fbbc f6f8 	udiv	r6, ip, r8
 8000c04:	fa1f fe87 	uxth.w	lr, r7
 8000c08:	fb08 c116 	mls	r1, r8, r6, ip
 8000c0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c10:	fb06 f10e 	mul.w	r1, r6, lr
 8000c14:	4299      	cmp	r1, r3
 8000c16:	d909      	bls.n	8000c2c <__udivmoddi4+0x60>
 8000c18:	18fb      	adds	r3, r7, r3
 8000c1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c1e:	f080 8119 	bcs.w	8000e54 <__udivmoddi4+0x288>
 8000c22:	4299      	cmp	r1, r3
 8000c24:	f240 8116 	bls.w	8000e54 <__udivmoddi4+0x288>
 8000c28:	3e02      	subs	r6, #2
 8000c2a:	443b      	add	r3, r7
 8000c2c:	1a5b      	subs	r3, r3, r1
 8000c2e:	b2a4      	uxth	r4, r4
 8000c30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c34:	fb08 3310 	mls	r3, r8, r0, r3
 8000c38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c40:	45a6      	cmp	lr, r4
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x8c>
 8000c44:	193c      	adds	r4, r7, r4
 8000c46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4a:	f080 8105 	bcs.w	8000e58 <__udivmoddi4+0x28c>
 8000c4e:	45a6      	cmp	lr, r4
 8000c50:	f240 8102 	bls.w	8000e58 <__udivmoddi4+0x28c>
 8000c54:	3802      	subs	r0, #2
 8000c56:	443c      	add	r4, r7
 8000c58:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c5c:	eba4 040e 	sub.w	r4, r4, lr
 8000c60:	2600      	movs	r6, #0
 8000c62:	b11d      	cbz	r5, 8000c6c <__udivmoddi4+0xa0>
 8000c64:	40d4      	lsrs	r4, r2
 8000c66:	2300      	movs	r3, #0
 8000c68:	e9c5 4300 	strd	r4, r3, [r5]
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	b902      	cbnz	r2, 8000c76 <__udivmoddi4+0xaa>
 8000c74:	deff      	udf	#255	; 0xff
 8000c76:	fab2 f282 	clz	r2, r2
 8000c7a:	2a00      	cmp	r2, #0
 8000c7c:	d150      	bne.n	8000d20 <__udivmoddi4+0x154>
 8000c7e:	1bcb      	subs	r3, r1, r7
 8000c80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c84:	fa1f f887 	uxth.w	r8, r7
 8000c88:	2601      	movs	r6, #1
 8000c8a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c8e:	0c21      	lsrs	r1, r4, #16
 8000c90:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c98:	fb08 f30c 	mul.w	r3, r8, ip
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0xe4>
 8000ca0:	1879      	adds	r1, r7, r1
 8000ca2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0xe2>
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	f200 80e9 	bhi.w	8000e80 <__udivmoddi4+0x2b4>
 8000cae:	4684      	mov	ip, r0
 8000cb0:	1ac9      	subs	r1, r1, r3
 8000cb2:	b2a3      	uxth	r3, r4
 8000cb4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cbc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cc0:	fb08 f800 	mul.w	r8, r8, r0
 8000cc4:	45a0      	cmp	r8, r4
 8000cc6:	d907      	bls.n	8000cd8 <__udivmoddi4+0x10c>
 8000cc8:	193c      	adds	r4, r7, r4
 8000cca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x10a>
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	f200 80d9 	bhi.w	8000e88 <__udivmoddi4+0x2bc>
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	eba4 0408 	sub.w	r4, r4, r8
 8000cdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ce0:	e7bf      	b.n	8000c62 <__udivmoddi4+0x96>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0x12e>
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	f000 80b1 	beq.w	8000e4e <__udivmoddi4+0x282>
 8000cec:	2600      	movs	r6, #0
 8000cee:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	fab3 f683 	clz	r6, r3
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	d14a      	bne.n	8000d98 <__udivmoddi4+0x1cc>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0x140>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80b8 	bhi.w	8000e7c <__udivmoddi4+0x2b0>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	468c      	mov	ip, r1
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d0a8      	beq.n	8000c6c <__udivmoddi4+0xa0>
 8000d1a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d1e:	e7a5      	b.n	8000c6c <__udivmoddi4+0xa0>
 8000d20:	f1c2 0320 	rsb	r3, r2, #32
 8000d24:	fa20 f603 	lsr.w	r6, r0, r3
 8000d28:	4097      	lsls	r7, r2
 8000d2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d2e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d32:	40d9      	lsrs	r1, r3
 8000d34:	4330      	orrs	r0, r6
 8000d36:	0c03      	lsrs	r3, r0, #16
 8000d38:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d3c:	fa1f f887 	uxth.w	r8, r7
 8000d40:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d48:	fb06 f108 	mul.w	r1, r6, r8
 8000d4c:	4299      	cmp	r1, r3
 8000d4e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x19c>
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d5a:	f080 808d 	bcs.w	8000e78 <__udivmoddi4+0x2ac>
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	f240 808a 	bls.w	8000e78 <__udivmoddi4+0x2ac>
 8000d64:	3e02      	subs	r6, #2
 8000d66:	443b      	add	r3, r7
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b281      	uxth	r1, r0
 8000d6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d78:	fb00 f308 	mul.w	r3, r0, r8
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d907      	bls.n	8000d90 <__udivmoddi4+0x1c4>
 8000d80:	1879      	adds	r1, r7, r1
 8000d82:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d86:	d273      	bcs.n	8000e70 <__udivmoddi4+0x2a4>
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d971      	bls.n	8000e70 <__udivmoddi4+0x2a4>
 8000d8c:	3802      	subs	r0, #2
 8000d8e:	4439      	add	r1, r7
 8000d90:	1acb      	subs	r3, r1, r3
 8000d92:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d96:	e778      	b.n	8000c8a <__udivmoddi4+0xbe>
 8000d98:	f1c6 0c20 	rsb	ip, r6, #32
 8000d9c:	fa03 f406 	lsl.w	r4, r3, r6
 8000da0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000da4:	431c      	orrs	r4, r3
 8000da6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000daa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dae:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000db2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000db6:	431f      	orrs	r7, r3
 8000db8:	0c3b      	lsrs	r3, r7, #16
 8000dba:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dbe:	fa1f f884 	uxth.w	r8, r4
 8000dc2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dc6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dca:	fb09 fa08 	mul.w	sl, r9, r8
 8000dce:	458a      	cmp	sl, r1
 8000dd0:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd4:	fa00 f306 	lsl.w	r3, r0, r6
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x220>
 8000dda:	1861      	adds	r1, r4, r1
 8000ddc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000de0:	d248      	bcs.n	8000e74 <__udivmoddi4+0x2a8>
 8000de2:	458a      	cmp	sl, r1
 8000de4:	d946      	bls.n	8000e74 <__udivmoddi4+0x2a8>
 8000de6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dea:	4421      	add	r1, r4
 8000dec:	eba1 010a 	sub.w	r1, r1, sl
 8000df0:	b2bf      	uxth	r7, r7
 8000df2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dfa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dfe:	fb00 f808 	mul.w	r8, r0, r8
 8000e02:	45b8      	cmp	r8, r7
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x24a>
 8000e06:	19e7      	adds	r7, r4, r7
 8000e08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e0c:	d22e      	bcs.n	8000e6c <__udivmoddi4+0x2a0>
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d92c      	bls.n	8000e6c <__udivmoddi4+0x2a0>
 8000e12:	3802      	subs	r0, #2
 8000e14:	4427      	add	r7, r4
 8000e16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e1a:	eba7 0708 	sub.w	r7, r7, r8
 8000e1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e22:	454f      	cmp	r7, r9
 8000e24:	46c6      	mov	lr, r8
 8000e26:	4649      	mov	r1, r9
 8000e28:	d31a      	bcc.n	8000e60 <__udivmoddi4+0x294>
 8000e2a:	d017      	beq.n	8000e5c <__udivmoddi4+0x290>
 8000e2c:	b15d      	cbz	r5, 8000e46 <__udivmoddi4+0x27a>
 8000e2e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e32:	eb67 0701 	sbc.w	r7, r7, r1
 8000e36:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e3a:	40f2      	lsrs	r2, r6
 8000e3c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e40:	40f7      	lsrs	r7, r6
 8000e42:	e9c5 2700 	strd	r2, r7, [r5]
 8000e46:	2600      	movs	r6, #0
 8000e48:	4631      	mov	r1, r6
 8000e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4e:	462e      	mov	r6, r5
 8000e50:	4628      	mov	r0, r5
 8000e52:	e70b      	b.n	8000c6c <__udivmoddi4+0xa0>
 8000e54:	4606      	mov	r6, r0
 8000e56:	e6e9      	b.n	8000c2c <__udivmoddi4+0x60>
 8000e58:	4618      	mov	r0, r3
 8000e5a:	e6fd      	b.n	8000c58 <__udivmoddi4+0x8c>
 8000e5c:	4543      	cmp	r3, r8
 8000e5e:	d2e5      	bcs.n	8000e2c <__udivmoddi4+0x260>
 8000e60:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e64:	eb69 0104 	sbc.w	r1, r9, r4
 8000e68:	3801      	subs	r0, #1
 8000e6a:	e7df      	b.n	8000e2c <__udivmoddi4+0x260>
 8000e6c:	4608      	mov	r0, r1
 8000e6e:	e7d2      	b.n	8000e16 <__udivmoddi4+0x24a>
 8000e70:	4660      	mov	r0, ip
 8000e72:	e78d      	b.n	8000d90 <__udivmoddi4+0x1c4>
 8000e74:	4681      	mov	r9, r0
 8000e76:	e7b9      	b.n	8000dec <__udivmoddi4+0x220>
 8000e78:	4666      	mov	r6, ip
 8000e7a:	e775      	b.n	8000d68 <__udivmoddi4+0x19c>
 8000e7c:	4630      	mov	r0, r6
 8000e7e:	e74a      	b.n	8000d16 <__udivmoddi4+0x14a>
 8000e80:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e84:	4439      	add	r1, r7
 8000e86:	e713      	b.n	8000cb0 <__udivmoddi4+0xe4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	443c      	add	r4, r7
 8000e8c:	e724      	b.n	8000cd8 <__udivmoddi4+0x10c>
 8000e8e:	bf00      	nop

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000e94:	b570      	push	{r4, r5, r6, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8000e9a:	f003 fa53 	bl	8004344 <HAL_I2C_GetState>
 8000e9e:	2800      	cmp	r0, #0
 8000ea0:	d155      	bne.n	8000f4e <I2Cx_Init+0xba>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000ea2:	4b4a      	ldr	r3, [pc, #296]	; (8000fcc <I2Cx_Init+0x138>)
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
 8000ea4:	2600      	movs	r6, #0
 8000ea6:	4c4a      	ldr	r4, [pc, #296]	; (8000fd0 <I2Cx_Init+0x13c>)
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000ea8:	429d      	cmp	r5, r3
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
 8000eaa:	616e      	str	r6, [r5, #20]
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8000eac:	bf0c      	ite	eq
 8000eae:	4a49      	ldreq	r2, [pc, #292]	; (8000fd4 <I2Cx_Init+0x140>)
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000eb0:	4a49      	ldrne	r2, [pc, #292]	; (8000fd8 <I2Cx_Init+0x144>)
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000eb2:	429d      	cmp	r5, r3
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000eb4:	602a      	str	r2, [r5, #0]
    i2c_handler->Init.OwnAddress1      = 0;
 8000eb6:	4a49      	ldr	r2, [pc, #292]	; (8000fdc <I2Cx_Init+0x148>)
 8000eb8:	e9c5 2601 	strd	r2, r6, [r5, #4]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000ebc:	f04f 0201 	mov.w	r2, #1
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000ec0:	e9c5 6607 	strd	r6, r6, [r5, #28]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000ec4:	e9c5 2603 	strd	r2, r6, [r5, #12]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000ec8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000eca:	d142      	bne.n	8000f52 <I2Cx_Init+0xbe>
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000ed0:	2080      	movs	r0, #128	; 0x80
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8000ed2:	f04f 0c02 	mov.w	ip, #2
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000ed6:	a905      	add	r1, sp, #20
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000ed8:	6323      	str	r3, [r4, #48]	; 0x30
 8000eda:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000edc:	9607      	str	r6, [sp, #28]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee2:	9301      	str	r3, [sp, #4]
 8000ee4:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000ee6:	2312      	movs	r3, #18
 8000ee8:	e9cd 0305 	strd	r0, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8000eec:	2304      	movs	r3, #4
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000eee:	483c      	ldr	r0, [pc, #240]	; (8000fe0 <I2Cx_Init+0x14c>)
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8000ef0:	e9cd c308 	strd	ip, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000ef4:	f002 fa0c 	bl	8003310 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000ef8:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000efc:	a905      	add	r1, sp, #20
 8000efe:	4838      	ldr	r0, [pc, #224]	; (8000fe0 <I2Cx_Init+0x14c>)
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000f00:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f02:	f002 fa05 	bl	8003310 <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000f06:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000f08:	4632      	mov	r2, r6
 8000f0a:	210f      	movs	r1, #15
 8000f0c:	2048      	movs	r0, #72	; 0x48
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000f0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f12:	6423      	str	r3, [r4, #64]	; 0x40
 8000f14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f1a:	9302      	str	r3, [sp, #8]
 8000f1c:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8000f1e:	6a23      	ldr	r3, [r4, #32]
 8000f20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f24:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000f26:	6a23      	ldr	r3, [r4, #32]
 8000f28:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000f2c:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000f2e:	f001 fe55 	bl	8002bdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000f32:	2048      	movs	r0, #72	; 0x48
 8000f34:	f001 fe84 	bl	8002c40 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000f38:	2049      	movs	r0, #73	; 0x49
 8000f3a:	4632      	mov	r2, r6
 8000f3c:	210f      	movs	r1, #15
 8000f3e:	f001 fe4d 	bl	8002bdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8000f42:	2049      	movs	r0, #73	; 0x49
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000f44:	f001 fe7c 	bl	8002c40 <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
 8000f48:	4628      	mov	r0, r5
 8000f4a:	f003 f81f 	bl	8003f8c <HAL_I2C_Init>
  }
}
 8000f4e:	b00a      	add	sp, #40	; 0x28
 8000f50:	bd70      	pop	{r4, r5, r6, pc}
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000f52:	f043 0302 	orr.w	r3, r3, #2
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000f56:	f44f 7280 	mov.w	r2, #256	; 0x100
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000f5a:	2102      	movs	r1, #2
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f5c:	4821      	ldr	r0, [pc, #132]	; (8000fe4 <I2Cx_Init+0x150>)
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000f5e:	6323      	str	r3, [r4, #48]	; 0x30
 8000f60:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000f62:	9607      	str	r6, [sp, #28]
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	9303      	str	r3, [sp, #12]
 8000f6a:	9b03      	ldr	r3, [sp, #12]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000f6c:	2312      	movs	r3, #18
 8000f6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000f72:	2304      	movs	r3, #4
 8000f74:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f78:	a905      	add	r1, sp, #20
 8000f7a:	f002 f9c9 	bl	8003310 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000f7e:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f82:	a905      	add	r1, sp, #20
 8000f84:	4817      	ldr	r0, [pc, #92]	; (8000fe4 <I2Cx_Init+0x150>)
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000f86:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f88:	f002 f9c2 	bl	8003310 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000f8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000f8e:	4632      	mov	r2, r6
 8000f90:	210f      	movs	r1, #15
 8000f92:	201f      	movs	r0, #31
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000f94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f98:	6423      	str	r3, [r4, #64]	; 0x40
 8000f9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa0:	9304      	str	r3, [sp, #16]
 8000fa2:	9b04      	ldr	r3, [sp, #16]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8000fa4:	6a23      	ldr	r3, [r4, #32]
 8000fa6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000faa:	6223      	str	r3, [r4, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8000fac:	6a23      	ldr	r3, [r4, #32]
 8000fae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000fb2:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000fb4:	f001 fe12 	bl	8002bdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8000fb8:	201f      	movs	r0, #31
 8000fba:	f001 fe41 	bl	8002c40 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000fbe:	2020      	movs	r0, #32
 8000fc0:	4632      	mov	r2, r6
 8000fc2:	210f      	movs	r1, #15
 8000fc4:	f001 fe0a 	bl	8002bdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000fc8:	2020      	movs	r0, #32
 8000fca:	e7bb      	b.n	8000f44 <I2Cx_Init+0xb0>
 8000fcc:	20000adc 	.word	0x20000adc
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40005c00 	.word	0x40005c00
 8000fd8:	40005400 	.word	0x40005400
 8000fdc:	40912732 	.word	0x40912732
 8000fe0:	40021c00 	.word	0x40021c00
 8000fe4:	40020400 	.word	0x40020400

08000fe8 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8000fe8:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000fea:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 8000fee:	b085      	sub	sp, #20
 8000ff0:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000ff2:	9402      	str	r4, [sp, #8]
 8000ff4:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8000ff8:	9401      	str	r4, [sp, #4]
 8000ffa:	9c08      	ldr	r4, [sp, #32]
 8000ffc:	9400      	str	r4, [sp, #0]
 8000ffe:	f003 f82f 	bl	8004060 <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001002:	4604      	mov	r4, r0
 8001004:	b128      	cbz	r0, 8001012 <I2Cx_WriteMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001006:	4628      	mov	r0, r5
 8001008:	f003 f811 	bl	800402e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800100c:	4628      	mov	r0, r5
 800100e:	f7ff ff41 	bl	8000e94 <I2Cx_Init>
}
 8001012:	4620      	mov	r0, r4
 8001014:	b005      	add	sp, #20
 8001016:	bd30      	pop	{r4, r5, pc}

08001018 <I2Cx_ReadMultiple>:
{
 8001018:	b530      	push	{r4, r5, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800101a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 800101e:	b085      	sub	sp, #20
 8001020:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001022:	9402      	str	r4, [sp, #8]
 8001024:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8001028:	9401      	str	r4, [sp, #4]
 800102a:	9c08      	ldr	r4, [sp, #32]
 800102c:	9400      	str	r4, [sp, #0]
 800102e:	f003 f8cd 	bl	80041cc <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8001032:	4604      	mov	r4, r0
 8001034:	b128      	cbz	r0, 8001042 <I2Cx_ReadMultiple+0x2a>
  HAL_I2C_DeInit(i2c_handler);
 8001036:	4628      	mov	r0, r5
 8001038:	f002 fff9 	bl	800402e <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 800103c:	4628      	mov	r0, r5
 800103e:	f7ff ff29 	bl	8000e94 <I2Cx_Init>
}
 8001042:	4620      	mov	r0, r4
 8001044:	b005      	add	sp, #20
 8001046:	bd30      	pop	{r4, r5, pc}

08001048 <AUDIO_IO_Init>:
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
  I2Cx_Init(&hI2cAudioHandler);
 8001048:	4801      	ldr	r0, [pc, #4]	; (8001050 <AUDIO_IO_Init+0x8>)
 800104a:	f7ff bf23 	b.w	8000e94 <I2Cx_Init>
 800104e:	bf00      	nop
 8001050:	20000adc 	.word	0x20000adc

08001054 <TS_IO_Init>:
 8001054:	f7ff bff8 	b.w	8001048 <AUDIO_IO_Init>

08001058 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001058:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800105a:	f88d 200f 	strb.w	r2, [sp, #15]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800105e:	f10d 020f 	add.w	r2, sp, #15
 8001062:	2301      	movs	r3, #1
 8001064:	9200      	str	r2, [sp, #0]
 8001066:	460a      	mov	r2, r1
 8001068:	4601      	mov	r1, r0
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <TS_IO_Write+0x20>)
 800106e:	f7ff ffbb 	bl	8000fe8 <I2Cx_WriteMultiple>
}
 8001072:	b005      	add	sp, #20
 8001074:	f85d fb04 	ldr.w	pc, [sp], #4
 8001078:	20000adc 	.word	0x20000adc

0800107c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800107c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t read_value = 0;
 800107e:	2300      	movs	r3, #0
{
 8001080:	460a      	mov	r2, r1

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001082:	f10d 010f 	add.w	r1, sp, #15
  uint8_t read_value = 0;
 8001086:	f88d 300f 	strb.w	r3, [sp, #15]
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800108a:	2301      	movs	r3, #1
 800108c:	9100      	str	r1, [sp, #0]
 800108e:	4601      	mov	r1, r0
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	4804      	ldr	r0, [pc, #16]	; (80010a4 <TS_IO_Read+0x28>)
 8001094:	f7ff ffc0 	bl	8001018 <I2Cx_ReadMultiple>

  return read_value;
}
 8001098:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800109c:	b005      	add	sp, #20
 800109e:	f85d fb04 	ldr.w	pc, [sp], #4
 80010a2:	bf00      	nop
 80010a4:	20000adc 	.word	0x20000adc

080010a8 <TS_IO_Delay>:
 80010a8:	f001 bd74 	b.w	8002b94 <HAL_Delay>

080010ac <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80010ac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80010b0:	4c1a      	ldr	r4, [pc, #104]	; (800111c <LL_FillBuffer+0x70>)
{
 80010b2:	4698      	mov	r8, r3
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80010b4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
{
 80010b8:	460e      	mov	r6, r1
 80010ba:	4617      	mov	r7, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80010bc:	2134      	movs	r1, #52	; 0x34
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80010be:	6063      	str	r3, [r4, #4]
{
 80010c0:	4681      	mov	r9, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80010c2:	4b17      	ldr	r3, [pc, #92]	; (8001120 <LL_FillBuffer+0x74>)
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80010c4:	4620      	mov	r0, r4
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80010c6:	4a17      	ldr	r2, [pc, #92]	; (8001124 <LL_FillBuffer+0x78>)
 80010c8:	681b      	ldr	r3, [r3, #0]
{
 80010ca:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80010ce:	fb01 2303 	mla	r3, r1, r3, r2
 80010d2:	6c9d      	ldr	r5, [r3, #72]	; 0x48
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80010d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80010d6:	2d02      	cmp	r5, #2
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80010d8:	60e3      	str	r3, [r4, #12]
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80010da:	bf18      	it	ne
 80010dc:	2500      	movne	r5, #0
  hDma2dHandler.Instance = DMA2D;
 80010de:	4b12      	ldr	r3, [pc, #72]	; (8001128 <LL_FillBuffer+0x7c>)
 80010e0:	60a5      	str	r5, [r4, #8]
 80010e2:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80010e4:	f001 ff78 	bl	8002fd8 <HAL_DMA2D_Init>
 80010e8:	b9a0      	cbnz	r0, 8001114 <LL_FillBuffer+0x68>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80010ea:	4649      	mov	r1, r9
 80010ec:	4620      	mov	r0, r4
 80010ee:	f002 f8c7 	bl	8003280 <HAL_DMA2D_ConfigLayer>
 80010f2:	b978      	cbnz	r0, 8001114 <LL_FillBuffer+0x68>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80010f4:	463b      	mov	r3, r7
 80010f6:	4632      	mov	r2, r6
 80010f8:	4651      	mov	r1, sl
 80010fa:	4620      	mov	r0, r4
 80010fc:	f8cd 8000 	str.w	r8, [sp]
 8001100:	f001 ff96 	bl	8003030 <HAL_DMA2D_Start>
 8001104:	b930      	cbnz	r0, 8001114 <LL_FillBuffer+0x68>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001106:	210a      	movs	r1, #10
 8001108:	4620      	mov	r0, r4
      }
    }
  } 
}
 800110a:	b002      	add	sp, #8
 800110c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001110:	f001 bfa8 	b.w	8003064 <HAL_DMA2D_PollForTransfer>
}
 8001114:	b002      	add	sp, #8
 8001116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800111a:	bf00      	nop
 800111c:	20000b44 	.word	0x20000b44
 8001120:	20000b28 	.word	0x20000b28
 8001124:	200082a4 	.word	0x200082a4
 8001128:	4002b000 	.word	0x4002b000

0800112c <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800112c:	4b03      	ldr	r3, [pc, #12]	; (800113c <BSP_LCD_GetXSize+0x10>)
 800112e:	2134      	movs	r1, #52	; 0x34
 8001130:	4a03      	ldr	r2, [pc, #12]	; (8001140 <BSP_LCD_GetXSize+0x14>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	fb01 2303 	mla	r3, r1, r3, r2
}
 8001138:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800113a:	4770      	bx	lr
 800113c:	20000b28 	.word	0x20000b28
 8001140:	200082a4 	.word	0x200082a4

08001144 <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8001144:	4b03      	ldr	r3, [pc, #12]	; (8001154 <BSP_LCD_GetYSize+0x10>)
 8001146:	2134      	movs	r1, #52	; 0x34
 8001148:	4a03      	ldr	r2, [pc, #12]	; (8001158 <BSP_LCD_GetYSize+0x14>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	fb01 2303 	mla	r3, r1, r3, r2
}
 8001150:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8001152:	4770      	bx	lr
 8001154:	20000b28 	.word	0x20000b28
 8001158:	200082a4 	.word	0x200082a4

0800115c <BSP_LCD_LayerDefaultInit>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800115c:	4a19      	ldr	r2, [pc, #100]	; (80011c4 <BSP_LCD_LayerDefaultInit+0x68>)
  layer_cfg.WindowX0 = 0;
 800115e:	2300      	movs	r3, #0
{     
 8001160:	b530      	push	{r4, r5, lr}
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001162:	6812      	ldr	r2, [r2, #0]
{     
 8001164:	4604      	mov	r4, r0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001166:	2534      	movs	r5, #52	; 0x34
 8001168:	4817      	ldr	r0, [pc, #92]	; (80011c8 <BSP_LCD_LayerDefaultInit+0x6c>)
{     
 800116a:	b08f      	sub	sp, #60	; 0x3c
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800116c:	fb05 0202 	mla	r2, r5, r2, r0
  layer_cfg.FBStartAdress = FB_Address;
 8001170:	910a      	str	r1, [sp, #40]	; 0x28
  layer_cfg.Alpha = 255;
 8001172:	21ff      	movs	r1, #255	; 0xff
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001174:	6e15      	ldr	r5, [r2, #96]	; 0x60
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8001176:	6e52      	ldr	r2, [r2, #100]	; 0x64
  layer_cfg.WindowX0 = 0;
 8001178:	9301      	str	r3, [sp, #4]
  layer_cfg.Backcolor.Blue = 0;
 800117a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Red = 0;
 800117e:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001182:	e9cd 2304 	strd	r2, r3, [sp, #16]
  layer_cfg.Alpha0 = 0;
 8001186:	e9cd 1306 	strd	r1, r3, [sp, #24]
  layer_cfg.WindowY0 = 0;
 800118a:	e9cd 5302 	strd	r5, r3, [sp, #8]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800118e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001192:	2307      	movs	r3, #7
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8001194:	e9cd 520b 	strd	r5, r2, [sp, #44]	; 0x2c
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001198:	e9cd 1308 	strd	r1, r3, [sp, #32]
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800119c:	4622      	mov	r2, r4
 800119e:	a901      	add	r1, sp, #4
 80011a0:	f003 fa26 	bl	80045f0 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80011a4:	230c      	movs	r3, #12
 80011a6:	4a09      	ldr	r2, [pc, #36]	; (80011cc <BSP_LCD_LayerDefaultInit+0x70>)
 80011a8:	f04f 31ff 	mov.w	r1, #4294967295
 80011ac:	fb03 f004 	mul.w	r0, r3, r4
 80011b0:	1813      	adds	r3, r2, r0
 80011b2:	6059      	str	r1, [r3, #4]
  DrawProp[LayerIndex].pFont     = &Font24;
 80011b4:	4906      	ldr	r1, [pc, #24]	; (80011d0 <BSP_LCD_LayerDefaultInit+0x74>)
 80011b6:	6099      	str	r1, [r3, #8]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80011b8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80011bc:	5013      	str	r3, [r2, r0]
}
 80011be:	b00f      	add	sp, #60	; 0x3c
 80011c0:	bd30      	pop	{r4, r5, pc}
 80011c2:	bf00      	nop
 80011c4:	20000b28 	.word	0x20000b28
 80011c8:	200082a4 	.word	0x200082a4
 80011cc:	20000b2c 	.word	0x20000b2c
 80011d0:	20000040 	.word	0x20000040

080011d4 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 80011d4:	4b01      	ldr	r3, [pc, #4]	; (80011dc <BSP_LCD_SelectLayer+0x8>)
 80011d6:	6018      	str	r0, [r3, #0]
} 
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000b28 	.word	0x20000b28

080011e0 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 80011e0:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <BSP_LCD_SetTextColor+0x10>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	230c      	movs	r3, #12
 80011e6:	4353      	muls	r3, r2
 80011e8:	4a02      	ldr	r2, [pc, #8]	; (80011f4 <BSP_LCD_SetTextColor+0x14>)
 80011ea:	50d0      	str	r0, [r2, r3]
}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000b28 	.word	0x20000b28
 80011f4:	20000b2c 	.word	0x20000b2c

080011f8 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <BSP_LCD_SetFont+0x10>)
 80011fa:	210c      	movs	r1, #12
 80011fc:	4a03      	ldr	r2, [pc, #12]	; (800120c <BSP_LCD_SetFont+0x14>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	fb01 2303 	mla	r3, r1, r3, r2
 8001204:	6098      	str	r0, [r3, #8]
}
 8001206:	4770      	bx	lr
 8001208:	20000b28 	.word	0x20000b28
 800120c:	20000b2c 	.word	0x20000b2c

08001210 <BSP_LCD_Clear>:
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <BSP_LCD_Clear+0x24>)
{ 
 8001212:	b513      	push	{r0, r1, r4, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001214:	681c      	ldr	r4, [r3, #0]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8001216:	2134      	movs	r1, #52	; 0x34
 8001218:	4b07      	ldr	r3, [pc, #28]	; (8001238 <BSP_LCD_Clear+0x28>)
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800121a:	9001      	str	r0, [sp, #4]
 800121c:	4620      	mov	r0, r4
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800121e:	fb01 3104 	mla	r1, r1, r4, r3
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001222:	2300      	movs	r3, #0
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	e9d1 2318 	ldrd	r2, r3, [r1, #96]	; 0x60
 800122a:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
 800122c:	f7ff ff3e 	bl	80010ac <LL_FillBuffer>
}
 8001230:	b002      	add	sp, #8
 8001232:	bd10      	pop	{r4, pc}
 8001234:	20000b28 	.word	0x20000b28
 8001238:	200082a4 	.word	0x200082a4

0800123c <BSP_LCD_DrawHLine>:
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <BSP_LCD_DrawHLine+0x40>)
{
 800123e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001240:	681d      	ldr	r5, [r3, #0]
 8001242:	2434      	movs	r4, #52	; 0x34
 8001244:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <BSP_LCD_DrawHLine+0x44>)
 8001246:	fb04 3405 	mla	r4, r4, r5, r3
 800124a:	e9d4 3617 	ldrd	r3, r6, [r4, #92]	; 0x5c
 800124e:	fb06 0101 	mla	r1, r6, r1, r0
 8001252:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001254:	2802      	cmp	r0, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001256:	480b      	ldr	r0, [pc, #44]	; (8001284 <BSP_LCD_DrawHLine+0x48>)
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001258:	bf0c      	ite	eq
 800125a:	eb03 0141 	addeq.w	r1, r3, r1, lsl #1
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800125e:	eb03 0181 	addne.w	r1, r3, r1, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001262:	230c      	movs	r3, #12
 8001264:	436b      	muls	r3, r5
 8001266:	58c3      	ldr	r3, [r0, r3]
 8001268:	4628      	mov	r0, r5
 800126a:	9301      	str	r3, [sp, #4]
 800126c:	2300      	movs	r3, #0
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	2301      	movs	r3, #1
 8001272:	f7ff ff1b 	bl	80010ac <LL_FillBuffer>
}
 8001276:	b002      	add	sp, #8
 8001278:	bd70      	pop	{r4, r5, r6, pc}
 800127a:	bf00      	nop
 800127c:	20000b28 	.word	0x20000b28
 8001280:	200082a4 	.word	0x200082a4
 8001284:	20000b2c 	.word	0x20000b2c

08001288 <BSP_LCD_DrawPixel>:
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001288:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <BSP_LCD_DrawPixel+0x2c>)
{
 800128a:	b530      	push	{r4, r5, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2534      	movs	r5, #52	; 0x34
 8001290:	4c09      	ldr	r4, [pc, #36]	; (80012b8 <BSP_LCD_DrawPixel+0x30>)
 8001292:	fb05 4303 	mla	r3, r5, r3, r4
 8001296:	e9d3 4517 	ldrd	r4, r5, [r3, #92]	; 0x5c
 800129a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800129c:	fb05 0101 	mla	r1, r5, r1, r0
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d103      	bne.n	80012ac <BSP_LCD_DrawPixel+0x24>
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80012a4:	b292      	uxth	r2, r2
 80012a6:	f824 2011 	strh.w	r2, [r4, r1, lsl #1]
}
 80012aa:	bd30      	pop	{r4, r5, pc}
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80012ac:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
}
 80012b0:	e7fb      	b.n	80012aa <BSP_LCD_DrawPixel+0x22>
 80012b2:	bf00      	nop
 80012b4:	20000b28 	.word	0x20000b28
 80012b8:	200082a4 	.word	0x200082a4

080012bc <BSP_LCD_DisplayChar>:
{
 80012bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80012c0:	4b2e      	ldr	r3, [pc, #184]	; (800137c <BSP_LCD_DisplayChar+0xc0>)
{
 80012c2:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80012c4:	f1a2 0520 	sub.w	r5, r2, #32
  for(i = 0; i < height; i++)
 80012c8:	f04f 0800 	mov.w	r8, #0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80012cc:	f8d3 b000 	ldr.w	fp, [r3]
{
 80012d0:	e9cd 0100 	strd	r0, r1, [sp]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80012d4:	482a      	ldr	r0, [pc, #168]	; (8001380 <BSP_LCD_DisplayChar+0xc4>)
 80012d6:	210c      	movs	r1, #12
 80012d8:	fb01 010b 	mla	r1, r1, fp, r0
 80012dc:	6889      	ldr	r1, [r1, #8]
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80012de:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 80012e2:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 80012e6:	f109 0607 	add.w	r6, r9, #7
 80012ea:	680a      	ldr	r2, [r1, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80012ec:	fb0a f505 	mul.w	r5, sl, r5
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80012f0:	10f6      	asrs	r6, r6, #3
  offset =  8 *((width + 7)/8) -  width ;
 80012f2:	ebc9 00c6 	rsb	r0, r9, r6, lsl #3
  for(i = 0; i < height; i++)
 80012f6:	fb06 2505 	mla	r5, r6, r5, r2
      if(line & (1 << (width- j + offset- 1))) 
 80012fa:	f109 32ff 	add.w	r2, r9, #4294967295
 80012fe:	fa52 f380 	uxtab	r3, r2, r0
 8001302:	9302      	str	r3, [sp, #8]
 8001304:	9b01      	ldr	r3, [sp, #4]
  for(i = 0; i < height; i++)
 8001306:	45d0      	cmp	r8, sl
 8001308:	eb03 0108 	add.w	r1, r3, r8
 800130c:	b289      	uxth	r1, r1
 800130e:	d302      	bcc.n	8001316 <BSP_LCD_DisplayChar+0x5a>
}
 8001310:	b005      	add	sp, #20
 8001312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 8001316:	2e01      	cmp	r6, #1
 8001318:	782c      	ldrb	r4, [r5, #0]
 800131a:	d004      	beq.n	8001326 <BSP_LCD_DisplayChar+0x6a>
 800131c:	2e02      	cmp	r6, #2
 800131e:	d109      	bne.n	8001334 <BSP_LCD_DisplayChar+0x78>
      line =  (pchar[0]<< 8) | pchar[1];      
 8001320:	882c      	ldrh	r4, [r5, #0]
 8001322:	ba64      	rev16	r4, r4
 8001324:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
 8001326:	2700      	movs	r7, #0
 8001328:	45b9      	cmp	r9, r7
 800132a:	d80a      	bhi.n	8001342 <BSP_LCD_DisplayChar+0x86>
  for(i = 0; i < height; i++)
 800132c:	f108 0801 	add.w	r8, r8, #1
 8001330:	4435      	add	r5, r6
 8001332:	e7e7      	b.n	8001304 <BSP_LCD_DisplayChar+0x48>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001334:	786a      	ldrb	r2, [r5, #1]
 8001336:	0424      	lsls	r4, r4, #16
 8001338:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800133c:	78aa      	ldrb	r2, [r5, #2]
 800133e:	4314      	orrs	r4, r2
      break;
 8001340:	e7f1      	b.n	8001326 <BSP_LCD_DisplayChar+0x6a>
      if(line & (1 << (width- j + offset- 1))) 
 8001342:	9b00      	ldr	r3, [sp, #0]
 8001344:	2201      	movs	r2, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001346:	9103      	str	r1, [sp, #12]
 8001348:	19d8      	adds	r0, r3, r7
      if(line & (1 << (width- j + offset- 1))) 
 800134a:	9b02      	ldr	r3, [sp, #8]
 800134c:	eba3 0c07 	sub.w	ip, r3, r7
 8001350:	b280      	uxth	r0, r0
    for (j = 0; j < width; j++)
 8001352:	3701      	adds	r7, #1
      if(line & (1 << (width- j + offset- 1))) 
 8001354:	fa02 f20c 	lsl.w	r2, r2, ip
 8001358:	4222      	tst	r2, r4
 800135a:	f04f 020c 	mov.w	r2, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800135e:	bf0d      	iteet	eq
 8001360:	4b07      	ldreq	r3, [pc, #28]	; (8001380 <BSP_LCD_DisplayChar+0xc4>)
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001362:	fb02 f20b 	mulne.w	r2, r2, fp
 8001366:	4b06      	ldrne	r3, [pc, #24]	; (8001380 <BSP_LCD_DisplayChar+0xc4>)
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001368:	fb02 320b 	mlaeq	r2, r2, fp, r3
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800136c:	bf14      	ite	ne
 800136e:	589a      	ldrne	r2, [r3, r2]
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001370:	6852      	ldreq	r2, [r2, #4]
 8001372:	f7ff ff89 	bl	8001288 <BSP_LCD_DrawPixel>
 8001376:	9903      	ldr	r1, [sp, #12]
    for (j = 0; j < width; j++)
 8001378:	e7d6      	b.n	8001328 <BSP_LCD_DisplayChar+0x6c>
 800137a:	bf00      	nop
 800137c:	20000b28 	.word	0x20000b28
 8001380:	20000b2c 	.word	0x20000b2c

08001384 <BSP_LCD_DisplayStringAt>:
{
 8001384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001388:	4605      	mov	r5, r0
 800138a:	468a      	mov	sl, r1
 800138c:	4616      	mov	r6, r2
  while (*ptr++) size ++ ;
 800138e:	4614      	mov	r4, r2
 8001390:	f812 0b01 	ldrb.w	r0, [r2], #1
 8001394:	2800      	cmp	r0, #0
 8001396:	d1fa      	bne.n	800138e <BSP_LCD_DisplayStringAt+0xa>
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001398:	4a25      	ldr	r2, [pc, #148]	; (8001430 <BSP_LCD_DisplayStringAt+0xac>)
  switch (Mode)
 800139a:	2b01      	cmp	r3, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800139c:	4825      	ldr	r0, [pc, #148]	; (8001434 <BSP_LCD_DisplayStringAt+0xb0>)
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800139e:	6811      	ldr	r1, [r2, #0]
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80013a0:	f04f 020c 	mov.w	r2, #12
 80013a4:	fb02 0201 	mla	r2, r2, r1, r0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80013a8:	f04f 0034 	mov.w	r0, #52	; 0x34
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80013ac:	6897      	ldr	r7, [r2, #8]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80013ae:	4a22      	ldr	r2, [pc, #136]	; (8001438 <BSP_LCD_DisplayStringAt+0xb4>)
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80013b0:	f8b7 e004 	ldrh.w	lr, [r7, #4]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80013b4:	fb00 2001 	mla	r0, r0, r1, r2
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80013b8:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80013ba:	fbb0 f0fe 	udiv	r0, r0, lr
  switch (Mode)
 80013be:	d021      	beq.n	8001404 <BSP_LCD_DisplayStringAt+0x80>
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d027      	beq.n	8001414 <BSP_LCD_DisplayStringAt+0x90>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80013c4:	b22b      	sxth	r3, r5
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80013c6:	f04f 0834 	mov.w	r8, #52	; 0x34
    ref_column = 1;
 80013ca:	f04f 0900 	mov.w	r9, #0
 80013ce:	2b00      	cmp	r3, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80013d0:	fb08 2801 	mla	r8, r8, r1, r2
    ref_column = 1;
 80013d4:	bfd8      	it	le
 80013d6:	2501      	movle	r5, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80013d8:	88bc      	ldrh	r4, [r7, #4]
 80013da:	fa1f f389 	uxth.w	r3, r9
 80013de:	f8d8 0060 	ldr.w	r0, [r8, #96]	; 0x60
 80013e2:	f816 2009 	ldrb.w	r2, [r6, r9]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80013e6:	f109 0901 	add.w	r9, r9, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80013ea:	fb04 0313 	mls	r3, r4, r3, r0
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	42a3      	cmp	r3, r4
 80013f2:	bf34      	ite	cc
 80013f4:	2300      	movcc	r3, #0
 80013f6:	2301      	movcs	r3, #1
 80013f8:	2a00      	cmp	r2, #0
 80013fa:	bf08      	it	eq
 80013fc:	2300      	moveq	r3, #0
 80013fe:	b97b      	cbnz	r3, 8001420 <BSP_LCD_DisplayStringAt+0x9c>
}
 8001400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001404:	1b34      	subs	r4, r6, r4
 8001406:	4404      	add	r4, r0
 8001408:	fb0e f404 	mul.w	r4, lr, r4
 800140c:	eb05 0054 	add.w	r0, r5, r4, lsr #1
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001410:	b285      	uxth	r5, r0
      break;
 8001412:	e7d7      	b.n	80013c4 <BSP_LCD_DisplayStringAt+0x40>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001414:	1b34      	subs	r4, r6, r4
 8001416:	4404      	add	r4, r0
 8001418:	fb14 f40e 	smulbb	r4, r4, lr
 800141c:	1b60      	subs	r0, r4, r5
 800141e:	e7f7      	b.n	8001410 <BSP_LCD_DisplayStringAt+0x8c>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8001420:	4628      	mov	r0, r5
 8001422:	4651      	mov	r1, sl
 8001424:	f7ff ff4a 	bl	80012bc <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8001428:	88b8      	ldrh	r0, [r7, #4]
 800142a:	4428      	add	r0, r5
 800142c:	b285      	uxth	r5, r0
    i++;
 800142e:	e7d3      	b.n	80013d8 <BSP_LCD_DisplayStringAt+0x54>
 8001430:	20000b28 	.word	0x20000b28
 8001434:	20000b2c 	.word	0x20000b2c
 8001438:	200082a4 	.word	0x200082a4

0800143c <BSP_LCD_DrawCircle>:
{
 800143c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  decision = 3 - (Radius << 1);
 8001440:	0054      	lsls	r4, r2, #1
{
 8001442:	b087      	sub	sp, #28
 8001444:	4688      	mov	r8, r1
  current_y = Radius;
 8001446:	4615      	mov	r5, r2
  decision = 3 - (Radius << 1);
 8001448:	f1c4 0403 	rsb	r4, r4, #3
  current_x = 0;
 800144c:	2700      	movs	r7, #0
{
 800144e:	9001      	str	r0, [sp, #4]
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8001450:	4a34      	ldr	r2, [pc, #208]	; (8001524 <BSP_LCD_DrawCircle+0xe8>)
 8001452:	b2ae      	uxth	r6, r5
 8001454:	9b01      	ldr	r3, [sp, #4]
 8001456:	200c      	movs	r0, #12
 8001458:	6812      	ldr	r2, [r2, #0]
 800145a:	eba8 0106 	sub.w	r1, r8, r6
 800145e:	fa13 f387 	uxtah	r3, r3, r7
 8001462:	fa1f f987 	uxth.w	r9, r7
 8001466:	4342      	muls	r2, r0
 8001468:	482f      	ldr	r0, [pc, #188]	; (8001528 <BSP_LCD_DrawCircle+0xec>)
 800146a:	b29b      	uxth	r3, r3
 800146c:	5882      	ldr	r2, [r0, r2]
 800146e:	b289      	uxth	r1, r1
 8001470:	4618      	mov	r0, r3
 8001472:	9305      	str	r3, [sp, #20]
 8001474:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8001478:	f7ff ff06 	bl	8001288 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 800147c:	9b01      	ldr	r3, [sp, #4]
 800147e:	f8cd 9008 	str.w	r9, [sp, #8]
 8001482:	eba3 0b09 	sub.w	fp, r3, r9
 8001486:	fa1f fb8b 	uxth.w	fp, fp
 800148a:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800148e:	4658      	mov	r0, fp
 8001490:	f7ff fefa 	bl	8001288 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8001494:	9b01      	ldr	r3, [sp, #4]
 8001496:	9a03      	ldr	r2, [sp, #12]
 8001498:	eb06 0a03 	add.w	sl, r6, r3
 800149c:	9b02      	ldr	r3, [sp, #8]
 800149e:	eba8 0103 	sub.w	r1, r8, r3
 80014a2:	fa1f fa8a 	uxth.w	sl, sl
 80014a6:	b289      	uxth	r1, r1
 80014a8:	4650      	mov	r0, sl
 80014aa:	9104      	str	r1, [sp, #16]
 80014ac:	f7ff feec 	bl	8001288 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80014b0:	9b01      	ldr	r3, [sp, #4]
 80014b2:	eba3 0906 	sub.w	r9, r3, r6
 80014b6:	fa1f f989 	uxth.w	r9, r9
 80014ba:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 80014be:	4648      	mov	r0, r9
 80014c0:	f7ff fee2 	bl	8001288 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80014c4:	eb06 0108 	add.w	r1, r6, r8
 80014c8:	9b05      	ldr	r3, [sp, #20]
 80014ca:	b289      	uxth	r1, r1
 80014cc:	9a03      	ldr	r2, [sp, #12]
 80014ce:	4618      	mov	r0, r3
 80014d0:	9104      	str	r1, [sp, #16]
 80014d2:	f7ff fed9 	bl	8001288 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80014d6:	4658      	mov	r0, fp
 80014d8:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 80014dc:	f7ff fed4 	bl	8001288 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 80014e0:	9b02      	ldr	r3, [sp, #8]
 80014e2:	9a03      	ldr	r2, [sp, #12]
 80014e4:	4650      	mov	r0, sl
 80014e6:	eb03 0108 	add.w	r1, r3, r8
 80014ea:	b289      	uxth	r1, r1
 80014ec:	9102      	str	r1, [sp, #8]
 80014ee:	f7ff fecb 	bl	8001288 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 80014f2:	4648      	mov	r0, r9
 80014f4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80014f8:	f7ff fec6 	bl	8001288 <BSP_LCD_DrawPixel>
    if (decision < 0)
 80014fc:	2c00      	cmp	r4, #0
      decision += (current_x << 2) + 6;
 80014fe:	bfb1      	iteee	lt
 8001500:	3406      	addlt	r4, #6
      decision += ((current_x - current_y) << 2) + 10;
 8001502:	1b7b      	subge	r3, r7, r5
 8001504:	340a      	addge	r4, #10
      current_y--;
 8001506:	f105 35ff 	addge.w	r5, r5, #4294967295
      decision += (current_x << 2) + 6;
 800150a:	bfb8      	it	lt
 800150c:	eb04 0487 	addlt.w	r4, r4, r7, lsl #2
    current_x++;
 8001510:	f107 0701 	add.w	r7, r7, #1
      decision += ((current_x - current_y) << 2) + 10;
 8001514:	bfa8      	it	ge
 8001516:	eb04 0483 	addge.w	r4, r4, r3, lsl #2
  while (current_x <= current_y)
 800151a:	42bd      	cmp	r5, r7
 800151c:	d298      	bcs.n	8001450 <BSP_LCD_DrawCircle+0x14>
}
 800151e:	b007      	add	sp, #28
 8001520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001524:	20000b28 	.word	0x20000b28
 8001528:	20000b2c 	.word	0x20000b2c

0800152c <BSP_LCD_FillRect>:
{
 800152c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800152e:	4c0f      	ldr	r4, [pc, #60]	; (800156c <BSP_LCD_FillRect+0x40>)
 8001530:	4d0f      	ldr	r5, [pc, #60]	; (8001570 <BSP_LCD_FillRect+0x44>)
 8001532:	6827      	ldr	r7, [r4, #0]
 8001534:	240c      	movs	r4, #12
 8001536:	437c      	muls	r4, r7
 8001538:	f855 c004 	ldr.w	ip, [r5, r4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800153c:	2534      	movs	r5, #52	; 0x34
 800153e:	4c0d      	ldr	r4, [pc, #52]	; (8001574 <BSP_LCD_FillRect+0x48>)
 8001540:	fb05 4507 	mla	r5, r5, r7, r4
 8001544:	e9d5 4617 	ldrd	r4, r6, [r5, #92]	; 0x5c
 8001548:	fb06 0101 	mla	r1, r6, r1, r0
 800154c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800154e:	1ab6      	subs	r6, r6, r2
 8001550:	f8cd c004 	str.w	ip, [sp, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001554:	2802      	cmp	r0, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001556:	4638      	mov	r0, r7
 8001558:	9600      	str	r6, [sp, #0]
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800155a:	bf0c      	ite	eq
 800155c:	eb04 0141 	addeq.w	r1, r4, r1, lsl #1
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001560:	eb04 0181 	addne.w	r1, r4, r1, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001564:	f7ff fda2 	bl	80010ac <LL_FillBuffer>
}
 8001568:	b003      	add	sp, #12
 800156a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800156c:	20000b28 	.word	0x20000b28
 8001570:	20000b2c 	.word	0x20000b2c
 8001574:	200082a4 	.word	0x200082a4

08001578 <BSP_LCD_FillCircle>:
{
 8001578:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  decision = 3 - (Radius << 1);
 800157c:	0054      	lsls	r4, r2, #1
{
 800157e:	4680      	mov	r8, r0
 8001580:	460e      	mov	r6, r1
 8001582:	4691      	mov	r9, r2
  decision = 3 - (Radius << 1);
 8001584:	f1c4 0403 	rsb	r4, r4, #3
  current_y = Radius;
 8001588:	4617      	mov	r7, r2
  current_x = 0;
 800158a:	2500      	movs	r5, #0
    if(current_y > 0) 
 800158c:	b1af      	cbz	r7, 80015ba <BSP_LCD_FillCircle+0x42>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 800158e:	b2ba      	uxth	r2, r7
 8001590:	fa16 f185 	uxtah	r1, r6, r5
 8001594:	fa1f fa85 	uxth.w	sl, r5
 8001598:	eba8 0002 	sub.w	r0, r8, r2
 800159c:	0052      	lsls	r2, r2, #1
 800159e:	b289      	uxth	r1, r1
 80015a0:	b280      	uxth	r0, r0
 80015a2:	b292      	uxth	r2, r2
 80015a4:	9000      	str	r0, [sp, #0]
 80015a6:	9201      	str	r2, [sp, #4]
 80015a8:	f7ff fe48 	bl	800123c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 80015ac:	4651      	mov	r1, sl
 80015ae:	9a01      	ldr	r2, [sp, #4]
 80015b0:	9800      	ldr	r0, [sp, #0]
 80015b2:	1a71      	subs	r1, r6, r1
 80015b4:	b289      	uxth	r1, r1
 80015b6:	f7ff fe41 	bl	800123c <BSP_LCD_DrawHLine>
    if(current_x > 0) 
 80015ba:	b1a5      	cbz	r5, 80015e6 <BSP_LCD_FillCircle+0x6e>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 80015bc:	b2aa      	uxth	r2, r5
 80015be:	b2b9      	uxth	r1, r7
 80015c0:	eba8 0002 	sub.w	r0, r8, r2
 80015c4:	0052      	lsls	r2, r2, #1
 80015c6:	468a      	mov	sl, r1
 80015c8:	1a71      	subs	r1, r6, r1
 80015ca:	b280      	uxth	r0, r0
 80015cc:	b292      	uxth	r2, r2
 80015ce:	b289      	uxth	r1, r1
 80015d0:	9000      	str	r0, [sp, #0]
 80015d2:	9201      	str	r2, [sp, #4]
 80015d4:	f7ff fe32 	bl	800123c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 80015d8:	eb0a 0106 	add.w	r1, sl, r6
 80015dc:	9a01      	ldr	r2, [sp, #4]
 80015de:	9800      	ldr	r0, [sp, #0]
 80015e0:	b289      	uxth	r1, r1
 80015e2:	f7ff fe2b 	bl	800123c <BSP_LCD_DrawHLine>
    if (decision < 0)
 80015e6:	2c00      	cmp	r4, #0
      decision += (current_x << 2) + 6;
 80015e8:	bfb1      	iteee	lt
 80015ea:	3406      	addlt	r4, #6
      decision += ((current_x - current_y) << 2) + 10;
 80015ec:	1beb      	subge	r3, r5, r7
 80015ee:	340a      	addge	r4, #10
      current_y--;
 80015f0:	f107 37ff 	addge.w	r7, r7, #4294967295
      decision += (current_x << 2) + 6;
 80015f4:	bfb8      	it	lt
 80015f6:	eb04 0485 	addlt.w	r4, r4, r5, lsl #2
    current_x++;
 80015fa:	f105 0501 	add.w	r5, r5, #1
      decision += ((current_x - current_y) << 2) + 10;
 80015fe:	bfa8      	it	ge
 8001600:	eb04 0483 	addge.w	r4, r4, r3, lsl #2
  while (current_x <= current_y)
 8001604:	42af      	cmp	r7, r5
 8001606:	d2c1      	bcs.n	800158c <BSP_LCD_FillCircle+0x14>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8001608:	464a      	mov	r2, r9
 800160a:	4631      	mov	r1, r6
 800160c:	4640      	mov	r0, r8
}
 800160e:	b002      	add	sp, #8
 8001610:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8001614:	f7ff bf12 	b.w	800143c <BSP_LCD_DrawCircle>

08001618 <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001618:	4b4b      	ldr	r3, [pc, #300]	; (8001748 <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800161a:	484c      	ldr	r0, [pc, #304]	; (800174c <BSP_LCD_MspInit+0x134>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 800161c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800161e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
{
 8001622:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001624:	645a      	str	r2, [r3, #68]	; 0x44
{
 8001626:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001628:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800162a:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800162c:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800162e:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001630:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8001634:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001638:	4e45      	ldr	r6, [pc, #276]	; (8001750 <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 800163a:	9200      	str	r2, [sp, #0]
 800163c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800163e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001640:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001644:	631a      	str	r2, [r3, #48]	; 0x30
 8001646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001648:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 800164c:	9201      	str	r2, [sp, #4]
 800164e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001652:	f042 0210 	orr.w	r2, r2, #16
 8001656:	631a      	str	r2, [r3, #48]	; 0x30
 8001658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800165a:	f002 0210 	and.w	r2, r2, #16
 800165e:	9202      	str	r2, [sp, #8]
 8001660:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001664:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001668:	631a      	str	r2, [r3, #48]	; 0x30
 800166a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800166c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001670:	9203      	str	r2, [sp, #12]
 8001672:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001676:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800167a:	631a      	str	r2, [r3, #48]	; 0x30
 800167c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800167e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001682:	9204      	str	r2, [sp, #16]
 8001684:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800168c:	631a      	str	r2, [r3, #48]	; 0x30
 800168e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001690:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001694:	9205      	str	r2, [sp, #20]
 8001696:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800169a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800169e:	631a      	str	r2, [r3, #48]	; 0x30
 80016a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016a2:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80016a6:	9206      	str	r2, [sp, #24]
 80016a8:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 80016aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016b0:	631a      	str	r2, [r3, #48]	; 0x30
 80016b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016b4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80016b8:	9207      	str	r2, [sp, #28]
 80016ba:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80016bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016c2:	631a      	str	r2, [r3, #48]	; 0x30
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80016c6:	950d      	str	r5, [sp, #52]	; 0x34
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80016c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016cc:	9308      	str	r3, [sp, #32]
 80016ce:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80016d0:	2310      	movs	r3, #16
 80016d2:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80016d8:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80016dc:	f001 fe18 	bl	8003310 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80016e0:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80016e2:	a909      	add	r1, sp, #36	; 0x24
 80016e4:	481b      	ldr	r0, [pc, #108]	; (8001754 <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80016e6:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80016e8:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80016ec:	f001 fe10 	bl	8003310 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80016f0:	f44f 4366 	mov.w	r3, #58880	; 0xe600
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80016f4:	a909      	add	r1, sp, #36	; 0x24
 80016f6:	4630      	mov	r0, r6
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80016f8:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80016fa:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80016fe:	f001 fe07 	bl	8003310 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8001702:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001706:	a909      	add	r1, sp, #36	; 0x24
 8001708:	4813      	ldr	r0, [pc, #76]	; (8001758 <BSP_LCD_MspInit+0x140>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800170a:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800170c:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001710:	f001 fdfe 	bl	8003310 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8001714:	23f7      	movs	r3, #247	; 0xf7
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8001716:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001718:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800171a:	2501      	movs	r5, #1
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800171c:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8001720:	4c0e      	ldr	r4, [pc, #56]	; (800175c <BSP_LCD_MspInit+0x144>)
 8001722:	4620      	mov	r0, r4
 8001724:	f001 fdf4 	bl	8003310 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8001728:	a909      	add	r1, sp, #36	; 0x24
 800172a:	4630      	mov	r0, r6
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 800172c:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800172e:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8001730:	f001 fdee 	bl	8003310 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8001734:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8001736:	a909      	add	r1, sp, #36	; 0x24
 8001738:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800173a:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800173e:	f001 fde7 	bl	8003310 <HAL_GPIO_Init>
}
 8001742:	b00f      	add	sp, #60	; 0x3c
 8001744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800
 800174c:	40021000 	.word	0x40021000
 8001750:	40022000 	.word	0x40022000
 8001754:	40021800 	.word	0x40021800
 8001758:	40022400 	.word	0x40022400
 800175c:	40022800 	.word	0x40022800

08001760 <BSP_LCD_ClockConfig>:
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001760:	4805      	ldr	r0, [pc, #20]	; (8001778 <BSP_LCD_ClockConfig+0x18>)
 8001762:	2308      	movs	r3, #8
 8001764:	6003      	str	r3, [r0, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8001766:	23c0      	movs	r3, #192	; 0xc0
 8001768:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800176a:	2305      	movs	r3, #5
 800176c:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800176e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001772:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8001774:	f003 ba38 	b.w	8004be8 <HAL_RCCEx_PeriphCLKConfig>
 8001778:	20000b84 	.word	0x20000b84

0800177c <BSP_LCD_Init>:
{    
 800177c:	b510      	push	{r4, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800177e:	2228      	movs	r2, #40	; 0x28
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8001780:	4c24      	ldr	r4, [pc, #144]	; (8001814 <BSP_LCD_Init+0x98>)
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8001782:	2309      	movs	r3, #9
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001784:	2135      	movs	r1, #53	; 0x35
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001786:	f240 101b 	movw	r0, #283	; 0x11b
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800178a:	f240 1c1d 	movw	ip, #285	; 0x11d
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800178e:	e9c4 2305 	strd	r2, r3, [r4, #20]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001792:	230b      	movs	r3, #11
 8001794:	e9c4 1307 	strd	r1, r3, [r4, #28]
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001798:	f240 2315 	movw	r3, #533	; 0x215
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800179c:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800179e:	e9c4 3009 	strd	r3, r0, [r4, #36]	; 0x24
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80017a2:	f240 2335 	movw	r3, #565	; 0x235
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80017a6:	4620      	mov	r0, r4
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80017a8:	e9c4 3c0b 	strd	r3, ip, [r4, #44]	; 0x2c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80017ac:	f7ff ffd8 	bl	8001760 <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80017b0:	f44f 7ef0 	mov.w	lr, #480	; 0x1e0
 80017b4:	f44f 7388 	mov.w	r3, #272	; 0x110
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80017b8:	4620      	mov	r0, r4
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80017ba:	e9c4 e318 	strd	lr, r3, [r4, #96]	; 0x60
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	86a3      	strh	r3, [r4, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Red = 0;
 80017c2:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80017c6:	e9c4 3301 	strd	r3, r3, [r4, #4]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80017ca:	e9c4 3303 	strd	r3, r3, [r4, #12]
  hLtdcHandler.Instance = LTDC;
 80017ce:	4b12      	ldr	r3, [pc, #72]	; (8001818 <BSP_LCD_Init+0x9c>)
 80017d0:	6023      	str	r3, [r4, #0]
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80017d2:	f002 ff3a 	bl	800464a <HAL_LTDC_GetState>
 80017d6:	4601      	mov	r1, r0
 80017d8:	b910      	cbnz	r0, 80017e0 <BSP_LCD_Init+0x64>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80017da:	4620      	mov	r0, r4
 80017dc:	f7ff ff1c 	bl	8001618 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
 80017e0:	480c      	ldr	r0, [pc, #48]	; (8001814 <BSP_LCD_Init+0x98>)
 80017e2:	f002 fe39 	bl	8004458 <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80017e6:	2201      	movs	r2, #1
 80017e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ec:	480b      	ldr	r0, [pc, #44]	; (800181c <BSP_LCD_Init+0xa0>)
 80017ee:	f001 ff15 	bl	800361c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80017f2:	2201      	movs	r2, #1
 80017f4:	2108      	movs	r1, #8
 80017f6:	480a      	ldr	r0, [pc, #40]	; (8001820 <BSP_LCD_Init+0xa4>)
 80017f8:	f001 ff10 	bl	800361c <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 80017fc:	f000 f91e 	bl	8001a3c <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = fonts;
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <BSP_LCD_Init+0xa8>)
 8001802:	4a09      	ldr	r2, [pc, #36]	; (8001828 <BSP_LCD_Init+0xac>)
 8001804:	210c      	movs	r1, #12
 8001806:	681b      	ldr	r3, [r3, #0]
}
 8001808:	2000      	movs	r0, #0
  DrawProp[ActiveLayer].pFont = fonts;
 800180a:	fb01 2303 	mla	r3, r1, r3, r2
 800180e:	4a07      	ldr	r2, [pc, #28]	; (800182c <BSP_LCD_Init+0xb0>)
 8001810:	609a      	str	r2, [r3, #8]
}
 8001812:	bd10      	pop	{r4, pc}
 8001814:	200082a4 	.word	0x200082a4
 8001818:	40016800 	.word	0x40016800
 800181c:	40022000 	.word	0x40022000
 8001820:	40022800 	.word	0x40022800
 8001824:	20000b28 	.word	0x20000b28
 8001828:	20000b2c 	.word	0x20000b2c
 800182c:	20000040 	.word	0x20000040

08001830 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001830:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001834:	4c21      	ldr	r4, [pc, #132]	; (80018bc <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001836:	2601      	movs	r6, #1
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001838:	4d21      	ldr	r5, [pc, #132]	; (80018c0 <BSP_SDRAM_Initialization_sequence+0x90>)
  __IO uint32_t tmpmrd = 0;
 800183a:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800183e:	2710      	movs	r7, #16
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001840:	4621      	mov	r1, r4
{
 8001842:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001844:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001848:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 800184a:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800184e:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8001852:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001856:	f003 fc6f 	bl	8005138 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800185a:	4630      	mov	r0, r6
 800185c:	f001 f99a 	bl	8002b94 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001860:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001862:	4621      	mov	r1, r4
 8001864:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001868:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800186a:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 800186e:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001872:	f003 fc61 	bl	8005138 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001876:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001878:	4621      	mov	r1, r4
 800187a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800187e:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001880:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
 8001884:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
 8001886:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800188a:	f003 fc55 	bl	8005138 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800188e:	f44f 7308 	mov.w	r3, #544	; 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001892:	4621      	mov	r1, r4
 8001894:	f64f 72ff 	movw	r2, #65535	; 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001898:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800189a:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800189c:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 800189e:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80018a0:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 80018a4:	9b01      	ldr	r3, [sp, #4]
 80018a6:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80018a8:	f003 fc46 	bl	8005138 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80018ac:	4649      	mov	r1, r9
 80018ae:	4628      	mov	r0, r5
}
 80018b0:	b003      	add	sp, #12
 80018b2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80018b6:	f003 bc5e 	b.w	8005176 <HAL_SDRAM_ProgramRefreshRate>
 80018ba:	bf00      	nop
 80018bc:	20000c08 	.word	0x20000c08
 80018c0:	2000834c 	.word	0x2000834c

080018c4 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80018c4:	4b54      	ldr	r3, [pc, #336]	; (8001a18 <BSP_SDRAM_MspInit+0x154>)
 80018c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018c8:	f042 0201 	orr.w	r2, r2, #1
{  
 80018cc:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 80018ce:	639a      	str	r2, [r3, #56]	; 0x38
{  
 80018d0:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 80018d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{  
 80018d4:	4606      	mov	r6, r0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80018d6:	a909      	add	r1, sp, #36	; 0x24
 80018d8:	4850      	ldr	r0, [pc, #320]	; (8001a1c <BSP_SDRAM_MspInit+0x158>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80018da:	f002 0201 	and.w	r2, r2, #1
  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80018de:	4c50      	ldr	r4, [pc, #320]	; (8001a20 <BSP_SDRAM_MspInit+0x15c>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80018e0:	2500      	movs	r5, #0
  __HAL_RCC_FMC_CLK_ENABLE();
 80018e2:	9201      	str	r2, [sp, #4]
 80018e4:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 80018e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018e8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80018ec:	631a      	str	r2, [r3, #48]	; 0x30
 80018ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018f0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80018f4:	9202      	str	r2, [sp, #8]
 80018f6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018fa:	f042 0204 	orr.w	r2, r2, #4
 80018fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001902:	f002 0204 	and.w	r2, r2, #4
 8001906:	9203      	str	r2, [sp, #12]
 8001908:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800190a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800190c:	f042 0208 	orr.w	r2, r2, #8
 8001910:	631a      	str	r2, [r3, #48]	; 0x30
 8001912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001914:	f002 0208 	and.w	r2, r2, #8
 8001918:	9204      	str	r2, [sp, #16]
 800191a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800191c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800191e:	f042 0210 	orr.w	r2, r2, #16
 8001922:	631a      	str	r2, [r3, #48]	; 0x30
 8001924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001926:	f002 0210 	and.w	r2, r2, #16
 800192a:	9205      	str	r2, [sp, #20]
 800192c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800192e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001930:	f042 0220 	orr.w	r2, r2, #32
 8001934:	631a      	str	r2, [r3, #48]	; 0x30
 8001936:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001938:	f002 0220 	and.w	r2, r2, #32
 800193c:	9206      	str	r2, [sp, #24]
 800193e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001942:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001946:	631a      	str	r2, [r3, #48]	; 0x30
 8001948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800194a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800194e:	9207      	str	r2, [sp, #28]
 8001950:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001952:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001954:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001958:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800195a:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001962:	9308      	str	r3, [sp, #32]
 8001964:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001966:	2302      	movs	r3, #2
 8001968:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800196c:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800196e:	230c      	movs	r3, #12
 8001970:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8001972:	2308      	movs	r3, #8
 8001974:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8001976:	f001 fccb 	bl	8003310 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800197a:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800197e:	a909      	add	r1, sp, #36	; 0x24
 8001980:	4828      	ldr	r0, [pc, #160]	; (8001a24 <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8001982:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001984:	f001 fcc4 	bl	8003310 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001988:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800198c:	a909      	add	r1, sp, #36	; 0x24
 800198e:	4826      	ldr	r0, [pc, #152]	; (8001a28 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001990:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001992:	f001 fcbd 	bl	8003310 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001996:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800199a:	a909      	add	r1, sp, #36	; 0x24
 800199c:	4823      	ldr	r0, [pc, #140]	; (8001a2c <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800199e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80019a0:	f001 fcb6 	bl	8003310 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80019a4:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80019a8:	a909      	add	r1, sp, #36	; 0x24
 80019aa:	4821      	ldr	r0, [pc, #132]	; (8001a30 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80019ac:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80019ae:	f001 fcaf 	bl	8003310 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80019b2:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80019b4:	a909      	add	r1, sp, #36	; 0x24
 80019b6:	481f      	ldr	r0, [pc, #124]	; (8001a34 <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80019b8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80019ba:	f001 fca9 	bl	8003310 <HAL_GPIO_Init>
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80019be:	2380      	movs	r3, #128	; 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80019c0:	f44f 7100 	mov.w	r1, #512	; 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80019c4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80019c8:	6325      	str	r5, [r4, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80019ca:	6334      	str	r4, [r6, #48]	; 0x30
  dma_handle.Init.Mode                = DMA_NORMAL;
 80019cc:	61e5      	str	r5, [r4, #28]
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80019ce:	63a6      	str	r6, [r4, #56]	; 0x38
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80019d0:	e9c4 5301 	strd	r5, r3, [r4, #4]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80019d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019d8:	e9c4 1303 	strd	r1, r3, [r4, #12]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80019dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019e0:	e9c4 0305 	strd	r0, r3, [r4, #20]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80019e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80019e8:	4620      	mov	r0, r4
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80019ea:	e9c4 3508 	strd	r3, r5, [r4, #32]
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80019ee:	2303      	movs	r3, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80019f0:	e9c4 350a 	strd	r3, r5, [r4, #40]	; 0x28
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80019f4:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <BSP_SDRAM_MspInit+0x174>)
 80019f6:	6023      	str	r3, [r4, #0]
  HAL_DMA_DeInit(&dma_handle);
 80019f8:	f001 fa82 	bl	8002f00 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80019fc:	4620      	mov	r0, r4
 80019fe:	f001 f9ff 	bl	8002e00 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001a02:	462a      	mov	r2, r5
 8001a04:	210f      	movs	r1, #15
 8001a06:	2038      	movs	r0, #56	; 0x38
 8001a08:	f001 f8e8 	bl	8002bdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001a0c:	2038      	movs	r0, #56	; 0x38
 8001a0e:	f001 f917 	bl	8002c40 <HAL_NVIC_EnableIRQ>
}
 8001a12:	b00e      	add	sp, #56	; 0x38
 8001a14:	bd70      	pop	{r4, r5, r6, pc}
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40020800 	.word	0x40020800
 8001a20:	20000c34 	.word	0x20000c34
 8001a24:	40020c00 	.word	0x40020c00
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40021400 	.word	0x40021400
 8001a30:	40021800 	.word	0x40021800
 8001a34:	40021c00 	.word	0x40021c00
 8001a38:	40026410 	.word	0x40026410

08001a3c <BSP_SDRAM_Init>:
{ 
 8001a3c:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001a3e:	4c19      	ldr	r4, [pc, #100]	; (8001aa4 <BSP_SDRAM_Init+0x68>)
  Timing.ExitSelfRefreshDelay = 7;
 8001a40:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001a42:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <BSP_SDRAM_Init+0x6c>)
  Timing.SelfRefreshTime      = 4;
 8001a44:	2204      	movs	r2, #4
  Timing.LoadToActiveDelay    = 2;
 8001a46:	4d19      	ldr	r5, [pc, #100]	; (8001aac <BSP_SDRAM_Init+0x70>)
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001a48:	f44f 6000 	mov.w	r0, #2048	; 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001a4c:	6023      	str	r3, [r4, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8001a4e:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001a50:	60e2      	str	r2, [r4, #12]
  Timing.RCDDelay             = 2;
 8001a52:	61ab      	str	r3, [r5, #24]
  Timing.ExitSelfRefreshDelay = 7;
 8001a54:	e9c5 3100 	strd	r3, r1, [r5]
  Timing.RowCycleDelay        = 7;
 8001a58:	e9c5 2102 	strd	r2, r1, [r5, #8]
  Timing.RPDelay              = 2;
 8001a5c:	e9c5 3304 	strd	r3, r3, [r5, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001a60:	2210      	movs	r2, #16
 8001a62:	2340      	movs	r3, #64	; 0x40
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001a64:	2100      	movs	r1, #0
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001a66:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8001a6a:	f44f 7380 	mov.w	r3, #256	; 0x100
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001a6e:	62a1      	str	r1, [r4, #40]	; 0x28
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001a70:	e9c4 3106 	strd	r3, r1, [r4, #24]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a78:	e9c4 0308 	strd	r0, r3, [r4, #32]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001a7c:	4620      	mov	r0, r4
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001a7e:	e9c4 1101 	strd	r1, r1, [r4, #4]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001a82:	f7ff ff1f 	bl	80018c4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001a86:	4629      	mov	r1, r5
 8001a88:	4620      	mov	r0, r4
 8001a8a:	4c09      	ldr	r4, [pc, #36]	; (8001ab0 <BSP_SDRAM_Init+0x74>)
 8001a8c:	f003 fb34 	bl	80050f8 <HAL_SDRAM_Init>
 8001a90:	3800      	subs	r0, #0
 8001a92:	bf18      	it	ne
 8001a94:	2001      	movne	r0, #1
 8001a96:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001a98:	f240 6003 	movw	r0, #1539	; 0x603
 8001a9c:	f7ff fec8 	bl	8001830 <BSP_SDRAM_Initialization_sequence>
}
 8001aa0:	7820      	ldrb	r0, [r4, #0]
 8001aa2:	bd38      	pop	{r3, r4, r5, pc}
 8001aa4:	2000834c 	.word	0x2000834c
 8001aa8:	a0000140 	.word	0xa0000140
 8001aac:	20000c18 	.word	0x20000c18
 8001ab0:	20000000 	.word	0x20000000

08001ab4 <BSP_TS_Init>:
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
 8001ab4:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <BSP_TS_Init+0x38>)
{
 8001ab6:	b510      	push	{r4, lr}
  tsXBoundary = ts_SizeX;
 8001ab8:	8018      	strh	r0, [r3, #0]
  tsYBoundary = ts_SizeY;
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8001aba:	2070      	movs	r0, #112	; 0x70
  tsYBoundary = ts_SizeY;
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <BSP_TS_Init+0x3c>)
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8001abe:	4c0d      	ldr	r4, [pc, #52]	; (8001af4 <BSP_TS_Init+0x40>)
  tsYBoundary = ts_SizeY;
 8001ac0:	8019      	strh	r1, [r3, #0]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8001ac2:	6823      	ldr	r3, [r4, #0]
 8001ac4:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8001ac6:	6863      	ldr	r3, [r4, #4]
 8001ac8:	2070      	movs	r0, #112	; 0x70
 8001aca:	4798      	blx	r3
 8001acc:	2851      	cmp	r0, #81	; 0x51
 8001ace:	d10b      	bne.n	8001ae8 <BSP_TS_Init+0x34>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <BSP_TS_Init+0x44>)
    I2cAddress = TS_I2C_ADDRESS;
 8001ad2:	2070      	movs	r0, #112	; 0x70
    tsOrientation = TS_SWAP_XY;
 8001ad4:	2208      	movs	r2, #8
    tsDriver = &ft5336_ts_drv;
 8001ad6:	601c      	str	r4, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <BSP_TS_Init+0x48>)
 8001ada:	7018      	strb	r0, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <BSP_TS_Init+0x4c>)
 8001ade:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8001ae0:	68e3      	ldr	r3, [r4, #12]
 8001ae2:	4798      	blx	r3
  uint8_t status = TS_OK;
 8001ae4:	2000      	movs	r0, #0
  {
    status = TS_DEVICE_NOT_FOUND;
  }

  return status;
}
 8001ae6:	bd10      	pop	{r4, pc}
    status = TS_DEVICE_NOT_FOUND;
 8001ae8:	2003      	movs	r0, #3
 8001aea:	e7fc      	b.n	8001ae6 <BSP_TS_Init+0x32>
 8001aec:	20000cc6 	.word	0x20000cc6
 8001af0:	20000cc8 	.word	0x20000cc8
 8001af4:	20000004 	.word	0x20000004
 8001af8:	20000cc0 	.word	0x20000cc0
 8001afc:	20000c94 	.word	0x20000c94
 8001b00:	20000cc4 	.word	0x20000cc4

08001b04 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 8001b04:	b510      	push	{r4, lr}
  GPIO_InitTypeDef gpio_init_structure;

  /* Configure Interrupt mode for SD detection pin */
  gpio_init_structure.Pin = TS_INT_PIN;
 8001b06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 8001b0a:	b086      	sub	sp, #24
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001b0c:	2400      	movs	r4, #0
  gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8001b0e:	480e      	ldr	r0, [pc, #56]	; (8001b48 <BSP_TS_ITConfig+0x44>)
  gpio_init_structure.Pin = TS_INT_PIN;
 8001b10:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001b12:	2302      	movs	r3, #2
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8001b14:	a901      	add	r1, sp, #4
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001b16:	e9cd 4303 	strd	r4, r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001b1a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b1e:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8001b20:	f001 fbf6 	bl	8003310 <HAL_GPIO_Init>

  /* Enable and set Touch screen EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 8001b24:	4622      	mov	r2, r4
 8001b26:	210f      	movs	r1, #15
 8001b28:	2028      	movs	r0, #40	; 0x28
 8001b2a:	f001 f857 	bl	8002bdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 8001b2e:	2028      	movs	r0, #40	; 0x28
 8001b30:	f001 f886 	bl	8002c40 <HAL_NVIC_EnableIRQ>

  /* Enable the TS ITs */
  tsDriver->EnableIT(I2cAddress);
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <BSP_TS_ITConfig+0x48>)
 8001b36:	4a06      	ldr	r2, [pc, #24]	; (8001b50 <BSP_TS_ITConfig+0x4c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	7810      	ldrb	r0, [r2, #0]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	4798      	blx	r3

  return TS_OK;  
}
 8001b40:	4620      	mov	r0, r4
 8001b42:	b006      	add	sp, #24
 8001b44:	bd10      	pop	{r4, pc}
 8001b46:	bf00      	nop
 8001b48:	40022000 	.word	0x40022000
 8001b4c:	20000cc0 	.word	0x20000cc0
 8001b50:	20000c94 	.word	0x20000c94

08001b54 <BSP_TS_Get_GestureId>:
{
  uint32_t gestureId = 0;
  uint8_t  ts_status = TS_OK;

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8001b54:	4b15      	ldr	r3, [pc, #84]	; (8001bac <BSP_TS_Get_GestureId+0x58>)
{
 8001b56:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t gestureId = 0;
 8001b58:	2400      	movs	r4, #0
{
 8001b5a:	4605      	mov	r5, r0
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8001b5c:	a901      	add	r1, sp, #4
 8001b5e:	7818      	ldrb	r0, [r3, #0]
  uint32_t gestureId = 0;
 8001b60:	9401      	str	r4, [sp, #4]
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8001b62:	f000 f9b1 	bl	8001ec8 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8001b66:	9801      	ldr	r0, [sp, #4]
 8001b68:	2818      	cmp	r0, #24
 8001b6a:	d019      	beq.n	8001ba0 <BSP_TS_Get_GestureId+0x4c>
 8001b6c:	d808      	bhi.n	8001b80 <BSP_TS_Get_GestureId+0x2c>
 8001b6e:	2810      	cmp	r0, #16
 8001b70:	d011      	beq.n	8001b96 <BSP_TS_Get_GestureId+0x42>
 8001b72:	2814      	cmp	r0, #20
 8001b74:	d012      	beq.n	8001b9c <BSP_TS_Get_GestureId+0x48>
 8001b76:	b158      	cbz	r0, 8001b90 <BSP_TS_Get_GestureId+0x3c>
 8001b78:	2401      	movs	r4, #1
      ts_status = TS_ERROR;
      break;
  } /* of switch(gestureId) */

  return(ts_status);
}
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	b003      	add	sp, #12
 8001b7e:	bd30      	pop	{r4, r5, pc}
  switch(gestureId)
 8001b80:	2840      	cmp	r0, #64	; 0x40
 8001b82:	d00f      	beq.n	8001ba4 <BSP_TS_Get_GestureId+0x50>
 8001b84:	2849      	cmp	r0, #73	; 0x49
 8001b86:	d00f      	beq.n	8001ba8 <BSP_TS_Get_GestureId+0x54>
 8001b88:	281c      	cmp	r0, #28
 8001b8a:	d1f5      	bne.n	8001b78 <BSP_TS_Get_GestureId+0x24>
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	e003      	b.n	8001b98 <BSP_TS_Get_GestureId+0x44>
  uint8_t  ts_status = TS_OK;
 8001b90:	4604      	mov	r4, r0
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8001b92:	62a8      	str	r0, [r5, #40]	; 0x28
      break;
 8001b94:	e7f1      	b.n	8001b7a <BSP_TS_Get_GestureId+0x26>
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8001b96:	2301      	movs	r3, #1
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8001b98:	62ab      	str	r3, [r5, #40]	; 0x28
      break;
 8001b9a:	e7ee      	b.n	8001b7a <BSP_TS_Get_GestureId+0x26>
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	e7fb      	b.n	8001b98 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e7f9      	b.n	8001b98 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8001ba4:	2305      	movs	r3, #5
 8001ba6:	e7f7      	b.n	8001b98 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8001ba8:	2306      	movs	r3, #6
 8001baa:	e7f5      	b.n	8001b98 <BSP_TS_Get_GestureId+0x44>
 8001bac:	20000c94 	.word	0x20000c94

08001bb0 <BSP_TS_GetState>:
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8001bb0:	4b58      	ldr	r3, [pc, #352]	; (8001d14 <BSP_TS_GetState+0x164>)
{
 8001bb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8001bb6:	681a      	ldr	r2, [r3, #0]
{
 8001bb8:	b097      	sub	sp, #92	; 0x5c
  uint32_t weight = 0;
 8001bba:	2400      	movs	r4, #0
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8001bbc:	4e56      	ldr	r6, [pc, #344]	; (8001d18 <BSP_TS_GetState+0x168>)
{
 8001bbe:	4605      	mov	r5, r0
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8001bc0:	6912      	ldr	r2, [r2, #16]
 8001bc2:	7830      	ldrb	r0, [r6, #0]
  uint32_t event = 0;
 8001bc4:	9409      	str	r4, [sp, #36]	; 0x24
  uint32_t area = 0;
 8001bc6:	e9cd 4407 	strd	r4, r4, [sp, #28]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8001bca:	4790      	blx	r2
 8001bcc:	9604      	str	r6, [sp, #16]
 8001bce:	7028      	strb	r0, [r5, #0]
  if(TS_State->touchDetected)
 8001bd0:	b1a0      	cbz	r0, 8001bfc <BSP_TS_GetState+0x4c>
 8001bd2:	ab0d      	add	r3, sp, #52	; 0x34
 8001bd4:	f105 0616 	add.w	r6, r5, #22
 8001bd8:	f105 0902 	add.w	r9, r5, #2
 8001bdc:	f8df a148 	ldr.w	sl, [pc, #328]	; 8001d28 <BSP_TS_GetState+0x178>
 8001be0:	9303      	str	r3, [sp, #12]
 8001be2:	f10d 0840 	add.w	r8, sp, #64	; 0x40
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8001be6:	4b4b      	ldr	r3, [pc, #300]	; (8001d14 <BSP_TS_GetState+0x164>)
 8001be8:	af13      	add	r7, sp, #76	; 0x4c
 8001bea:	f8df b140 	ldr.w	fp, [pc, #320]	; 8001d2c <BSP_TS_GetState+0x17c>
 8001bee:	9305      	str	r3, [sp, #20]
    for(index=0; index < TS_State->touchDetected; index++)
 8001bf0:	782b      	ldrb	r3, [r5, #0]
 8001bf2:	42a3      	cmp	r3, r4
 8001bf4:	d805      	bhi.n	8001c02 <BSP_TS_GetState+0x52>
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8001bf6:	4628      	mov	r0, r5
 8001bf8:	f7ff ffac 	bl	8001b54 <BSP_TS_Get_GestureId>
}
 8001bfc:	b017      	add	sp, #92	; 0x5c
 8001bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8001c02:	9b05      	ldr	r3, [sp, #20]
 8001c04:	463a      	mov	r2, r7
 8001c06:	9804      	ldr	r0, [sp, #16]
 8001c08:	4641      	mov	r1, r8
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	7800      	ldrb	r0, [r0, #0]
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	4798      	blx	r3
      if(tsOrientation == TS_SWAP_NONE)
 8001c12:	4b42      	ldr	r3, [pc, #264]	; (8001d1c <BSP_TS_GetState+0x16c>)
 8001c14:	781a      	ldrb	r2, [r3, #0]
 8001c16:	ab0a      	add	r3, sp, #40	; 0x28
 8001c18:	2a01      	cmp	r2, #1
 8001c1a:	d149      	bne.n	8001cb0 <BSP_TS_GetState+0x100>
        x[index] = brute_x[index];
 8001c1c:	f8b8 1000 	ldrh.w	r1, [r8]
 8001c20:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
        y[index] = brute_y[index];
 8001c24:	8839      	ldrh	r1, [r7, #0]
        y[index] = 4096 - brute_y[index];
 8001c26:	9803      	ldr	r0, [sp, #12]
 8001c28:	8001      	strh	r1, [r0, #0]
      if(tsOrientation & TS_SWAP_XY)
 8001c2a:	0712      	lsls	r2, r2, #28
 8001c2c:	d506      	bpl.n	8001c3c <BSP_TS_GetState+0x8c>
        y[index] = brute_x[index];
 8001c2e:	f8b8 2000 	ldrh.w	r2, [r8]
 8001c32:	9903      	ldr	r1, [sp, #12]
 8001c34:	800a      	strh	r2, [r1, #0]
        x[index] = brute_y[index];
 8001c36:	883a      	ldrh	r2, [r7, #0]
 8001c38:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8001c3c:	f833 c014 	ldrh.w	ip, [r3, r4, lsl #1]
 8001c40:	f8da 2000 	ldr.w	r2, [sl]
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8001c44:	f8db 0000 	ldr.w	r0, [fp]
 8001c48:	b293      	uxth	r3, r2
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8001c4a:	4594      	cmp	ip, r2
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8001c4c:	9a03      	ldr	r2, [sp, #12]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8001c4e:	bf8c      	ite	hi
 8001c50:	ebac 0303 	subhi.w	r3, ip, r3
 8001c54:	eba3 030c 	subls.w	r3, r3, ip
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8001c58:	f832 1b02 	ldrh.w	r1, [r2], #2
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8001c5c:	b29b      	uxth	r3, r3
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8001c5e:	4281      	cmp	r1, r0
 8001c60:	9203      	str	r2, [sp, #12]
 8001c62:	b282      	uxth	r2, r0
 8001c64:	bf8c      	ite	hi
 8001c66:	1a8a      	subhi	r2, r1, r2
 8001c68:	1a52      	subls	r2, r2, r1
 8001c6a:	b292      	uxth	r2, r2
      if ((x_diff + y_diff) > 5)
 8001c6c:	4413      	add	r3, r2
 8001c6e:	2b05      	cmp	r3, #5
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8001c70:	9b04      	ldr	r3, [sp, #16]
 8001c72:	7818      	ldrb	r0, [r3, #0]
        _x[index] = x[index];
 8001c74:	bfc4      	itt	gt
 8001c76:	f8ca c000 	strgt.w	ip, [sl]
        _y[index] = y[index];
 8001c7a:	f8cb 1000 	strgt.w	r1, [fp]
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8001c7e:	2870      	cmp	r0, #112	; 0x70
 8001c80:	d124      	bne.n	8001ccc <BSP_TS_GetState+0x11c>
        TS_State->touchX[index] = x[index];
 8001c82:	f8a9 c000 	strh.w	ip, [r9]
        TS_State->touchY[index] = y[index];
 8001c86:	f8a9 100a 	strh.w	r1, [r9, #10]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8001c8a:	ab09      	add	r3, sp, #36	; 0x24
 8001c8c:	aa07      	add	r2, sp, #28
 8001c8e:	4621      	mov	r1, r4
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	ab08      	add	r3, sp, #32
 8001c94:	f000 f928 	bl	8001ee8 <ft5336_TS_GetTouchInfo>
      TS_State->touchWeight[index] = weight;
 8001c98:	9b07      	ldr	r3, [sp, #28]
 8001c9a:	f806 3b01 	strb.w	r3, [r6], #1
      TS_State->touchArea[index]   = area;
 8001c9e:	9b08      	ldr	r3, [sp, #32]
 8001ca0:	7273      	strb	r3, [r6, #9]
      switch(event)
 8001ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d824      	bhi.n	8001cf2 <BSP_TS_GetState+0x142>
 8001ca8:	e8df f003 	tbb	[pc, r3]
 8001cac:	32302e21 	.word	0x32302e21
      if(tsOrientation & TS_SWAP_X)
 8001cb0:	0790      	lsls	r0, r2, #30
        x[index] = 4096 - brute_x[index];
 8001cb2:	bf42      	ittt	mi
 8001cb4:	f8b8 1000 	ldrhmi.w	r1, [r8]
 8001cb8:	f5c1 5180 	rsbmi	r1, r1, #4096	; 0x1000
 8001cbc:	f823 1014 	strhmi.w	r1, [r3, r4, lsl #1]
      if(tsOrientation & TS_SWAP_Y)
 8001cc0:	0751      	lsls	r1, r2, #29
 8001cc2:	d5b2      	bpl.n	8001c2a <BSP_TS_GetState+0x7a>
        y[index] = 4096 - brute_y[index];
 8001cc4:	8839      	ldrh	r1, [r7, #0]
 8001cc6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8001cca:	e7ac      	b.n	8001c26 <BSP_TS_GetState+0x76>
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8001ccc:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <BSP_TS_GetState+0x170>)
 8001cce:	881a      	ldrh	r2, [r3, #0]
 8001cd0:	f8da 3000 	ldr.w	r3, [sl]
 8001cd4:	4353      	muls	r3, r2
 8001cd6:	0b1b      	lsrs	r3, r3, #12
 8001cd8:	f8a9 3000 	strh.w	r3, [r9]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8001cdc:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <BSP_TS_GetState+0x174>)
 8001cde:	881a      	ldrh	r2, [r3, #0]
 8001ce0:	f8db 3000 	ldr.w	r3, [fp]
 8001ce4:	4353      	muls	r3, r2
 8001ce6:	0b1b      	lsrs	r3, r3, #12
 8001ce8:	f8a9 300a 	strh.w	r3, [r9, #10]
 8001cec:	e7cd      	b.n	8001c8a <BSP_TS_GetState+0xda>
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8001cee:	2301      	movs	r3, #1
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8001cf0:	7133      	strb	r3, [r6, #4]
    for(index=0; index < TS_State->touchDetected; index++)
 8001cf2:	3401      	adds	r4, #1
 8001cf4:	f109 0902 	add.w	r9, r9, #2
 8001cf8:	f10a 0a04 	add.w	sl, sl, #4
 8001cfc:	f10b 0b04 	add.w	fp, fp, #4
 8001d00:	f108 0802 	add.w	r8, r8, #2
 8001d04:	3702      	adds	r7, #2
 8001d06:	e773      	b.n	8001bf0 <BSP_TS_GetState+0x40>
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e7f1      	b.n	8001cf0 <BSP_TS_GetState+0x140>
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e7ef      	b.n	8001cf0 <BSP_TS_GetState+0x140>
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8001d10:	2300      	movs	r3, #0
 8001d12:	e7ed      	b.n	8001cf0 <BSP_TS_GetState+0x140>
 8001d14:	20000cc0 	.word	0x20000cc0
 8001d18:	20000c94 	.word	0x20000c94
 8001d1c:	20000cc4 	.word	0x20000cc4
 8001d20:	20000cc6 	.word	0x20000cc6
 8001d24:	20000cc8 	.word	0x20000cc8
 8001d28:	20000c98 	.word	0x20000c98
 8001d2c:	20000cac 	.word	0x20000cac

08001d30 <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8001d30:	4770      	bx	lr

08001d32 <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 8001d32:	2000      	movs	r0, #0
 8001d34:	4770      	bx	lr
	...

08001d38 <ft5336_ReadID>:
{
 8001d38:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 8001d3a:	2300      	movs	r3, #0
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 8001d3c:	4c0f      	ldr	r4, [pc, #60]	; (8001d7c <ft5336_ReadID+0x44>)
{
 8001d3e:	4605      	mov	r5, r0
  volatile uint8_t ucReadId = 0;
 8001d40:	f88d 3007 	strb.w	r3, [sp, #7]
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8001d44:	7823      	ldrb	r3, [r4, #0]
 8001d46:	b91b      	cbnz	r3, 8001d50 <ft5336_ReadID+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8001d48:	f7ff f984 	bl	8001054 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	7023      	strb	r3, [r4, #0]
{
 8001d50:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8001d52:	b2ed      	uxtb	r5, r5
 8001d54:	3c01      	subs	r4, #1
 8001d56:	21a8      	movs	r1, #168	; 0xa8
 8001d58:	4628      	mov	r0, r5
 8001d5a:	f7ff f98f 	bl	800107c <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8001d5e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8001d62:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 8001d66:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001d6a:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8001d6c:	d103      	bne.n	8001d76 <ft5336_ReadID+0x3e>
  return (ucReadId);
 8001d6e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8001d72:	b003      	add	sp, #12
 8001d74:	bd30      	pop	{r4, r5, pc}
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8001d76:	2b51      	cmp	r3, #81	; 0x51
 8001d78:	d1ec      	bne.n	8001d54 <ft5336_ReadID+0x1c>
 8001d7a:	e7f8      	b.n	8001d6e <ft5336_ReadID+0x36>
 8001d7c:	20000ccc 	.word	0x20000ccc

08001d80 <ft5336_TS_DetectTouch>:
{
 8001d80:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 8001d82:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8001d84:	2102      	movs	r1, #2
 8001d86:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 8001d88:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8001d8c:	f7ff f976 	bl	800107c <TS_IO_Read>
 8001d90:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 8001d94:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001d98:	f003 030f 	and.w	r3, r3, #15
 8001d9c:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8001da0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001da4:	2b05      	cmp	r3, #5
 8001da6:	d901      	bls.n	8001dac <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
 8001da8:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8001dac:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001db0:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
 8001db2:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8001db6:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 8001db8:	2200      	movs	r2, #0
 8001dba:	709a      	strb	r2, [r3, #2]
}
 8001dbc:	b002      	add	sp, #8
 8001dbe:	bd10      	pop	{r4, pc}
 8001dc0:	20000ccc 	.word	0x20000ccc

08001dc4 <ft5336_TS_GetXY>:
{
 8001dc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8001dc8:	4d2f      	ldr	r5, [pc, #188]	; (8001e88 <ft5336_TS_GetXY+0xc4>)
{
 8001dca:	4616      	mov	r6, r2
  volatile uint8_t ucReadData = 0;
 8001dcc:	2300      	movs	r3, #0
{
 8001dce:	460f      	mov	r7, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8001dd0:	78ac      	ldrb	r4, [r5, #2]
 8001dd2:	786a      	ldrb	r2, [r5, #1]
  volatile uint8_t ucReadData = 0;
 8001dd4:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8001dd8:	42a2      	cmp	r2, r4
 8001dda:	d94d      	bls.n	8001e78 <ft5336_TS_GetXY+0xb4>
    switch(ft5336_handle.currActiveTouchIdx)
 8001ddc:	2c09      	cmp	r4, #9
 8001dde:	d84e      	bhi.n	8001e7e <ft5336_TS_GetXY+0xba>
 8001de0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	1d19      	adds	r1, r3, #4
 8001dea:	f103 0b03 	add.w	fp, r3, #3
 8001dee:	f103 0a06 	add.w	sl, r3, #6
 8001df2:	3305      	adds	r3, #5
 8001df4:	b2c9      	uxtb	r1, r1
 8001df6:	fa5f fb8b 	uxtb.w	fp, fp
 8001dfa:	fa5f fa8a 	uxtb.w	sl, sl
 8001dfe:	fa5f f883 	uxtb.w	r8, r3
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8001e02:	b2c4      	uxtb	r4, r0
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001e04:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8001e8c <ft5336_TS_GetXY+0xc8>
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8001e08:	4620      	mov	r0, r4
 8001e0a:	f7ff f937 	bl	800107c <TS_IO_Read>
 8001e0e:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001e12:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001e16:	4659      	mov	r1, fp
 8001e18:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001e1a:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001e1e:	f7ff f92d 	bl	800107c <TS_IO_Read>
 8001e22:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8001e26:	4651      	mov	r1, sl
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001e28:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8001e2c:	4620      	mov	r0, r4
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001e2e:	f8b9 2000 	ldrh.w	r2, [r9]
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001e38:	4313      	orrs	r3, r2
    *X = coord;
 8001e3a:	803b      	strh	r3, [r7, #0]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001e3c:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8001e40:	f7ff f91c 	bl	800107c <TS_IO_Read>
 8001e44:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8001e48:	4641      	mov	r1, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001e4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8001e4e:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001e50:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8001e54:	f7ff f912 	bl	800107c <TS_IO_Read>
 8001e58:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001e5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001e60:	f8b9 2000 	ldrh.w	r2, [r9]
 8001e64:	021b      	lsls	r3, r3, #8
 8001e66:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	f8a9 3000 	strh.w	r3, [r9]
    *Y = coord;
 8001e70:	8033      	strh	r3, [r6, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8001e72:	78ab      	ldrb	r3, [r5, #2]
 8001e74:	3301      	adds	r3, #1
 8001e76:	70ab      	strb	r3, [r5, #2]
}
 8001e78:	b003      	add	sp, #12
 8001e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8001e7e:	4698      	mov	r8, r3
 8001e80:	469a      	mov	sl, r3
 8001e82:	469b      	mov	fp, r3
 8001e84:	4619      	mov	r1, r3
 8001e86:	e7bc      	b.n	8001e02 <ft5336_TS_GetXY+0x3e>
 8001e88:	20000ccc 	.word	0x20000ccc
 8001e8c:	20000cca 	.word	0x20000cca

08001e90 <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001e90:	2201      	movs	r2, #1
 8001e92:	21a4      	movs	r1, #164	; 0xa4
 8001e94:	b2c0      	uxtb	r0, r0
 8001e96:	f7ff b8df 	b.w	8001058 <TS_IO_Write>

08001e9a <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	21a4      	movs	r1, #164	; 0xa4
 8001e9e:	b2c0      	uxtb	r0, r0
 8001ea0:	f7ff b8da 	b.w	8001058 <TS_IO_Write>

08001ea4 <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
 8001ea4:	f7ff bff9 	b.w	8001e9a <ft5336_TS_DisableIT>

08001ea8 <ft5336_TS_ClearIT>:
 8001ea8:	4770      	bx	lr
	...

08001eac <ft5336_Init>:
{
 8001eac:	b510      	push	{r4, lr}
  return(ft5336_handle.i2cInitialized);
 8001eae:	4c05      	ldr	r4, [pc, #20]	; (8001ec4 <ft5336_Init+0x18>)
  TS_IO_Delay(200);
 8001eb0:	20c8      	movs	r0, #200	; 0xc8
 8001eb2:	f7ff f8f9 	bl	80010a8 <TS_IO_Delay>
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8001eb6:	7823      	ldrb	r3, [r4, #0]
 8001eb8:	b91b      	cbnz	r3, 8001ec2 <ft5336_Init+0x16>
    TS_IO_Init();
 8001eba:	f7ff f8cb 	bl	8001054 <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	7023      	strb	r3, [r4, #0]
}
 8001ec2:	bd10      	pop	{r4, pc}
 8001ec4:	20000ccc 	.word	0x20000ccc

08001ec8 <ft5336_TS_GetGestureID>:
  volatile uint8_t ucReadData = 0;
 8001ec8:	2300      	movs	r3, #0
{
 8001eca:	b513      	push	{r0, r1, r4, lr}
 8001ecc:	460c      	mov	r4, r1
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8001ece:	b2c0      	uxtb	r0, r0
 8001ed0:	2101      	movs	r1, #1
  volatile uint8_t ucReadData = 0;
 8001ed2:	f88d 3007 	strb.w	r3, [sp, #7]
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8001ed6:	f7ff f8d1 	bl	800107c <TS_IO_Read>
 8001eda:	f88d 0007 	strb.w	r0, [sp, #7]
  * pGestureId = ucReadData;
 8001ede:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001ee2:	6023      	str	r3, [r4, #0]
}
 8001ee4:	b002      	add	sp, #8
 8001ee6:	bd10      	pop	{r4, pc}

08001ee8 <ft5336_TS_GetTouchInfo>:
{
 8001ee8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001eec:	461d      	mov	r5, r3
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8001eee:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <ft5336_TS_GetTouchInfo+0x7c>)
  volatile uint8_t ucReadData = 0;
 8001ef0:	2400      	movs	r4, #0
{
 8001ef2:	4616      	mov	r6, r2
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8001ef4:	785b      	ldrb	r3, [r3, #1]
  volatile uint8_t ucReadData = 0;
 8001ef6:	f88d 4007 	strb.w	r4, [sp, #7]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8001efa:	428b      	cmp	r3, r1
 8001efc:	d92c      	bls.n	8001f58 <ft5336_TS_GetTouchInfo+0x70>
    switch(touchIdx)
 8001efe:	2909      	cmp	r1, #9
 8001f00:	d82d      	bhi.n	8001f5e <ft5336_TS_GetTouchInfo+0x76>
 8001f02:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001f06:	004c      	lsls	r4, r1, #1
 8001f08:	b2e4      	uxtb	r4, r4
 8001f0a:	1ce1      	adds	r1, r4, #3
 8001f0c:	1de7      	adds	r7, r4, #7
 8001f0e:	3408      	adds	r4, #8
 8001f10:	b2c9      	uxtb	r1, r1
 8001f12:	b2ff      	uxtb	r7, r7
 8001f14:	b2e4      	uxtb	r4, r4
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001f16:	fa5f f880 	uxtb.w	r8, r0
 8001f1a:	4640      	mov	r0, r8
 8001f1c:	f7ff f8ae 	bl	800107c <TS_IO_Read>
 8001f20:	f88d 0007 	strb.w	r0, [sp, #7]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8001f24:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8001f28:	4639      	mov	r1, r7
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8001f2a:	9a08      	ldr	r2, [sp, #32]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8001f2c:	4640      	mov	r0, r8
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8001f2e:	099b      	lsrs	r3, r3, #6
 8001f30:	6013      	str	r3, [r2, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8001f32:	f7ff f8a3 	bl	800107c <TS_IO_Read>
 8001f36:	f88d 0007 	strb.w	r0, [sp, #7]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8001f3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8001f3e:	4621      	mov	r1, r4
 8001f40:	4640      	mov	r0, r8
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8001f42:	6033      	str	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8001f44:	f7ff f89a 	bl	800107c <TS_IO_Read>
 8001f48:	f88d 0007 	strb.w	r0, [sp, #7]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8001f4c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001f50:	0912      	lsrs	r2, r2, #4
 8001f52:	f002 0204 	and.w	r2, r2, #4
 8001f56:	602a      	str	r2, [r5, #0]
}
 8001f58:	b002      	add	sp, #8
 8001f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8001f5e:	4627      	mov	r7, r4
 8001f60:	4621      	mov	r1, r4
 8001f62:	e7d8      	b.n	8001f16 <ft5336_TS_GetTouchInfo+0x2e>
 8001f64:	20000ccc 	.word	0x20000ccc

08001f68 <AI_Digit_set_next_state>:
	}
}

void AI_Digit_set_next_state(void)
{
	process_state++;
 8001f68:	4a04      	ldr	r2, [pc, #16]	; (8001f7c <AI_Digit_set_next_state+0x14>)
 8001f6a:	7813      	ldrb	r3, [r2, #0]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	b2db      	uxtb	r3, r3

	if(CLEAR_SCREEN < process_state)
 8001f70:	2b03      	cmp	r3, #3
	{
		process_state = IDLE;
 8001f72:	bf88      	it	hi
 8001f74:	2300      	movhi	r3, #0
 8001f76:	7013      	strb	r3, [r2, #0]
	}
}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	20000ccf 	.word	0x20000ccf

08001f80 <Virtual_LED_ON>:

void Virtual_LED_ON(uint8_t led_number)
{
 8001f80:	b510      	push	{r4, lr}
 8001f82:	4604      	mov	r4, r0
	uint16_t x, y;

	x = 10;
	y = 10 + led_number * 25;

	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001f84:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001f88:	f7ff f92a 	bl	80011e0 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(x, y, 20, 20);
 8001f8c:	2314      	movs	r3, #20
	y = 10 + led_number * 25;
 8001f8e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
	BSP_LCD_FillRect(x, y, 20, 20);
 8001f92:	200a      	movs	r0, #10
 8001f94:	461a      	mov	r2, r3
	y = 10 + led_number * 25;
 8001f96:	eb04 0484 	add.w	r4, r4, r4, lsl #2
	BSP_LCD_FillRect(x, y, 20, 20);
 8001f9a:	f104 010a 	add.w	r1, r4, #10
}
 8001f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	BSP_LCD_FillRect(x, y, 20, 20);
 8001fa2:	f7ff bac3 	b.w	800152c <BSP_LCD_FillRect>
	...

08001fa8 <Virtual_LED_OFF>:

void Virtual_LED_OFF(uint8_t led_number)
{
 8001fa8:	b510      	push	{r4, lr}
 8001faa:	4604      	mov	r4, r0
	uint16_t x, y;

	x = 10;
	y = 10 + led_number * 25;

	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001fac:	4807      	ldr	r0, [pc, #28]	; (8001fcc <Virtual_LED_OFF+0x24>)
 8001fae:	f7ff f917 	bl	80011e0 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(x, y, 20, 20);
 8001fb2:	2314      	movs	r3, #20
	y = 10 + led_number * 25;
 8001fb4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
	BSP_LCD_FillRect(x, y, 20, 20);
 8001fb8:	200a      	movs	r0, #10
 8001fba:	461a      	mov	r2, r3
	y = 10 + led_number * 25;
 8001fbc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
	BSP_LCD_FillRect(x, y, 20, 20);
 8001fc0:	f104 010a 	add.w	r1, r4, #10
}
 8001fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	BSP_LCD_FillRect(x, y, 20, 20);
 8001fc8:	f7ff bab0 	b.w	800152c <BSP_LCD_FillRect>
 8001fcc:	ffff0000 	.word	0xffff0000

08001fd0 <Virtual_LED_OFF_All>:

void Virtual_LED_OFF_All()
{
 8001fd0:	b510      	push	{r4, lr}
	for (int i = 0; i < 10; ++i)
 8001fd2:	2400      	movs	r4, #0
	{
		Virtual_LED_OFF(i);
 8001fd4:	b2e0      	uxtb	r0, r4
	for (int i = 0; i < 10; ++i)
 8001fd6:	3401      	adds	r4, #1
		Virtual_LED_OFF(i);
 8001fd8:	f7ff ffe6 	bl	8001fa8 <Virtual_LED_OFF>
	for (int i = 0; i < 10; ++i)
 8001fdc:	2c0a      	cmp	r4, #10
 8001fde:	d1f9      	bne.n	8001fd4 <Virtual_LED_OFF_All+0x4>
	}
}
 8001fe0:	bd10      	pop	{r4, pc}
	...

08001fe4 <scale_nearest_neighbour_algorithm>:

void scale_nearest_neighbour_algorithm(uint32_t *original_image, uint8_t *prepared_image)
{
 8001fe4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fe8:	460e      	mov	r6, r1
 8001fea:	4680      	mov	r8, r0
	uint32_t ratio;
	uint32_t x,y;
	uint32_t x_offset;

	ratio = BSP_LCD_GetYSize() / 28.0;
 8001fec:	f7ff f8aa 	bl	8001144 <BSP_LCD_GetYSize>
	x_offset = BSP_LCD_GetXSize() - BSP_LCD_GetYSize();

	for(uint32_t j=0; j<28; j++)
 8001ff0:	2400      	movs	r4, #0
	ratio = BSP_LCD_GetYSize() / 28.0;
 8001ff2:	f7fe fa9f 	bl	8000534 <__aeabi_ui2d>
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <scale_nearest_neighbour_algorithm+0x60>)
 8001ffa:	f04f 0b1c 	mov.w	fp, #28
 8001ffe:	f7fe fc3d 	bl	800087c <__aeabi_ddiv>
 8002002:	f7fe fdab 	bl	8000b5c <__aeabi_d2uiz>
 8002006:	4607      	mov	r7, r0
	x_offset = BSP_LCD_GetXSize() - BSP_LCD_GetYSize();
 8002008:	f7ff f890 	bl	800112c <BSP_LCD_GetXSize>
 800200c:	4605      	mov	r5, r0
 800200e:	f7ff f899 	bl	8001144 <BSP_LCD_GetYSize>
 8002012:	1a2d      	subs	r5, r5, r0
	{
		for(uint32_t i=0; i<28; i++)
 8002014:	fb0b 6a04 	mla	sl, fp, r4, r6
 8002018:	f04f 0900 	mov.w	r9, #0
		{
			x = ratio*i;
			y = ratio*j;

			*(prepared_image + j * 28 + i) = *(original_image + (y*BSP_LCD_GetXSize() + x + x_offset)) & 0xFF;
 800201c:	f7ff f886 	bl	800112c <BSP_LCD_GetXSize>
 8002020:	fb04 9300 	mla	r3, r4, r0, r9
		for(uint32_t i=0; i<28; i++)
 8002024:	f109 0901 	add.w	r9, r9, #1
			*(prepared_image + j * 28 + i) = *(original_image + (y*BSP_LCD_GetXSize() + x + x_offset)) & 0xFF;
 8002028:	fb07 5303 	mla	r3, r7, r3, r5
		for(uint32_t i=0; i<28; i++)
 800202c:	f1b9 0f1c 	cmp.w	r9, #28
			*(prepared_image + j * 28 + i) = *(original_image + (y*BSP_LCD_GetXSize() + x + x_offset)) & 0xFF;
 8002030:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8002034:	f80a 3b01 	strb.w	r3, [sl], #1
		for(uint32_t i=0; i<28; i++)
 8002038:	d1f0      	bne.n	800201c <scale_nearest_neighbour_algorithm+0x38>
	for(uint32_t j=0; j<28; j++)
 800203a:	3401      	adds	r4, #1
 800203c:	2c1c      	cmp	r4, #28
 800203e:	d1e9      	bne.n	8002014 <scale_nearest_neighbour_algorithm+0x30>
		}
	}
}
 8002040:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002044:	403c0000 	.word	0x403c0000

08002048 <LCD_and_TouchScreen_Init>:

void LCD_and_TouchScreen_Init(void)
{
 8002048:	b510      	push	{r4, lr}
	BSP_LCD_Init();
 800204a:	f7ff fb97 	bl	800177c <BSP_LCD_Init>
	if(BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize()) == TS_DEVICE_NOT_FOUND);
 800204e:	f7ff f86d 	bl	800112c <BSP_LCD_GetXSize>
 8002052:	4604      	mov	r4, r0
 8002054:	f7ff f876 	bl	8001144 <BSP_LCD_GetYSize>
 8002058:	b281      	uxth	r1, r0
 800205a:	b2a0      	uxth	r0, r4
 800205c:	f7ff fd2a 	bl	8001ab4 <BSP_TS_Init>
	BSP_TS_ITConfig();
 8002060:	f7ff fd50 	bl	8001b04 <BSP_TS_ITConfig>

	BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8002064:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002068:	2001      	movs	r0, #1
 800206a:	f7ff f877 	bl	800115c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(1);
 800206e:	2001      	movs	r0, #1
 8002070:	f7ff f8b0 	bl	80011d4 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8002074:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800207c:	f7ff b8c8 	b.w	8001210 <BSP_LCD_Clear>

08002080 <LCD_Display_Init_Screen>:

void LCD_Display_Init_Screen(void)
{
 8002080:	b570      	push	{r4, r5, r6, lr}
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8002082:	f04f 30ff 	mov.w	r0, #4294967295
 8002086:	f7ff f8c3 	bl	8001210 <BSP_LCD_Clear>

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800208a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800208e:	f7ff f8a7 	bl	80011e0 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(BSP_LCD_GetXSize() - BSP_LCD_GetYSize(), 0, BSP_LCD_GetYSize(), BSP_LCD_GetYSize());
 8002092:	f7ff f84b 	bl	800112c <BSP_LCD_GetXSize>
 8002096:	4604      	mov	r4, r0
 8002098:	f7ff f854 	bl	8001144 <BSP_LCD_GetYSize>
 800209c:	1a20      	subs	r0, r4, r0
 800209e:	b284      	uxth	r4, r0
 80020a0:	f7ff f850 	bl	8001144 <BSP_LCD_GetYSize>
 80020a4:	4605      	mov	r5, r0
 80020a6:	f7ff f84d 	bl	8001144 <BSP_LCD_GetYSize>
 80020aa:	2100      	movs	r1, #0
 80020ac:	b283      	uxth	r3, r0
 80020ae:	4620      	mov	r0, r4
 80020b0:	b2aa      	uxth	r2, r5
 80020b2:	f7ff fa3b 	bl	800152c <BSP_LCD_FillRect>
	Virtual_LED_OFF_All();
 80020b6:	f7ff ff8b 	bl	8001fd0 <Virtual_LED_OFF_All>

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80020ba:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80020be:	f7ff f88f 	bl	80011e0 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font16);
 80020c2:	4808      	ldr	r0, [pc, #32]	; (80020e4 <LCD_Display_Init_Screen+0x64>)
 80020c4:	f7ff f898 	bl	80011f8 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(50, 20, (uint8_t *)"Digit:", LEFT_MODE);
 80020c8:	2303      	movs	r3, #3
 80020ca:	4a07      	ldr	r2, [pc, #28]	; (80020e8 <LCD_Display_Init_Screen+0x68>)
 80020cc:	2114      	movs	r1, #20
 80020ce:	2032      	movs	r0, #50	; 0x32
 80020d0:	f7ff f958 	bl	8001384 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(50, 50, (uint8_t *)"Accuracy:", LEFT_MODE);
 80020d4:	2132      	movs	r1, #50	; 0x32
 80020d6:	2303      	movs	r3, #3
 80020d8:	4a04      	ldr	r2, [pc, #16]	; (80020ec <LCD_Display_Init_Screen+0x6c>)
 80020da:	4608      	mov	r0, r1
}
 80020dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	BSP_LCD_DisplayStringAt(50, 50, (uint8_t *)"Accuracy:", LEFT_MODE);
 80020e0:	f7ff b950 	b.w	8001384 <BSP_LCD_DisplayStringAt>
 80020e4:	20000038 	.word	0x20000038
 80020e8:	0800bfe4 	.word	0x0800bfe4
 80020ec:	0800bfeb 	.word	0x0800bfeb

080020f0 <AI_Digit_Process>:
{
 80020f0:	b508      	push	{r3, lr}
	if(IDLE == process_state || WAIT == process_state)
 80020f2:	4b09      	ldr	r3, [pc, #36]	; (8002118 <AI_Digit_Process+0x28>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80020fa:	d00c      	beq.n	8002116 <AI_Digit_Process+0x26>
	else if(AI_PROCESS == process_state)
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d105      	bne.n	800210c <AI_Digit_Process+0x1c>
		MX_X_CUBE_AI_Process();
 8002100:	f003 fa2e 	bl	8005560 <MX_X_CUBE_AI_Process>
}
 8002104:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		AI_Digit_set_next_state();
 8002108:	f7ff bf2e 	b.w	8001f68 <AI_Digit_set_next_state>
	else if(CLEAR_SCREEN == process_state)
 800210c:	2b03      	cmp	r3, #3
 800210e:	d102      	bne.n	8002116 <AI_Digit_Process+0x26>
		LCD_Display_Init_Screen();
 8002110:	f7ff ffb6 	bl	8002080 <LCD_Display_Init_Screen>
 8002114:	e7f6      	b.n	8002104 <AI_Digit_Process+0x14>
}
 8002116:	bd08      	pop	{r3, pc}
 8002118:	20000ccf 	.word	0x20000ccf

0800211c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800211c:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800211e:	4808      	ldr	r0, [pc, #32]	; (8002140 <MX_CRC_Init+0x24>)
 8002120:	4b08      	ldr	r3, [pc, #32]	; (8002144 <MX_CRC_Init+0x28>)
 8002122:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8002124:	2300      	movs	r3, #0
 8002126:	8083      	strh	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002128:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800212c:	2301      	movs	r3, #1
 800212e:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002130:	f000 fdf4 	bl	8002d1c <HAL_CRC_Init>
 8002134:	b118      	cbz	r0, 800213e <MX_CRC_Init+0x22>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002136:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800213a:	f000 bc49 	b.w	80029d0 <Error_Handler>
}
 800213e:	bd08      	pop	{r3, pc}
 8002140:	20008380 	.word	0x20008380
 8002144:	40023000 	.word	0x40023000

08002148 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8002148:	6802      	ldr	r2, [r0, #0]
{
 800214a:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 800214c:	4b08      	ldr	r3, [pc, #32]	; (8002170 <HAL_CRC_MspInit+0x28>)
 800214e:	429a      	cmp	r2, r3
 8002150:	d10b      	bne.n	800216a <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002152:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8002156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800215a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800215e:	631a      	str	r2, [r3, #48]	; 0x30
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002166:	9301      	str	r3, [sp, #4]
 8002168:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800216a:	b002      	add	sp, #8
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40023000 	.word	0x40023000

08002174 <HAL_DMA2D_MspInit>:
}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{

  if(dma2dHandle->Instance==DMA2D)
 8002174:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <HAL_DMA2D_MspInit+0x3c>)
{
 8002176:	b507      	push	{r0, r1, r2, lr}
  if(dma2dHandle->Instance==DMA2D)
 8002178:	6802      	ldr	r2, [r0, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d115      	bne.n	80021aa <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800217e:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8002182:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002186:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800218a:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800218c:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8002190:	4611      	mov	r1, r2
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002192:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002196:	9301      	str	r3, [sp, #4]
 8002198:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800219a:	f000 fd1f 	bl	8002bdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800219e:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80021a0:	b003      	add	sp, #12
 80021a2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80021a6:	f000 bd4b 	b.w	8002c40 <HAL_NVIC_EnableIRQ>
}
 80021aa:	b003      	add	sp, #12
 80021ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80021b0:	4002b000 	.word	0x4002b000

080021b4 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 80021b4:	4b2b      	ldr	r3, [pc, #172]	; (8002264 <HAL_SDRAM_MspInit+0xb0>)
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80021b6:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FMC_Initialized) {
 80021b8:	681c      	ldr	r4, [r3, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80021ba:	b087      	sub	sp, #28
  if (FMC_Initialized) {
 80021bc:	2c00      	cmp	r4, #0
 80021be:	d14e      	bne.n	800225e <HAL_SDRAM_MspInit+0xaa>
  FMC_Initialized = 1;
 80021c0:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c2:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021c4:	2603      	movs	r6, #3
 80021c6:	250c      	movs	r5, #12
  FMC_Initialized = 1;
 80021c8:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021ca:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 80021cc:	4b26      	ldr	r3, [pc, #152]	; (8002268 <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021ce:	4827      	ldr	r0, [pc, #156]	; (800226c <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80021d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	639a      	str	r2, [r3, #56]	; 0x38
 80021d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	9403      	str	r4, [sp, #12]
  __HAL_RCC_FMC_CLK_ENABLE();
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e4:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021e8:	e9cd 6504 	strd	r6, r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021f0:	f001 f88e 	bl	8003310 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80021f4:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021f8:	a901      	add	r1, sp, #4
 80021fa:	481d      	ldr	r0, [pc, #116]	; (8002270 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021fc:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fe:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002202:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002206:	f001 f883 	bl	8003310 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800220a:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800220e:	a901      	add	r1, sp, #4
 8002210:	4818      	ldr	r0, [pc, #96]	; (8002274 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002212:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002214:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002218:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800221c:	f001 f878 	bl	8003310 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002220:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002224:	a901      	add	r1, sp, #4
 8002226:	4814      	ldr	r0, [pc, #80]	; (8002278 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002228:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222e:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002232:	f001 f86d 	bl	8003310 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002236:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002238:	a901      	add	r1, sp, #4
 800223a:	4810      	ldr	r0, [pc, #64]	; (800227c <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800223c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002242:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002246:	f001 f863 	bl	8003310 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800224a:	2308      	movs	r3, #8
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800224c:	a901      	add	r1, sp, #4
 800224e:	480c      	ldr	r0, [pc, #48]	; (8002280 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002250:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002252:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002256:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800225a:	f001 f859 	bl	8003310 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800225e:	b007      	add	sp, #28
 8002260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002262:	bf00      	nop
 8002264:	20000cd0 	.word	0x20000cd0
 8002268:	40023800 	.word	0x40023800
 800226c:	40021000 	.word	0x40021000
 8002270:	40021800 	.word	0x40021800
 8002274:	40020c00 	.word	0x40020c00
 8002278:	40021400 	.word	0x40021400
 800227c:	40021c00 	.word	0x40021c00
 8002280:	40020800 	.word	0x40020800

08002284 <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 8002284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002288:	b091      	sub	sp, #68	; 0x44

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228a:	2214      	movs	r2, #20
 800228c:	2100      	movs	r1, #0
  __HAL_RCC_GPIOK_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800228e:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 8002550 <MX_GPIO_Init+0x2cc>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002292:	a80b      	add	r0, sp, #44	; 0x2c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8002294:	4ea6      	ldr	r6, [pc, #664]	; (8002530 <MX_GPIO_Init+0x2ac>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002296:	f008 fba9 	bl	800a9ec <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800229a:	4ba6      	ldr	r3, [pc, #664]	; (8002534 <MX_GPIO_Init+0x2b0>)
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800229c:	4648      	mov	r0, r9
 800229e:	2120      	movs	r1, #32
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a2:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80022a4:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 8002554 <MX_GPIO_Init+0x2d0>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a8:	2702      	movs	r7, #2
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022aa:	f042 0210 	orr.w	r2, r2, #16
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80022ae:	f8df a2a8 	ldr.w	sl, [pc, #680]	; 8002558 <MX_GPIO_Init+0x2d4>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80022b2:	f04f 0b0a 	mov.w	fp, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b6:	2501      	movs	r5, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022b8:	631a      	str	r2, [r3, #48]	; 0x30
 80022ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022bc:	f002 0210 	and.w	r2, r2, #16
 80022c0:	9200      	str	r2, [sp, #0]
 80022c2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022ca:	631a      	str	r2, [r3, #48]	; 0x30
 80022cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ce:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80022d2:	9201      	str	r2, [sp, #4]
 80022d4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022d8:	f042 0202 	orr.w	r2, r2, #2
 80022dc:	631a      	str	r2, [r3, #48]	; 0x30
 80022de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022e0:	f002 0202 	and.w	r2, r2, #2
 80022e4:	9202      	str	r2, [sp, #8]
 80022e6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ea:	f042 0208 	orr.w	r2, r2, #8
 80022ee:	631a      	str	r2, [r3, #48]	; 0x30
 80022f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022f2:	f002 0208 	and.w	r2, r2, #8
 80022f6:	9203      	str	r2, [sp, #12]
 80022f8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022fc:	f042 0204 	orr.w	r2, r2, #4
 8002300:	631a      	str	r2, [r3, #48]	; 0x30
 8002302:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002304:	f002 0204 	and.w	r2, r2, #4
 8002308:	9204      	str	r2, [sp, #16]
 800230a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800230c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800230e:	f042 0201 	orr.w	r2, r2, #1
 8002312:	631a      	str	r2, [r3, #48]	; 0x30
 8002314:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002316:	f002 0201 	and.w	r2, r2, #1
 800231a:	9205      	str	r2, [sp, #20]
 800231c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800231e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002324:	631a      	str	r2, [r3, #48]	; 0x30
 8002326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002328:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800232c:	9206      	str	r2, [sp, #24]
 800232e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002332:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002336:	631a      	str	r2, [r3, #48]	; 0x30
 8002338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800233a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800233e:	9207      	str	r2, [sp, #28]
 8002340:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002344:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002348:	631a      	str	r2, [r3, #48]	; 0x30
 800234a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800234c:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8002350:	9208      	str	r2, [sp, #32]
 8002352:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002356:	f042 0220 	orr.w	r2, r2, #32
 800235a:	631a      	str	r2, [r3, #48]	; 0x30
 800235c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800235e:	f002 0220 	and.w	r2, r2, #32
 8002362:	9209      	str	r2, [sp, #36]	; 0x24
 8002364:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002366:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002368:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800236c:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800236e:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002376:	930a      	str	r3, [sp, #40]	; 0x28
 8002378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800237a:	f001 f94f 	bl	800361c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800237e:	4630      	mov	r0, r6
 8002380:	2200      	movs	r2, #0
 8002382:	210c      	movs	r1, #12
 8002384:	f001 f94a 	bl	800361c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002388:	4b6b      	ldr	r3, [pc, #428]	; (8002538 <MX_GPIO_Init+0x2b4>)
 800238a:	2201      	movs	r2, #1
 800238c:	2108      	movs	r1, #8
 800238e:	4618      	mov	r0, r3
 8002390:	f001 f944 	bl	800361c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002394:	4630      	mov	r0, r6
 8002396:	2201      	movs	r2, #1
 8002398:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800239c:	f001 f93e 	bl	800361c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80023a0:	4640      	mov	r0, r8
 80023a2:	2200      	movs	r2, #0
 80023a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023a8:	f001 f938 	bl	800361c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80023ac:	2200      	movs	r2, #0
 80023ae:	4650      	mov	r0, sl
 80023b0:	21c8      	movs	r1, #200	; 0xc8
 80023b2:	f001 f933 	bl	800361c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023b6:	2308      	movs	r3, #8
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80023b8:	a90b      	add	r1, sp, #44	; 0x2c
 80023ba:	4860      	ldr	r0, [pc, #384]	; (800253c <MX_GPIO_Init+0x2b8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023be:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80023c2:	f000 ffa5 	bl	8003310 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80023c6:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	f643 4223 	movw	r2, #15395	; 0x3c23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023cc:	a90b      	add	r1, sp, #44	; 0x2c
 80023ce:	485c      	ldr	r0, [pc, #368]	; (8002540 <MX_GPIO_Init+0x2bc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80023d2:	e9cd 3b0e 	strd	r3, fp, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d6:	e9cd 270b 	strd	r2, r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023da:	f000 ff99 	bl	8003310 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80023de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80023e2:	a90b      	add	r1, sp, #44	; 0x2c
 80023e4:	4857      	ldr	r0, [pc, #348]	; (8002544 <MX_GPIO_Init+0x2c0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023e8:	e9cd 240b 	strd	r2, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80023ec:	f000 ff90 	bl	8003310 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80023f0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80023f4:	2240      	movs	r2, #64	; 0x40
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80023f6:	a90b      	add	r1, sp, #44	; 0x2c
 80023f8:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80023fc:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002400:	f000 ff86 	bl	8003310 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002404:	2220      	movs	r2, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002406:	a90b      	add	r1, sp, #44	; 0x2c
 8002408:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800240a:	e9cd 250b 	strd	r2, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240e:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002412:	f000 ff7d 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8002416:	f241 020c 	movw	r2, #4108	; 0x100c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800241a:	a90b      	add	r1, sp, #44	; 0x2c
 800241c:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800241e:	e9cd 250b 	strd	r2, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002422:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002426:	f000 ff73 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800242a:	4a47      	ldr	r2, [pc, #284]	; (8002548 <MX_GPIO_Init+0x2c4>)
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800242c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002430:	a90b      	add	r1, sp, #44	; 0x2c
 8002432:	4610      	mov	r0, r2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002436:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800243a:	f000 ff69 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800243e:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002440:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002442:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002446:	4b3c      	ldr	r3, [pc, #240]	; (8002538 <MX_GPIO_Init+0x2b4>)
 8002448:	4618      	mov	r0, r3
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244a:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800244e:	f000 ff5f 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002452:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002454:	a90b      	add	r1, sp, #44	; 0x2c
 8002456:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800245a:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800245e:	f000 ff57 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002462:	f248 0104 	movw	r1, #32772	; 0x8004
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002466:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800246a:	e9cd 140b 	strd	r1, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800246e:	a90b      	add	r1, sp, #44	; 0x2c
 8002470:	f000 ff4e 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002474:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002478:	a90b      	add	r1, sp, #44	; 0x2c
 800247a:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800247c:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002480:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002484:	f000 ff44 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002488:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800248c:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002490:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002492:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002494:	e9cd 310b 	strd	r3, r1, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002498:	a90b      	add	r1, sp, #44	; 0x2c
 800249a:	f000 ff39 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800249e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024a2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80024a6:	a90b      	add	r1, sp, #44	; 0x2c
 80024a8:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80024ac:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80024b0:	f000 ff2e 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80024b4:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80024b6:	a90b      	add	r1, sp, #44	; 0x2c
 80024b8:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ba:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024bc:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c0:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80024c2:	e9cd 3b0e 	strd	r3, fp, [sp, #56]	; 0x38
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80024c6:	f000 ff23 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80024ca:	23c8      	movs	r3, #200	; 0xc8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024cc:	a90b      	add	r1, sp, #44	; 0x2c
 80024ce:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d0:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d4:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024d8:	f000 ff1a 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80024dc:	2305      	movs	r3, #5
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024de:	4a1a      	ldr	r2, [pc, #104]	; (8002548 <MX_GPIO_Init+0x2c4>)
 80024e0:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80024e4:	2528      	movs	r5, #40	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024e6:	4610      	mov	r0, r2
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e8:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ec:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80024ee:	e9cd 3b0e 	strd	r3, fp, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024f2:	f000 ff0d 	bl	8003310 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80024f6:	2304      	movs	r3, #4
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80024f8:	a90b      	add	r1, sp, #44	; 0x2c
 80024fa:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024fe:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002502:	f000 ff05 	bl	8003310 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002506:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002508:	a90b      	add	r1, sp, #44	; 0x2c
 800250a:	4810      	ldr	r0, [pc, #64]	; (800254c <MX_GPIO_Init+0x2c8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800250e:	e9cd 3b0e 	strd	r3, fp, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002512:	e9cd 570b 	strd	r5, r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002516:	f000 fefb 	bl	8003310 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800251a:	4622      	mov	r2, r4
 800251c:	4621      	mov	r1, r4
 800251e:	4628      	mov	r0, r5
 8002520:	f000 fb5c 	bl	8002bdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002524:	4628      	mov	r0, r5
 8002526:	f000 fb8b 	bl	8002c40 <HAL_NVIC_EnableIRQ>

}
 800252a:	b011      	add	sp, #68	; 0x44
 800252c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002530:	40022000 	.word	0x40022000
 8002534:	40023800 	.word	0x40023800
 8002538:	40022800 	.word	0x40022800
 800253c:	40021000 	.word	0x40021000
 8002540:	40020400 	.word	0x40020400
 8002544:	40022400 	.word	0x40022400
 8002548:	40020800 	.word	0x40020800
 800254c:	40020000 	.word	0x40020000
 8002550:	40020c00 	.word	0x40020c00
 8002554:	40021c00 	.word	0x40021c00
 8002558:	40021800 	.word	0x40021800

0800255c <HAL_I2C_MspInit>:
}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	2214      	movs	r2, #20
 800255e:	2100      	movs	r1, #0
{
 8002560:	b510      	push	{r4, lr}
 8002562:	b08a      	sub	sp, #40	; 0x28
 8002564:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002566:	eb0d 0002 	add.w	r0, sp, r2
 800256a:	f008 fa3f 	bl	800a9ec <memset>
  if(i2cHandle->Instance==I2C1)
 800256e:	6823      	ldr	r3, [r4, #0]
 8002570:	4a26      	ldr	r2, [pc, #152]	; (800260c <HAL_I2C_MspInit+0xb0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d124      	bne.n	80025c0 <HAL_I2C_MspInit+0x64>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002576:	4c26      	ldr	r4, [pc, #152]	; (8002610 <HAL_I2C_MspInit+0xb4>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002578:	f44f 7040 	mov.w	r0, #768	; 0x300
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257c:	f04f 0c01 	mov.w	ip, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002580:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002582:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002584:	f043 0302 	orr.w	r3, r3, #2
 8002588:	6323      	str	r3, [r4, #48]	; 0x30
 800258a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	9301      	str	r3, [sp, #4]
 8002592:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002594:	2312      	movs	r3, #18
 8002596:	e9cd 0305 	strd	r0, r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259a:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800259c:	481d      	ldr	r0, [pc, #116]	; (8002614 <HAL_I2C_MspInit+0xb8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259e:	e9cd c307 	strd	ip, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025a2:	2304      	movs	r3, #4
 80025a4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a6:	f000 feb3 	bl	8003310 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025b0:	6423      	str	r3, [r4, #64]	; 0x40
 80025b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b8:	9302      	str	r3, [sp, #8]
 80025ba:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80025bc:	b00a      	add	sp, #40	; 0x28
 80025be:	bd10      	pop	{r4, pc}
  else if(i2cHandle->Instance==I2C3)
 80025c0:	4a15      	ldr	r2, [pc, #84]	; (8002618 <HAL_I2C_MspInit+0xbc>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d1fa      	bne.n	80025bc <HAL_I2C_MspInit+0x60>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80025c6:	4c12      	ldr	r4, [pc, #72]	; (8002610 <HAL_I2C_MspInit+0xb4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025c8:	f44f 72c0 	mov.w	r2, #384	; 0x180
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025cc:	2101      	movs	r1, #1
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80025ce:	4813      	ldr	r0, [pc, #76]	; (800261c <HAL_I2C_MspInit+0xc0>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80025d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80025d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d6:	6323      	str	r3, [r4, #48]	; 0x30
 80025d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80025da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025de:	9303      	str	r3, [sp, #12]
 80025e0:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025e2:	2312      	movs	r3, #18
 80025e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e9cd 1307 	strd	r1, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025ee:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80025f0:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025f2:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80025f4:	f000 fe8c 	bl	8003310 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80025f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025fe:	6423      	str	r3, [r4, #64]	; 0x40
 8002600:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002602:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002606:	9304      	str	r3, [sp, #16]
 8002608:	9b04      	ldr	r3, [sp, #16]
}
 800260a:	e7d7      	b.n	80025bc <HAL_I2C_MspInit+0x60>
 800260c:	40005400 	.word	0x40005400
 8002610:	40023800 	.word	0x40023800
 8002614:	40020400 	.word	0x40020400
 8002618:	40005c00 	.word	0x40005c00
 800261c:	40021c00 	.word	0x40021c00

08002620 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{

  if(i2cHandle->Instance==I2C1)
 8002620:	4a14      	ldr	r2, [pc, #80]	; (8002674 <HAL_I2C_MspDeInit+0x54>)
{
 8002622:	b508      	push	{r3, lr}
  if(i2cHandle->Instance==I2C1)
 8002624:	6803      	ldr	r3, [r0, #0]
 8002626:	4293      	cmp	r3, r2
 8002628:	d111      	bne.n	800264e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800262a:	f502 32f2 	add.w	r2, r2, #123904	; 0x1e400

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 800262e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002632:	4811      	ldr	r0, [pc, #68]	; (8002678 <HAL_I2C_MspDeInit+0x58>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002634:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002636:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800263a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 800263c:	f000 ff4c 	bl	80034d8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8002640:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002644:	480c      	ldr	r0, [pc, #48]	; (8002678 <HAL_I2C_MspDeInit+0x58>)

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8002646:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 800264a:	f000 bf45 	b.w	80034d8 <HAL_GPIO_DeInit>
  else if(i2cHandle->Instance==I2C3)
 800264e:	4a0b      	ldr	r2, [pc, #44]	; (800267c <HAL_I2C_MspDeInit+0x5c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d10d      	bne.n	8002670 <HAL_I2C_MspDeInit+0x50>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002654:	f502 32ee 	add.w	r2, r2, #121856	; 0x1dc00
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8002658:	2180      	movs	r1, #128	; 0x80
 800265a:	4809      	ldr	r0, [pc, #36]	; (8002680 <HAL_I2C_MspDeInit+0x60>)
    __HAL_RCC_I2C3_CLK_DISABLE();
 800265c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800265e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002662:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8002664:	f000 ff38 	bl	80034d8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8002668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800266c:	4804      	ldr	r0, [pc, #16]	; (8002680 <HAL_I2C_MspDeInit+0x60>)
 800266e:	e7ea      	b.n	8002646 <HAL_I2C_MspDeInit+0x26>
}
 8002670:	bd08      	pop	{r3, pc}
 8002672:	bf00      	nop
 8002674:	40005400 	.word	0x40005400
 8002678:	40020400 	.word	0x40020400
 800267c:	40005c00 	.word	0x40005c00
 8002680:	40021c00 	.word	0x40021c00

08002684 <HAL_LTDC_MspInit>:
  /* USER CODE END LTDC_Init 2 */

}

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8002684:	b570      	push	{r4, r5, r6, lr}
 8002686:	b08c      	sub	sp, #48	; 0x30
 8002688:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268a:	2214      	movs	r2, #20
 800268c:	2100      	movs	r1, #0
 800268e:	a807      	add	r0, sp, #28
 8002690:	f008 f9ac 	bl	800a9ec <memset>
  if(ltdcHandle->Instance==LTDC)
 8002694:	6822      	ldr	r2, [r4, #0]
 8002696:	4b3f      	ldr	r3, [pc, #252]	; (8002794 <HAL_LTDC_MspInit+0x110>)
 8002698:	429a      	cmp	r2, r3
 800269a:	d178      	bne.n	800278e <HAL_LTDC_MspInit+0x10a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800269c:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a2:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026a4:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 80026a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80026a8:	a907      	add	r1, sp, #28
 80026aa:	483b      	ldr	r0, [pc, #236]	; (8002798 <HAL_LTDC_MspInit+0x114>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 80026ac:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80026b0:	645a      	str	r2, [r3, #68]	; 0x44
 80026b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026b4:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026be:	f042 0210 	orr.w	r2, r2, #16
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
 80026c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026c6:	f002 0210 	and.w	r2, r2, #16
 80026ca:	9202      	str	r2, [sp, #8]
 80026cc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80026ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d4:	631a      	str	r2, [r3, #48]	; 0x30
 80026d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026d8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80026dc:	9203      	str	r2, [sp, #12]
 80026de:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80026e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026e6:	631a      	str	r2, [r3, #48]	; 0x30
 80026e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ea:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80026ee:	9204      	str	r2, [sp, #16]
 80026f0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80026f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026f8:	631a      	str	r2, [r3, #48]	; 0x30
 80026fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026fc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002700:	9205      	str	r2, [sp, #20]
 8002702:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002706:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800270a:	631a      	str	r2, [r3, #48]	; 0x30
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002712:	9306      	str	r3, [sp, #24]
 8002714:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002716:	2310      	movs	r3, #16
 8002718:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002720:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002722:	f000 fdf5 	bl	8003310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002726:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800272a:	a907      	add	r1, sp, #28
 800272c:	481b      	ldr	r0, [pc, #108]	; (800279c <HAL_LTDC_MspInit+0x118>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800272e:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002730:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002734:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002738:	f000 fdea 	bl	8003310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800273c:	23f7      	movs	r3, #247	; 0xf7
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800273e:	a907      	add	r1, sp, #28
 8002740:	4817      	ldr	r0, [pc, #92]	; (80027a0 <HAL_LTDC_MspInit+0x11c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002742:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002744:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002748:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800274c:	f000 fde0 	bl	8003310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002754:	a907      	add	r1, sp, #28
 8002756:	4813      	ldr	r0, [pc, #76]	; (80027a4 <HAL_LTDC_MspInit+0x120>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002758:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800275c:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002762:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002764:	f000 fdd4 	bl	8003310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002768:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800276c:	a907      	add	r1, sp, #28
 800276e:	480e      	ldr	r0, [pc, #56]	; (80027a8 <HAL_LTDC_MspInit+0x124>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002770:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002772:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002776:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800277a:	f000 fdc9 	bl	8003310 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800277e:	2058      	movs	r0, #88	; 0x58
 8002780:	4622      	mov	r2, r4
 8002782:	4621      	mov	r1, r4
 8002784:	f000 fa2a 	bl	8002bdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002788:	2058      	movs	r0, #88	; 0x58
 800278a:	f000 fa59 	bl	8002c40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800278e:	b00c      	add	sp, #48	; 0x30
 8002790:	bd70      	pop	{r4, r5, r6, pc}
 8002792:	bf00      	nop
 8002794:	40016800 	.word	0x40016800
 8002798:	40021000 	.word	0x40021000
 800279c:	40022400 	.word	0x40022400
 80027a0:	40022800 	.word	0x40022800
 80027a4:	40021800 	.word	0x40021800
 80027a8:	40022000 	.word	0x40022000

080027ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027ac:	b530      	push	{r4, r5, lr}
 80027ae:	b0b5      	sub	sp, #212	; 0xd4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027b0:	2230      	movs	r2, #48	; 0x30
 80027b2:	2100      	movs	r1, #0
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027b4:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027b6:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027b8:	2501      	movs	r5, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027ba:	f008 f917 	bl	800a9ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027be:	2214      	movs	r2, #20
 80027c0:	2100      	movs	r1, #0
 80027c2:	a802      	add	r0, sp, #8
 80027c4:	f008 f912 	bl	800a9ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027c8:	2284      	movs	r2, #132	; 0x84
 80027ca:	2100      	movs	r1, #0
 80027cc:	a813      	add	r0, sp, #76	; 0x4c
 80027ce:	f008 f90d 	bl	800a9ec <memset>
  HAL_PWR_EnableBkUpAccess();
 80027d2:	f001 ff3d 	bl	8004650 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 80027d6:	4b34      	ldr	r3, [pc, #208]	; (80028a8 <SystemClock_Config+0xfc>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
 80027d8:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLN = 432;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027dc:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 80027de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027e4:	641a      	str	r2, [r3, #64]	; 0x40
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027f0:	4b2e      	ldr	r3, [pc, #184]	; (80028ac <SystemClock_Config+0x100>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80027f8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002804:	9301      	str	r3, [sp, #4]
 8002806:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002808:	2309      	movs	r3, #9
 800280a:	e9cd 3207 	strd	r3, r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 800280e:	2219      	movs	r2, #25
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002810:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002812:	e9cd e20e 	strd	lr, r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002816:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800281a:	e9cd 540c 	strd	r5, r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = 2;
 800281e:	e9cd 2410 	strd	r2, r4, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002822:	f001 ff55 	bl	80046d0 <HAL_RCC_OscConfig>
 8002826:	b108      	cbz	r0, 800282c <SystemClock_Config+0x80>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002828:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800282a:	e7fe      	b.n	800282a <SystemClock_Config+0x7e>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800282c:	f001 ff18 	bl	8004660 <HAL_PWREx_EnableOverDrive>
 8002830:	b108      	cbz	r0, 8002836 <SystemClock_Config+0x8a>
 8002832:	b672      	cpsid	i
  while (1)
 8002834:	e7fe      	b.n	8002834 <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002836:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002838:	f44f 5ca0 	mov.w	ip, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800283c:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800283e:	2107      	movs	r1, #7
 8002840:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002842:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800284a:	e9cd c305 	strd	ip, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800284e:	f002 f92b 	bl	8004aa8 <HAL_RCC_ClockConfig>
 8002852:	b108      	cbz	r0, 8002858 <SystemClock_Config+0xac>
 8002854:	b672      	cpsid	i
  while (1)
 8002856:	e7fe      	b.n	8002856 <SystemClock_Config+0xaa>
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8002858:	2364      	movs	r3, #100	; 0x64
 800285a:	4a15      	ldr	r2, [pc, #84]	; (80028b0 <SystemClock_Config+0x104>)
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800285c:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800285e:	9029      	str	r0, [sp, #164]	; 0xa4
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002860:	902c      	str	r0, [sp, #176]	; 0xb0
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002862:	902e      	str	r0, [sp, #184]	; 0xb8
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002864:	951d      	str	r5, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8002866:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800286a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800286e:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8002870:	2305      	movs	r3, #5
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002872:	e9cd 4319 	strd	r4, r3, [sp, #100]	; 0x64
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8002876:	2303      	movs	r3, #3
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8002878:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800287c:	e9cd 351b 	strd	r3, r5, [sp, #108]	; 0x6c
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002880:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 8002884:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002888:	e9cd 431e 	strd	r4, r3, [sp, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800288c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002890:	e9cd 0023 	strd	r0, r0, [sp, #140]	; 0x8c
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8002894:	e9cd 3032 	strd	r3, r0, [sp, #200]	; 0xc8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002898:	a813      	add	r0, sp, #76	; 0x4c
 800289a:	f002 f9a5 	bl	8004be8 <HAL_RCCEx_PeriphCLKConfig>
 800289e:	b108      	cbz	r0, 80028a4 <SystemClock_Config+0xf8>
 80028a0:	b672      	cpsid	i
  while (1)
 80028a2:	e7fe      	b.n	80028a2 <SystemClock_Config+0xf6>
}
 80028a4:	b035      	add	sp, #212	; 0xd4
 80028a6:	bd30      	pop	{r4, r5, pc}
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40007000 	.word	0x40007000
 80028b0:	01b14868 	.word	0x01b14868

080028b4 <main>:
{
 80028b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80028b6:	2100      	movs	r1, #0
 80028b8:	2210      	movs	r2, #16
 80028ba:	4668      	mov	r0, sp
 80028bc:	f008 f896 	bl	800a9ec <memset>
  HAL_MPU_Disable();
 80028c0:	f000 f9e2 	bl	8002c88 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80028c4:	2301      	movs	r3, #1
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 80028c6:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80028ca:	4668      	mov	r0, sp
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80028cc:	f8ad 3000 	strh.w	r3, [sp]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 80028d0:	4b29      	ldr	r3, [pc, #164]	; (8002978 <main+0xc4>)
 80028d2:	e9cd 2301 	strd	r2, r3, [sp, #4]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80028d6:	4b29      	ldr	r3, [pc, #164]	; (800297c <main+0xc8>)
 80028d8:	9303      	str	r3, [sp, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80028da:	f000 f9f7 	bl	8002ccc <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80028de:	2004      	movs	r0, #4
 80028e0:	f000 f9e2 	bl	8002ca8 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80028e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80028e8:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80028ec:	4b24      	ldr	r3, [pc, #144]	; (8002980 <main+0xcc>)
 80028ee:	2100      	movs	r1, #0
 80028f0:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80028f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80028f8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80028fc:	695a      	ldr	r2, [r3, #20]
 80028fe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002902:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002904:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002908:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800290c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002910:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002914:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002918:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800291c:	f3c2 00c9 	ubfx	r0, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002920:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8002924:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002926:	ea02 0604 	and.w	r6, r2, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800292a:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800292c:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002930:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002932:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8002936:	d2f9      	bcs.n	800292c <main+0x78>
    } while(sets-- != 0U);
 8002938:	3a20      	subs	r2, #32
 800293a:	f112 0f20 	cmn.w	r2, #32
 800293e:	d1f2      	bne.n	8002926 <main+0x72>
 8002940:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800294a:	615a      	str	r2, [r3, #20]
 800294c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002950:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8002954:	f000 f8f6 	bl	8002b44 <HAL_Init>
  SystemClock_Config();
 8002958:	f7ff ff28 	bl	80027ac <SystemClock_Config>
  MX_GPIO_Init();
 800295c:	f7ff fc92 	bl	8002284 <MX_GPIO_Init>
  MX_CRC_Init();
 8002960:	f7ff fbdc 	bl	800211c <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 8002964:	f002 fd98 	bl	8005498 <MX_X_CUBE_AI_Init>
  LCD_and_TouchScreen_Init();
 8002968:	f7ff fb6e 	bl	8002048 <LCD_and_TouchScreen_Init>
  LCD_Display_Init_Screen();
 800296c:	f7ff fb88 	bl	8002080 <LCD_Display_Init_Screen>
	  AI_Digit_Process();
 8002970:	f7ff fbbe 	bl	80020f0 <AI_Digit_Process>
  while (1)
 8002974:	e7fc      	b.n	8002970 <main+0xbc>
 8002976:	bf00      	nop
 8002978:	03000017 	.word	0x03000017
 800297c:	01010000 	.word	0x01010000
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <HAL_GPIO_EXTI_Callback>:
	if(GPIO_pin == LCD_INT_Pin)
 8002984:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
{
 8002988:	b510      	push	{r4, lr}
	if(GPIO_pin == LCD_INT_Pin)
 800298a:	d119      	bne.n	80029c0 <HAL_GPIO_EXTI_Callback+0x3c>
		BSP_TS_GetState(Position);
 800298c:	2400      	movs	r4, #0
 800298e:	4620      	mov	r0, r4
 8002990:	f7ff f90e 	bl	8001bb0 <BSP_TS_GetState>
		if(Position->touchY[0] < 12 || Position->touchX[0] < 220 || Position->touchY[0] > 260 || Position->touchX[0] > 468)
 8002994:	89a2      	ldrh	r2, [r4, #12]
 8002996:	2a0b      	cmp	r2, #11
 8002998:	d919      	bls.n	80029ce <HAL_GPIO_EXTI_Callback+0x4a>
 800299a:	8863      	ldrh	r3, [r4, #2]
 800299c:	3bdc      	subs	r3, #220	; 0xdc
 800299e:	b29b      	uxth	r3, r3
 80029a0:	2bf8      	cmp	r3, #248	; 0xf8
 80029a2:	d814      	bhi.n	80029ce <HAL_GPIO_EXTI_Callback+0x4a>
 80029a4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80029a8:	d811      	bhi.n	80029ce <HAL_GPIO_EXTI_Callback+0x4a>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80029aa:	f04f 30ff 	mov.w	r0, #4294967295
 80029ae:	f7fe fc17 	bl	80011e0 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(Position->touchX[0], Position->touchY[0], 12);
 80029b2:	89a1      	ldrh	r1, [r4, #12]
 80029b4:	8860      	ldrh	r0, [r4, #2]
 80029b6:	220c      	movs	r2, #12
}
 80029b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BSP_LCD_FillCircle(Position->touchX[0], Position->touchY[0], 12);
 80029bc:	f7fe bddc 	b.w	8001578 <BSP_LCD_FillCircle>
	else if(GPIO_pin == USER_BUTTON_Pin)
 80029c0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80029c4:	d103      	bne.n	80029ce <HAL_GPIO_EXTI_Callback+0x4a>
}
 80029c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		AI_Digit_set_next_state();
 80029ca:	f7ff bacd 	b.w	8001f68 <AI_Digit_set_next_state>
}
 80029ce:	bd10      	pop	{r4, pc}

080029d0 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 80029d0:	b672      	cpsid	i
  while (1)
 80029d2:	e7fe      	b.n	80029d2 <Error_Handler+0x2>

080029d4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80029d4:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <HAL_MspInit+0x2c>)
{
 80029d6:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80029d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029de:	641a      	str	r2, [r3, #64]	; 0x40
 80029e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029e2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80029e6:	9200      	str	r2, [sp, #0]
 80029e8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029f0:	645a      	str	r2, [r3, #68]	; 0x44
 80029f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f8:	9301      	str	r3, [sp, #4]
 80029fa:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029fc:	b002      	add	sp, #8
 80029fe:	4770      	bx	lr
 8002a00:	40023800 	.word	0x40023800

08002a04 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a04:	e7fe      	b.n	8002a04 <NMI_Handler>

08002a06 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a06:	e7fe      	b.n	8002a06 <HardFault_Handler>

08002a08 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a08:	e7fe      	b.n	8002a08 <MemManage_Handler>

08002a0a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a0a:	e7fe      	b.n	8002a0a <BusFault_Handler>

08002a0c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a0c:	e7fe      	b.n	8002a0c <UsageFault_Handler>

08002a0e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a0e:	4770      	bx	lr

08002a10 <DebugMon_Handler>:
 8002a10:	4770      	bx	lr

08002a12 <PendSV_Handler>:
 8002a12:	4770      	bx	lr

08002a14 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a14:	f000 b8ac 	b.w	8002b70 <HAL_IncTick>

08002a18 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002a18:	f44f 6000 	mov.w	r0, #2048	; 0x800
{
 8002a1c:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002a1e:	f000 fe03 	bl	8003628 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002a22:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002a2a:	f000 bdfd 	b.w	8003628 <HAL_GPIO_EXTI_IRQHandler>
	...

08002a30 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002a30:	4801      	ldr	r0, [pc, #4]	; (8002a38 <OTG_FS_IRQHandler+0x8>)
 8002a32:	f000 be0b 	b.w	800364c <HAL_HCD_IRQHandler>
 8002a36:	bf00      	nop
 8002a38:	2000848c 	.word	0x2000848c

08002a3c <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002a3c:	4801      	ldr	r0, [pc, #4]	; (8002a44 <LTDC_IRQHandler+0x8>)
 8002a3e:	f001 bd7a 	b.w	8004536 <HAL_LTDC_IRQHandler>
 8002a42:	bf00      	nop
 8002a44:	200083e4 	.word	0x200083e4

08002a48 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002a48:	4801      	ldr	r0, [pc, #4]	; (8002a50 <DMA2D_IRQHandler+0x8>)
 8002a4a:	f000 bb8e 	b.w	800316a <HAL_DMA2D_IRQHandler>
 8002a4e:	bf00      	nop
 8002a50:	200083a4 	.word	0x200083a4

08002a54 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <_sbrk+0x30>)
{
 8002a56:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8002a58:	6819      	ldr	r1, [r3, #0]
{
 8002a5a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002a5c:	b909      	cbnz	r1, 8002a62 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8002a5e:	490a      	ldr	r1, [pc, #40]	; (8002a88 <_sbrk+0x34>)
 8002a60:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a62:	6818      	ldr	r0, [r3, #0]
 8002a64:	4909      	ldr	r1, [pc, #36]	; (8002a8c <_sbrk+0x38>)
 8002a66:	4c0a      	ldr	r4, [pc, #40]	; (8002a90 <_sbrk+0x3c>)
 8002a68:	4402      	add	r2, r0
 8002a6a:	1b09      	subs	r1, r1, r4
 8002a6c:	428a      	cmp	r2, r1
 8002a6e:	d906      	bls.n	8002a7e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8002a70:	f007 ff84 	bl	800a97c <__errno>
 8002a74:	230c      	movs	r3, #12
 8002a76:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002a78:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002a7c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002a7e:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8002a80:	e7fc      	b.n	8002a7c <_sbrk+0x28>
 8002a82:	bf00      	nop
 8002a84:	20000cd4 	.word	0x20000cd4
 8002a88:	200087a8 	.word	0x200087a8
 8002a8c:	20050000 	.word	0x20050000
 8002a90:	00000800 	.word	0x00000800

08002a94 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a94:	4a03      	ldr	r2, [pc, #12]	; (8002aa4 <SystemInit+0x10>)
 8002a96:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002a9a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a9e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002aa2:	4770      	bx	lr
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ae0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002aac:	480d      	ldr	r0, [pc, #52]	; (8002ae4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002aae:	490e      	ldr	r1, [pc, #56]	; (8002ae8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ab0:	4a0e      	ldr	r2, [pc, #56]	; (8002aec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ab4:	e002      	b.n	8002abc <LoopCopyDataInit>

08002ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aba:	3304      	adds	r3, #4

08002abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ac0:	d3f9      	bcc.n	8002ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ac2:	4a0b      	ldr	r2, [pc, #44]	; (8002af0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ac4:	4c0b      	ldr	r4, [pc, #44]	; (8002af4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ac8:	e001      	b.n	8002ace <LoopFillZerobss>

08002aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002acc:	3204      	adds	r2, #4

08002ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ad0:	d3fb      	bcc.n	8002aca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ad2:	f7ff ffdf 	bl	8002a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ad6:	f007 ff57 	bl	800a988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ada:	f7ff feeb 	bl	80028b4 <main>
  bx  lr    
 8002ade:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ae0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ae8:	20000ac0 	.word	0x20000ac0
  ldr r2, =_sidata
 8002aec:	08069ae0 	.word	0x08069ae0
  ldr r2, =_sbss
 8002af0:	20000ac0 	.word	0x20000ac0
  ldr r4, =_ebss
 8002af4:	200087a4 	.word	0x200087a4

08002af8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002af8:	e7fe      	b.n	8002af8 <ADC_IRQHandler>
	...

08002afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002afc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002afe:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <HAL_InitTick+0x3c>)
{
 8002b00:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b02:	4a0e      	ldr	r2, [pc, #56]	; (8002b3c <HAL_InitTick+0x40>)
 8002b04:	7818      	ldrb	r0, [r3, #0]
 8002b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b0a:	fbb3 f3f0 	udiv	r3, r3, r0
 8002b0e:	6810      	ldr	r0, [r2, #0]
 8002b10:	fbb0 f0f3 	udiv	r0, r0, r3
 8002b14:	f000 f8a2 	bl	8002c5c <HAL_SYSTICK_Config>
 8002b18:	4604      	mov	r4, r0
 8002b1a:	b958      	cbnz	r0, 8002b34 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b1c:	2d0f      	cmp	r5, #15
 8002b1e:	d809      	bhi.n	8002b34 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b20:	4602      	mov	r2, r0
 8002b22:	4629      	mov	r1, r5
 8002b24:	f04f 30ff 	mov.w	r0, #4294967295
 8002b28:	f000 f858 	bl	8002bdc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b2c:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <HAL_InitTick+0x44>)
 8002b2e:	4620      	mov	r0, r4
 8002b30:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002b32:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002b34:	2001      	movs	r0, #1
 8002b36:	e7fc      	b.n	8002b32 <HAL_InitTick+0x36>
 8002b38:	20000030 	.word	0x20000030
 8002b3c:	2000002c 	.word	0x2000002c
 8002b40:	20000034 	.word	0x20000034

08002b44 <HAL_Init>:
{
 8002b44:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 8002b46:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <HAL_Init+0x28>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b48:	2003      	movs	r0, #3
  __HAL_FLASH_ART_ENABLE();
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b50:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b58:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b5a:	f000 f82d 	bl	8002bb8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b5e:	2000      	movs	r0, #0
 8002b60:	f7ff ffcc 	bl	8002afc <HAL_InitTick>
  HAL_MspInit();
 8002b64:	f7ff ff36 	bl	80029d4 <HAL_MspInit>
}
 8002b68:	2000      	movs	r0, #0
 8002b6a:	bd08      	pop	{r3, pc}
 8002b6c:	40023c00 	.word	0x40023c00

08002b70 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002b70:	4a03      	ldr	r2, [pc, #12]	; (8002b80 <HAL_IncTick+0x10>)
 8002b72:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <HAL_IncTick+0x14>)
 8002b74:	6811      	ldr	r1, [r2, #0]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	440b      	add	r3, r1
 8002b7a:	6013      	str	r3, [r2, #0]
}
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	20008790 	.word	0x20008790
 8002b84:	20000030 	.word	0x20000030

08002b88 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002b88:	4b01      	ldr	r3, [pc, #4]	; (8002b90 <HAL_GetTick+0x8>)
 8002b8a:	6818      	ldr	r0, [r3, #0]
}
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	20008790 	.word	0x20008790

08002b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b94:	b538      	push	{r3, r4, r5, lr}
 8002b96:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002b98:	f7ff fff6 	bl	8002b88 <HAL_GetTick>
 8002b9c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b9e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002ba0:	bf1e      	ittt	ne
 8002ba2:	4b04      	ldrne	r3, [pc, #16]	; (8002bb4 <HAL_Delay+0x20>)
 8002ba4:	781b      	ldrbne	r3, [r3, #0]
 8002ba6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ba8:	f7ff ffee 	bl	8002b88 <HAL_GetTick>
 8002bac:	1b43      	subs	r3, r0, r5
 8002bae:	42a3      	cmp	r3, r4
 8002bb0:	d3fa      	bcc.n	8002ba8 <HAL_Delay+0x14>
  {
  }
}
 8002bb2:	bd38      	pop	{r3, r4, r5, pc}
 8002bb4:	20000030 	.word	0x20000030

08002bb8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bb8:	4907      	ldr	r1, [pc, #28]	; (8002bd8 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bba:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bbc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bbe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bc6:	0412      	lsls	r2, r2, #16
 8002bc8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002bd4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002bd6:	4770      	bx	lr
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bdc:	4b16      	ldr	r3, [pc, #88]	; (8002c38 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bde:	b530      	push	{r4, r5, lr}
 8002be0:	68dc      	ldr	r4, [r3, #12]
 8002be2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be6:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bea:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bec:	2d04      	cmp	r5, #4
 8002bee:	bf28      	it	cs
 8002bf0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bf2:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf4:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bf8:	bf8c      	ite	hi
 8002bfa:	3c03      	subhi	r4, #3
 8002bfc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bfe:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8002c02:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c04:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c08:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c0c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c10:	fa01 f104 	lsl.w	r1, r1, r4
 8002c14:	ea41 0302 	orr.w	r3, r1, r2
 8002c18:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002c1c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8002c1e:	db06      	blt.n	8002c2e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c20:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002c24:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002c28:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002c2c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2e:	f000 000f 	and.w	r0, r0, #15
 8002c32:	4a02      	ldr	r2, [pc, #8]	; (8002c3c <HAL_NVIC_SetPriority+0x60>)
 8002c34:	5413      	strb	r3, [r2, r0]
 8002c36:	e7f9      	b.n	8002c2c <HAL_NVIC_SetPriority+0x50>
 8002c38:	e000ed00 	.word	0xe000ed00
 8002c3c:	e000ed14 	.word	0xe000ed14

08002c40 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002c40:	2800      	cmp	r0, #0
 8002c42:	db08      	blt.n	8002c56 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c44:	0942      	lsrs	r2, r0, #5
 8002c46:	2301      	movs	r3, #1
 8002c48:	f000 001f 	and.w	r0, r0, #31
 8002c4c:	fa03 f000 	lsl.w	r0, r3, r0
 8002c50:	4b01      	ldr	r3, [pc, #4]	; (8002c58 <HAL_NVIC_EnableIRQ+0x18>)
 8002c52:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002c56:	4770      	bx	lr
 8002c58:	e000e100 	.word	0xe000e100

08002c5c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c5c:	3801      	subs	r0, #1
 8002c5e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002c62:	d20a      	bcs.n	8002c7a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c64:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c66:	21f0      	movs	r1, #240	; 0xf0
 8002c68:	4a06      	ldr	r2, [pc, #24]	; (8002c84 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c6a:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c6c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c6e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c72:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c74:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c78:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002c7a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	e000e010 	.word	0xe000e010
 8002c84:	e000ed00 	.word	0xe000ed00

08002c88 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002c88:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002c8c:	4a04      	ldr	r2, [pc, #16]	; (8002ca0 <HAL_MPU_Disable+0x18>)
 8002c8e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c94:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002c96:	2200      	movs	r2, #0
 8002c98:	4b02      	ldr	r3, [pc, #8]	; (8002ca4 <HAL_MPU_Disable+0x1c>)
 8002c9a:	605a      	str	r2, [r3, #4]
}
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	e000ed00 	.word	0xe000ed00
 8002ca4:	e000ed90 	.word	0xe000ed90

08002ca8 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002ca8:	4a06      	ldr	r2, [pc, #24]	; (8002cc4 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002caa:	f040 0001 	orr.w	r0, r0, #1
 8002cae:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <HAL_MPU_Enable+0x20>)
 8002cb0:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002cb2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002cba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002cbe:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002cc2:	4770      	bx	lr
 8002cc4:	e000ed00 	.word	0xe000ed00
 8002cc8:	e000ed90 	.word	0xe000ed90

08002ccc <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002ccc:	7843      	ldrb	r3, [r0, #1]
 8002cce:	4a12      	ldr	r2, [pc, #72]	; (8002d18 <HAL_MPU_ConfigRegion+0x4c>)
{
 8002cd0:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8002cd2:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 8002cd4:	7801      	ldrb	r1, [r0, #0]
 8002cd6:	b1d9      	cbz	r1, 8002d10 <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8002cd8:	6843      	ldr	r3, [r0, #4]
 8002cda:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002cdc:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002cde:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002ce0:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ce2:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002ce6:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002ce8:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002cea:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002cee:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002cf0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002cf4:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002cf6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002cfa:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002cfc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002d00:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002d02:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002d06:	7a01      	ldrb	r1, [r0, #8]
 8002d08:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d0c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002d0e:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8002d10:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 8002d12:	6111      	str	r1, [r2, #16]
}
 8002d14:	e7fb      	b.n	8002d0e <HAL_MPU_ConfigRegion+0x42>
 8002d16:	bf00      	nop
 8002d18:	e000ed90 	.word	0xe000ed90

08002d1c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002d1c:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002d1e:	4604      	mov	r4, r0
 8002d20:	b908      	cbnz	r0, 8002d26 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8002d22:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8002d24:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002d26:	7f43      	ldrb	r3, [r0, #29]
 8002d28:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d2c:	b913      	cbnz	r3, 8002d34 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8002d2e:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8002d30:	f7ff fa0a 	bl	8002148 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002d34:	2302      	movs	r3, #2
 8002d36:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002d38:	7923      	ldrb	r3, [r4, #4]
 8002d3a:	b9e3      	cbnz	r3, 8002d76 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002d3c:	6823      	ldr	r3, [r4, #0]
 8002d3e:	4a13      	ldr	r2, [pc, #76]	; (8002d8c <HAL_CRC_Init+0x70>)
 8002d40:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	f022 0218 	bic.w	r2, r2, #24
 8002d48:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002d4a:	7962      	ldrb	r2, [r4, #5]
 8002d4c:	6823      	ldr	r3, [r4, #0]
 8002d4e:	b9d2      	cbnz	r2, 8002d86 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002d50:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002d54:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8002d56:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	6961      	ldr	r1, [r4, #20]
 8002d5c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d60:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002d62:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002d64:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8002d70:	2301      	movs	r3, #1
 8002d72:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8002d74:	e7d6      	b.n	8002d24 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002d76:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	f000 f808 	bl	8002d90 <HAL_CRCEx_Polynomial_Set>
 8002d80:	2800      	cmp	r0, #0
 8002d82:	d0e2      	beq.n	8002d4a <HAL_CRC_Init+0x2e>
 8002d84:	e7cd      	b.n	8002d22 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002d86:	6922      	ldr	r2, [r4, #16]
 8002d88:	e7e4      	b.n	8002d54 <HAL_CRC_Init+0x38>
 8002d8a:	bf00      	nop
 8002d8c:	04c11db7 	.word	0x04c11db7

08002d90 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002d90:	231f      	movs	r3, #31
{
 8002d92:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002d94:	3b01      	subs	r3, #1
 8002d96:	d306      	bcc.n	8002da6 <HAL_CRCEx_Polynomial_Set+0x16>
 8002d98:	fa21 f403 	lsr.w	r4, r1, r3
 8002d9c:	07e4      	lsls	r4, r4, #31
 8002d9e:	d5f9      	bpl.n	8002d94 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8002da0:	2a08      	cmp	r2, #8
 8002da2:	d014      	beq.n	8002dce <HAL_CRCEx_Polynomial_Set+0x3e>
 8002da4:	d802      	bhi.n	8002dac <HAL_CRCEx_Polynomial_Set+0x1c>
 8002da6:	b13a      	cbz	r2, 8002db8 <HAL_CRCEx_Polynomial_Set+0x28>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8002da8:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8002daa:	e00d      	b.n	8002dc8 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8002dac:	2a10      	cmp	r2, #16
 8002dae:	d00c      	beq.n	8002dca <HAL_CRCEx_Polynomial_Set+0x3a>
 8002db0:	2a18      	cmp	r2, #24
 8002db2:	d1f9      	bne.n	8002da8 <HAL_CRCEx_Polynomial_Set+0x18>
      if (msb >= HAL_CRC_LENGTH_7B)
 8002db4:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8002db6:	d8f7      	bhi.n	8002da8 <HAL_CRCEx_Polynomial_Set+0x18>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002db8:	6800      	ldr	r0, [r0, #0]
 8002dba:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002dbc:	6883      	ldr	r3, [r0, #8]
 8002dbe:	f023 0318 	bic.w	r3, r3, #24
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	6082      	str	r2, [r0, #8]
 8002dc6:	2000      	movs	r0, #0
}
 8002dc8:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8002dca:	2b07      	cmp	r3, #7
 8002dcc:	e7f3      	b.n	8002db6 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8002dce:	2b0f      	cmp	r3, #15
 8002dd0:	e7f1      	b.n	8002db6 <HAL_CRCEx_Polynomial_Set+0x26>
	...

08002dd4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002dd4:	6803      	ldr	r3, [r0, #0]
{
 8002dd6:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002dd8:	2018      	movs	r0, #24
 8002dda:	b2d9      	uxtb	r1, r3
 8002ddc:	3910      	subs	r1, #16
 8002dde:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8002de2:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002de4:	4c05      	ldr	r4, [pc, #20]	; (8002dfc <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8002de6:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002de8:	5c20      	ldrb	r0, [r4, r0]
 8002dea:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dec:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8002df0:	f020 0003 	bic.w	r0, r0, #3
 8002df4:	bf88      	it	hi
 8002df6:	3004      	addhi	r0, #4
 8002df8:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8002dfa:	bd10      	pop	{r4, pc}
 8002dfc:	0800c005 	.word	0x0800c005

08002e00 <HAL_DMA_Init>:
{
 8002e00:	b570      	push	{r4, r5, r6, lr}
 8002e02:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002e04:	f7ff fec0 	bl	8002b88 <HAL_GetTick>
 8002e08:	4605      	mov	r5, r0
  if(hdma == NULL)
 8002e0a:	2c00      	cmp	r4, #0
 8002e0c:	d073      	beq.n	8002ef6 <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e0e:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 8002e10:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e12:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8002e16:	2300      	movs	r3, #0
 8002e18:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8002e1c:	6813      	ldr	r3, [r2, #0]
 8002e1e:	f023 0301 	bic.w	r3, r3, #1
 8002e22:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e24:	6821      	ldr	r1, [r4, #0]
 8002e26:	680b      	ldr	r3, [r1, #0]
 8002e28:	07d8      	lsls	r0, r3, #31
 8002e2a:	d42f      	bmi.n	8002e8c <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8002e2c:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e2e:	4d33      	ldr	r5, [pc, #204]	; (8002efc <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e30:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e32:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e34:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	68e2      	ldr	r2, [r4, #12]
 8002e3c:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e3e:	6922      	ldr	r2, [r4, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	6962      	ldr	r2, [r4, #20]
 8002e44:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e46:	69e2      	ldr	r2, [r4, #28]
 8002e48:	4303      	orrs	r3, r0
 8002e4a:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e4c:	6a22      	ldr	r2, [r4, #32]
 8002e4e:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e50:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002e52:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e54:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e58:	bf02      	ittt	eq
 8002e5a:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8002e5e:	4335      	orreq	r5, r6
 8002e60:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e62:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8002e64:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8002e66:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e68:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8002e6c:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e70:	d133      	bne.n	8002eda <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 8002e72:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e74:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8002e76:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e78:	b37d      	cbz	r5, 8002eda <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e7a:	b990      	cbnz	r0, 8002ea2 <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8002e7c:	2a01      	cmp	r2, #1
 8002e7e:	d021      	beq.n	8002ec4 <HAL_DMA_Init+0xc4>
 8002e80:	f032 0202 	bics.w	r2, r2, #2
 8002e84:	d129      	bne.n	8002eda <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e86:	01ea      	lsls	r2, r5, #7
 8002e88:	d527      	bpl.n	8002eda <HAL_DMA_Init+0xda>
 8002e8a:	e01e      	b.n	8002eca <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e8c:	f7ff fe7c 	bl	8002b88 <HAL_GetTick>
 8002e90:	1b40      	subs	r0, r0, r5
 8002e92:	2805      	cmp	r0, #5
 8002e94:	d9c6      	bls.n	8002e24 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e96:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e98:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e9a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002e9c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002ea0:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ea2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002ea6:	d114      	bne.n	8002ed2 <HAL_DMA_Init+0xd2>
    switch (tmp)
 8002ea8:	2a03      	cmp	r2, #3
 8002eaa:	d816      	bhi.n	8002eda <HAL_DMA_Init+0xda>
 8002eac:	a001      	add	r0, pc, #4	; (adr r0, 8002eb4 <HAL_DMA_Init+0xb4>)
 8002eae:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8002eb2:	bf00      	nop
 8002eb4:	08002ecb 	.word	0x08002ecb
 8002eb8:	08002e87 	.word	0x08002e87
 8002ebc:	08002ecb 	.word	0x08002ecb
 8002ec0:	08002ec5 	.word	0x08002ec5
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ec4:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002ec8:	d107      	bne.n	8002eda <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002eca:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8002ecc:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ece:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002ed0:	e7e4      	b.n	8002e9c <HAL_DMA_Init+0x9c>
    switch (tmp)
 8002ed2:	2a02      	cmp	r2, #2
 8002ed4:	d9f9      	bls.n	8002eca <HAL_DMA_Init+0xca>
 8002ed6:	2a03      	cmp	r2, #3
 8002ed8:	d0d5      	beq.n	8002e86 <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 8002eda:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002edc:	4620      	mov	r0, r4
 8002ede:	f7ff ff79 	bl	8002dd4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ee2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002ee4:	233f      	movs	r3, #63	; 0x3f
 8002ee6:	4093      	lsls	r3, r2
 8002ee8:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eea:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002eec:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eee:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002ef0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002ef4:	e7d4      	b.n	8002ea0 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 8002ef6:	2001      	movs	r0, #1
 8002ef8:	e7d2      	b.n	8002ea0 <HAL_DMA_Init+0xa0>
 8002efa:	bf00      	nop
 8002efc:	f010803f 	.word	0xf010803f

08002f00 <HAL_DMA_DeInit>:
{
 8002f00:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8002f02:	4605      	mov	r5, r0
 8002f04:	b320      	cbz	r0, 8002f50 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002f06:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	b2dc      	uxtb	r4, r3
 8002f0e:	d01d      	beq.n	8002f4c <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8002f10:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 8002f12:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002f1c:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8002f1e:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8002f20:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8002f22:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8002f24:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8002f26:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002f28:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f2a:	f7ff ff53 	bl	8002dd4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f2e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002f30:	233f      	movs	r3, #63	; 0x3f
 8002f32:	4093      	lsls	r3, r2
 8002f34:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f36:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8002f38:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8002f3c:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 8002f40:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8002f44:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 8002f48:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
}
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002f50:	2401      	movs	r4, #1
 8002f52:	e7fb      	b.n	8002f4c <HAL_DMA_DeInit+0x4c>

08002f54 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002f54:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002f56:	6804      	ldr	r4, [r0, #0]
 8002f58:	9d04      	ldr	r5, [sp, #16]
 8002f5a:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8002f5c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8002f60:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 8002f64:	4333      	orrs	r3, r6
 8002f66:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002f68:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002f6a:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002f6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f70:	d130      	bne.n	8002fd4 <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002f72:	6886      	ldr	r6, [r0, #8]
 8002f74:	b11e      	cbz	r6, 8002f7e <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002f76:	2e01      	cmp	r6, #1
 8002f78:	d103      	bne.n	8002f82 <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002f7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002f7e:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002f80:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002f82:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002f84:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002f88:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002f8c:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002f8e:	d107      	bne.n	8002fa0 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 8002f90:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 8002f92:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002f94:	02db      	lsls	r3, r3, #11
 8002f96:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8002f9a:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
 8002f9e:	e7ee      	b.n	8002f7e <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002fa0:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002fa2:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002fa6:	d10a      	bne.n	8002fbe <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 8002fa8:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8002faa:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002fac:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 8002fae:	0fd1      	lsrs	r1, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002fb0:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8002fb4:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8002fb8:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8002fbc:	e7df      	b.n	8002f7e <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 8002fbe:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 8002fc0:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002fc2:	0209      	lsls	r1, r1, #8
      tmp1 = (tmp1 >> 28U);
 8002fc4:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002fc6:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8002fca:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
 8002fce:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 8002fd2:	e7d4      	b.n	8002f7e <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002fd4:	60e1      	str	r1, [r4, #12]
}
 8002fd6:	e7d3      	b.n	8002f80 <DMA2D_SetConfig+0x2c>

08002fd8 <HAL_DMA2D_Init>:
{
 8002fd8:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
 8002fda:	4604      	mov	r4, r0
 8002fdc:	b330      	cbz	r0, 800302c <HAL_DMA2D_Init+0x54>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002fde:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002fe2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002fe6:	b91b      	cbnz	r3, 8002ff0 <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 8002fe8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8002fec:	f7ff f8c2 	bl	8002174 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002ff0:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002ff2:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002ff4:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002ff6:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002ff8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002ffc:	6813      	ldr	r3, [r2, #0]
 8002ffe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003002:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003004:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003006:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003008:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800300a:	f023 0307 	bic.w	r3, r3, #7
 800300e:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003010:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003012:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003014:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003016:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800301a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800301e:	430b      	orrs	r3, r1
 8003020:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003022:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003024:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003026:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 800302a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800302c:	2001      	movs	r0, #1
 800302e:	e7fc      	b.n	800302a <HAL_DMA2D_Init+0x52>

08003030 <HAL_DMA2D_Start>:
{
 8003030:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8003032:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
{
 8003036:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 8003038:	2d01      	cmp	r5, #1
 800303a:	f04f 0502 	mov.w	r5, #2
 800303e:	d00f      	beq.n	8003060 <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003040:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8003044:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003046:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
 8003048:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800304c:	9500      	str	r5, [sp, #0]
 800304e:	f7ff ff81 	bl	8002f54 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8003052:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 8003054:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8003056:	6813      	ldr	r3, [r2, #0]
 8003058:	4333      	orrs	r3, r6
 800305a:	6013      	str	r3, [r2, #0]
}
 800305c:	b002      	add	sp, #8
 800305e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8003060:	4628      	mov	r0, r5
 8003062:	e7fb      	b.n	800305c <HAL_DMA2D_Start+0x2c>

08003064 <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
 8003064:	2300      	movs	r3, #0
{
 8003066:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8003068:	9301      	str	r3, [sp, #4]
{
 800306a:	4604      	mov	r4, r0
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800306c:	6803      	ldr	r3, [r0, #0]
{
 800306e:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	07db      	lsls	r3, r3, #31
 8003074:	d417      	bmi.n	80030a6 <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003076:	6822      	ldr	r2, [r4, #0]
 8003078:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800307a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800307c:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 800307e:	069e      	lsls	r6, r3, #26
 8003080:	d506      	bpl.n	8003090 <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 8003082:	f7ff fd81 	bl	8002b88 <HAL_GetTick>
 8003086:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003088:	6823      	ldr	r3, [r4, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	06d2      	lsls	r2, r2, #27
 800308e:	d543      	bpl.n	8003118 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003090:	6823      	ldr	r3, [r4, #0]
 8003092:	2212      	movs	r2, #18
  __HAL_UNLOCK(hdma2d);
 8003094:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003096:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003098:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma2d);
 800309a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800309e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 80030a2:	b002      	add	sp, #8
 80030a4:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 80030a6:	f7ff fd6f 	bl	8002b88 <HAL_GetTick>
 80030aa:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80030ac:	6823      	ldr	r3, [r4, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	0792      	lsls	r2, r2, #30
 80030b2:	d4e0      	bmi.n	8003076 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80030b8:	9a01      	ldr	r2, [sp, #4]
 80030ba:	f012 0f21 	tst.w	r2, #33	; 0x21
 80030be:	d017      	beq.n	80030f0 <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80030c0:	9a01      	ldr	r2, [sp, #4]
 80030c2:	0695      	lsls	r5, r2, #26
 80030c4:	d503      	bpl.n	80030ce <HAL_DMA2D_PollForTransfer+0x6a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80030c6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80030c8:	f042 0202 	orr.w	r2, r2, #2
 80030cc:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80030ce:	9a01      	ldr	r2, [sp, #4]
 80030d0:	07d0      	lsls	r0, r2, #31
 80030d2:	d503      	bpl.n	80030dc <HAL_DMA2D_PollForTransfer+0x78>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80030d4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80030d6:	f042 0201 	orr.w	r2, r2, #1
 80030da:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80030dc:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80030de:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80030e0:	2304      	movs	r3, #4
        return HAL_ERROR;
 80030e2:	2001      	movs	r0, #1
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80030e4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 80030e8:	2300      	movs	r3, #0
 80030ea:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 80030ee:	e7d8      	b.n	80030a2 <HAL_DMA2D_PollForTransfer+0x3e>
      if (Timeout != HAL_MAX_DELAY)
 80030f0:	1c69      	adds	r1, r5, #1
 80030f2:	d0dc      	beq.n	80030ae <HAL_DMA2D_PollForTransfer+0x4a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030f4:	f7ff fd48 	bl	8002b88 <HAL_GetTick>
 80030f8:	1b80      	subs	r0, r0, r6
 80030fa:	42a8      	cmp	r0, r5
 80030fc:	d801      	bhi.n	8003102 <HAL_DMA2D_PollForTransfer+0x9e>
 80030fe:	2d00      	cmp	r5, #0
 8003100:	d1d4      	bne.n	80030ac <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003102:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003104:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003106:	f043 0320 	orr.w	r3, r3, #32
 800310a:	63e3      	str	r3, [r4, #60]	; 0x3c
          __HAL_UNLOCK(hdma2d);
 800310c:	2300      	movs	r3, #0
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800310e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8003112:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8003116:	e7c4      	b.n	80030a2 <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800311c:	9a01      	ldr	r2, [sp, #4]
 800311e:	f012 0f29 	tst.w	r2, #41	; 0x29
 8003122:	d016      	beq.n	8003152 <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003124:	9a01      	ldr	r2, [sp, #4]
 8003126:	0716      	lsls	r6, r2, #28
 8003128:	d503      	bpl.n	8003132 <HAL_DMA2D_PollForTransfer+0xce>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800312a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800312c:	f042 0204 	orr.w	r2, r2, #4
 8003130:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003132:	9a01      	ldr	r2, [sp, #4]
 8003134:	0695      	lsls	r5, r2, #26
 8003136:	d503      	bpl.n	8003140 <HAL_DMA2D_PollForTransfer+0xdc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003138:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800313a:	f042 0202 	orr.w	r2, r2, #2
 800313e:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003140:	9a01      	ldr	r2, [sp, #4]
 8003142:	07d0      	lsls	r0, r2, #31
 8003144:	d503      	bpl.n	800314e <HAL_DMA2D_PollForTransfer+0xea>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003146:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003148:	f042 0201 	orr.w	r2, r2, #1
 800314c:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800314e:	2229      	movs	r2, #41	; 0x29
 8003150:	e7c5      	b.n	80030de <HAL_DMA2D_PollForTransfer+0x7a>
      if (Timeout != HAL_MAX_DELAY)
 8003152:	1c69      	adds	r1, r5, #1
 8003154:	d099      	beq.n	800308a <HAL_DMA2D_PollForTransfer+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003156:	f7ff fd17 	bl	8002b88 <HAL_GetTick>
 800315a:	1b80      	subs	r0, r0, r6
 800315c:	42a8      	cmp	r0, r5
 800315e:	d8d0      	bhi.n	8003102 <HAL_DMA2D_PollForTransfer+0x9e>
 8003160:	2d00      	cmp	r5, #0
 8003162:	d191      	bne.n	8003088 <HAL_DMA2D_PollForTransfer+0x24>
 8003164:	e7cd      	b.n	8003102 <HAL_DMA2D_PollForTransfer+0x9e>

08003166 <HAL_DMA2D_LineEventCallback>:
 8003166:	4770      	bx	lr

08003168 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 8003168:	4770      	bx	lr

0800316a <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800316a:	6803      	ldr	r3, [r0, #0]
{
 800316c:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800316e:	685e      	ldr	r6, [r3, #4]
{
 8003170:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003172:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003174:	07f2      	lsls	r2, r6, #31
 8003176:	d514      	bpl.n	80031a2 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003178:	05e9      	lsls	r1, r5, #23
 800317a:	d512      	bpl.n	80031a2 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003182:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003184:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003186:	f042 0201 	orr.w	r2, r2, #1
 800318a:	63c2      	str	r2, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800318c:	2201      	movs	r2, #1
 800318e:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003190:	2304      	movs	r3, #4
 8003192:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8003196:	2300      	movs	r3, #0
 8003198:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 800319c:	6943      	ldr	r3, [r0, #20]
 800319e:	b103      	cbz	r3, 80031a2 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 80031a0:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80031a2:	06b2      	lsls	r2, r6, #26
 80031a4:	d516      	bpl.n	80031d4 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 80031a6:	04ab      	lsls	r3, r5, #18
 80031a8:	d514      	bpl.n	80031d4 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80031b4:	2220      	movs	r2, #32
 80031b6:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80031b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80031ba:	f043 0302 	orr.w	r3, r3, #2
 80031be:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80031c0:	2304      	movs	r3, #4
 80031c2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80031c6:	2300      	movs	r3, #0
 80031c8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 80031cc:	6963      	ldr	r3, [r4, #20]
 80031ce:	b10b      	cbz	r3, 80031d4 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 80031d0:	4620      	mov	r0, r4
 80031d2:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80031d4:	0730      	lsls	r0, r6, #28
 80031d6:	d516      	bpl.n	8003206 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80031d8:	0529      	lsls	r1, r5, #20
 80031da:	d514      	bpl.n	8003206 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80031dc:	6823      	ldr	r3, [r4, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031e4:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80031e6:	2208      	movs	r2, #8
 80031e8:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80031ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80031ec:	f043 0304 	orr.w	r3, r3, #4
 80031f0:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80031f2:	2304      	movs	r3, #4
 80031f4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80031f8:	2300      	movs	r3, #0
 80031fa:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 80031fe:	6963      	ldr	r3, [r4, #20]
 8003200:	b10b      	cbz	r3, 8003206 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8003202:	4620      	mov	r0, r4
 8003204:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003206:	0772      	lsls	r2, r6, #29
 8003208:	d50b      	bpl.n	8003222 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800320a:	056b      	lsls	r3, r5, #21
 800320c:	d509      	bpl.n	8003222 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800320e:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003210:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003218:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800321a:	2204      	movs	r2, #4
 800321c:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800321e:	f7ff ffa2 	bl	8003166 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003222:	07b0      	lsls	r0, r6, #30
 8003224:	d514      	bpl.n	8003250 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003226:	05a9      	lsls	r1, r5, #22
 8003228:	d512      	bpl.n	8003250 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003232:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003234:	2202      	movs	r2, #2
 8003236:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003238:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800323a:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800323c:	2301      	movs	r3, #1
 800323e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8003242:	2300      	movs	r3, #0
 8003244:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferCpltCallback != NULL)
 8003248:	6923      	ldr	r3, [r4, #16]
 800324a:	b10b      	cbz	r3, 8003250 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 800324c:	4620      	mov	r0, r4
 800324e:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003250:	06f2      	lsls	r2, r6, #27
 8003252:	d513      	bpl.n	800327c <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003254:	04eb      	lsls	r3, r5, #19
 8003256:	d511      	bpl.n	800327c <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003258:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800325a:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003262:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003264:	2210      	movs	r2, #16
 8003266:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003268:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800326a:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800326c:	2301      	movs	r3, #1
 800326e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8003272:	2300      	movs	r3, #0
 8003274:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003278:	f7ff ff76 	bl	8003168 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800327c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003280 <HAL_DMA2D_ConfigLayer>:
{
 8003280:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8003282:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003286:	2b01      	cmp	r3, #1
 8003288:	f04f 0302 	mov.w	r3, #2
 800328c:	d02b      	beq.n	80032e6 <HAL_DMA2D_ConfigLayer+0x66>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800328e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8003292:	2201      	movs	r2, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003294:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8003298:	4f1c      	ldr	r7, [pc, #112]	; (800330c <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
 800329a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800329e:	010e      	lsls	r6, r1, #4
 80032a0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80032a2:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 80032a6:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80032aa:	3c09      	subs	r4, #9
 80032ac:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80032ae:	bf96      	itet	ls
 80032b0:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80032b4:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80032b8:	431a      	orrls	r2, r3
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80032ba:	6803      	ldr	r3, [r0, #0]
 80032bc:	b9a9      	cbnz	r1, 80032ea <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80032be:	6a59      	ldr	r1, [r3, #36]	; 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80032c0:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80032c2:	ea01 0107 	and.w	r1, r1, r7
 80032c6:	ea42 0201 	orr.w	r2, r2, r1
 80032ca:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80032cc:	6982      	ldr	r2, [r0, #24]
 80032ce:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80032d0:	d803      	bhi.n	80032da <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80032d2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80032d4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80032d8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80032da:	2301      	movs	r3, #1
 80032dc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 80032e0:	2300      	movs	r3, #0
 80032e2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 80032e6:	4618      	mov	r0, r3
}
 80032e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80032ea:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80032ec:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80032ee:	ea01 0107 	and.w	r1, r1, r7
 80032f2:	ea42 0201 	orr.w	r2, r2, r1
 80032f6:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80032f8:	eb00 0206 	add.w	r2, r0, r6
 80032fc:	6992      	ldr	r2, [r2, #24]
 80032fe:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003300:	d8eb      	bhi.n	80032da <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003302:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8003306:	621d      	str	r5, [r3, #32]
 8003308:	e7e7      	b.n	80032da <HAL_DMA2D_ConfigLayer+0x5a>
 800330a:	bf00      	nop
 800330c:	00fcfff0 	.word	0x00fcfff0

08003310 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003310:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003314:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003316:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80034d4 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800331a:	4a6c      	ldr	r2, [pc, #432]	; (80034cc <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 800331c:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800331e:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8003320:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003322:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8003326:	43ac      	bics	r4, r5
 8003328:	f040 80b6 	bne.w	8003498 <HAL_GPIO_Init+0x188>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800332c:	684d      	ldr	r5, [r1, #4]
 800332e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8003332:	2603      	movs	r6, #3
 8003334:	f005 0403 	and.w	r4, r5, #3
 8003338:	fa06 f608 	lsl.w	r6, r6, r8
 800333c:	1e67      	subs	r7, r4, #1
 800333e:	43f6      	mvns	r6, r6
 8003340:	2f01      	cmp	r7, #1
 8003342:	d834      	bhi.n	80033ae <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 8003344:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003346:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 800334a:	68cf      	ldr	r7, [r1, #12]
 800334c:	fa07 f708 	lsl.w	r7, r7, r8
 8003350:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8003354:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003356:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003358:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800335c:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8003360:	409f      	lsls	r7, r3
 8003362:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8003366:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003368:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800336a:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800336c:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003370:	688f      	ldr	r7, [r1, #8]
 8003372:	fa07 f708 	lsl.w	r7, r7, r8
 8003376:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 800337a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800337c:	d119      	bne.n	80033b2 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 800337e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003382:	f003 0b07 	and.w	fp, r3, #7
 8003386:	f04f 0e0f 	mov.w	lr, #15
 800338a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800338e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8003392:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003396:	fa0e fe0b 	lsl.w	lr, lr, fp
 800339a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800339e:	690f      	ldr	r7, [r1, #16]
 80033a0:	fa07 f70b 	lsl.w	r7, r7, fp
 80033a4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 80033a8:	f8ca 7020 	str.w	r7, [sl, #32]
 80033ac:	e001      	b.n	80033b2 <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033ae:	2c03      	cmp	r4, #3
 80033b0:	d1da      	bne.n	8003368 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 80033b2:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80033b4:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033b8:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80033bc:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80033c0:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 80033c4:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033c6:	d067      	beq.n	8003498 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033c8:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 80033cc:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80033d0:	f003 0703 	and.w	r7, r3, #3
 80033d4:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033d8:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80033dc:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80033e0:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033e2:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 80033e6:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 80033ea:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 80033ee:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 80033f2:	9401      	str	r4, [sp, #4]
 80033f4:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80033f6:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 80033fa:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80033fe:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003402:	4c33      	ldr	r4, [pc, #204]	; (80034d0 <HAL_GPIO_Init+0x1c0>)
 8003404:	42a0      	cmp	r0, r4
 8003406:	d04e      	beq.n	80034a6 <HAL_GPIO_Init+0x196>
 8003408:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800340c:	42a0      	cmp	r0, r4
 800340e:	d04c      	beq.n	80034aa <HAL_GPIO_Init+0x19a>
 8003410:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003414:	42a0      	cmp	r0, r4
 8003416:	d04a      	beq.n	80034ae <HAL_GPIO_Init+0x19e>
 8003418:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800341c:	42a0      	cmp	r0, r4
 800341e:	d048      	beq.n	80034b2 <HAL_GPIO_Init+0x1a2>
 8003420:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003424:	42a0      	cmp	r0, r4
 8003426:	d046      	beq.n	80034b6 <HAL_GPIO_Init+0x1a6>
 8003428:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800342c:	42a0      	cmp	r0, r4
 800342e:	d044      	beq.n	80034ba <HAL_GPIO_Init+0x1aa>
 8003430:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003434:	42a0      	cmp	r0, r4
 8003436:	d042      	beq.n	80034be <HAL_GPIO_Init+0x1ae>
 8003438:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800343c:	42a0      	cmp	r0, r4
 800343e:	d040      	beq.n	80034c2 <HAL_GPIO_Init+0x1b2>
 8003440:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003444:	42a0      	cmp	r0, r4
 8003446:	d03e      	beq.n	80034c6 <HAL_GPIO_Init+0x1b6>
 8003448:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800344c:	42a0      	cmp	r0, r4
 800344e:	bf0c      	ite	eq
 8003450:	2409      	moveq	r4, #9
 8003452:	240a      	movne	r4, #10
 8003454:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003456:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003458:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800345c:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 800345e:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 8003462:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8003464:	bf54      	ite	pl
 8003466:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8003468:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800346c:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 800346e:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8003470:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8003472:	bf54      	ite	pl
 8003474:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8003476:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800347a:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 800347c:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 800347e:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8003480:	bf54      	ite	pl
 8003482:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8003484:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003488:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 800348a:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 800348c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800348e:	bf54      	ite	pl
 8003490:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8003492:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8003496:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003498:	3301      	adds	r3, #1
 800349a:	2b10      	cmp	r3, #16
 800349c:	f47f af3e 	bne.w	800331c <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80034a0:	b003      	add	sp, #12
 80034a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80034a6:	2400      	movs	r4, #0
 80034a8:	e7d4      	b.n	8003454 <HAL_GPIO_Init+0x144>
 80034aa:	2401      	movs	r4, #1
 80034ac:	e7d2      	b.n	8003454 <HAL_GPIO_Init+0x144>
 80034ae:	2402      	movs	r4, #2
 80034b0:	e7d0      	b.n	8003454 <HAL_GPIO_Init+0x144>
 80034b2:	2403      	movs	r4, #3
 80034b4:	e7ce      	b.n	8003454 <HAL_GPIO_Init+0x144>
 80034b6:	2404      	movs	r4, #4
 80034b8:	e7cc      	b.n	8003454 <HAL_GPIO_Init+0x144>
 80034ba:	2405      	movs	r4, #5
 80034bc:	e7ca      	b.n	8003454 <HAL_GPIO_Init+0x144>
 80034be:	2406      	movs	r4, #6
 80034c0:	e7c8      	b.n	8003454 <HAL_GPIO_Init+0x144>
 80034c2:	2407      	movs	r4, #7
 80034c4:	e7c6      	b.n	8003454 <HAL_GPIO_Init+0x144>
 80034c6:	2408      	movs	r4, #8
 80034c8:	e7c4      	b.n	8003454 <HAL_GPIO_Init+0x144>
 80034ca:	bf00      	nop
 80034cc:	40013c00 	.word	0x40013c00
 80034d0:	40020000 	.word	0x40020000
 80034d4:	40023800 	.word	0x40023800

080034d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80034d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80034dc:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80034de:	4c4a      	ldr	r4, [pc, #296]	; (8003608 <HAL_GPIO_DeInit+0x130>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80034e0:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8003610 <HAL_GPIO_DeInit+0x138>
 80034e4:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8003614 <HAL_GPIO_DeInit+0x13c>
 80034e8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8003618 <HAL_GPIO_DeInit+0x140>
    ioposition = ((uint32_t)0x01) << position;
 80034ec:	2301      	movs	r3, #1
 80034ee:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 80034f2:	ea3e 0301 	bics.w	r3, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 80034f6:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 80034fa:	d16e      	bne.n	80035da <HAL_GPIO_DeInit+0x102>
      tmp = SYSCFG->EXTICR[position >> 2];
 80034fc:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003500:	f002 0c03 	and.w	ip, r2, #3
 8003504:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003506:	4b41      	ldr	r3, [pc, #260]	; (800360c <HAL_GPIO_DeInit+0x134>)
 8003508:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800350c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003510:	4298      	cmp	r0, r3
 8003512:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003516:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2];
 800351a:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800351e:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003522:	d05f      	beq.n	80035e4 <HAL_GPIO_DeInit+0x10c>
 8003524:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003528:	4298      	cmp	r0, r3
 800352a:	d05d      	beq.n	80035e8 <HAL_GPIO_DeInit+0x110>
 800352c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003530:	4298      	cmp	r0, r3
 8003532:	d05b      	beq.n	80035ec <HAL_GPIO_DeInit+0x114>
 8003534:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003538:	4298      	cmp	r0, r3
 800353a:	d059      	beq.n	80035f0 <HAL_GPIO_DeInit+0x118>
 800353c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003540:	4298      	cmp	r0, r3
 8003542:	d057      	beq.n	80035f4 <HAL_GPIO_DeInit+0x11c>
 8003544:	4548      	cmp	r0, r9
 8003546:	d057      	beq.n	80035f8 <HAL_GPIO_DeInit+0x120>
 8003548:	4550      	cmp	r0, sl
 800354a:	d057      	beq.n	80035fc <HAL_GPIO_DeInit+0x124>
 800354c:	4558      	cmp	r0, fp
 800354e:	d057      	beq.n	8003600 <HAL_GPIO_DeInit+0x128>
 8003550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003554:	4298      	cmp	r0, r3
 8003556:	d055      	beq.n	8003604 <HAL_GPIO_DeInit+0x12c>
 8003558:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800355c:	4298      	cmp	r0, r3
 800355e:	bf0c      	ite	eq
 8003560:	2309      	moveq	r3, #9
 8003562:	230a      	movne	r3, #10
 8003564:	fa03 f30c 	lsl.w	r3, r3, ip
 8003568:	4543      	cmp	r3, r8
 800356a:	d113      	bne.n	8003594 <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800356c:	6823      	ldr	r3, [r4, #0]
 800356e:	ea23 0307 	bic.w	r3, r3, r7
 8003572:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003574:	6863      	ldr	r3, [r4, #4]
 8003576:	ea23 0307 	bic.w	r3, r3, r7
 800357a:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800357c:	68e3      	ldr	r3, [r4, #12]
 800357e:	ea23 0307 	bic.w	r3, r3, r7
 8003582:	60e3      	str	r3, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003584:	68a3      	ldr	r3, [r4, #8]
 8003586:	ea23 0707 	bic.w	r7, r3, r7
 800358a:	60a7      	str	r7, [r4, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800358c:	68ab      	ldr	r3, [r5, #8]
 800358e:	ea23 0606 	bic.w	r6, r3, r6
 8003592:	60ae      	str	r6, [r5, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003594:	2603      	movs	r6, #3
 8003596:	0053      	lsls	r3, r2, #1
 8003598:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800359a:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800359e:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80035a2:	270f      	movs	r7, #15
 80035a4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80035a8:	ea25 0503 	bic.w	r5, r5, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80035ac:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80035b0:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80035b2:	fa22 f506 	lsr.w	r5, r2, r6
 80035b6:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80035ba:	6a2e      	ldr	r6, [r5, #32]
 80035bc:	ea26 0707 	bic.w	r7, r6, r7
 80035c0:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80035c2:	68c5      	ldr	r5, [r0, #12]
 80035c4:	ea25 0503 	bic.w	r5, r5, r3
 80035c8:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035ca:	6845      	ldr	r5, [r0, #4]
 80035cc:	ea25 050e 	bic.w	r5, r5, lr
 80035d0:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80035d2:	6885      	ldr	r5, [r0, #8]
 80035d4:	ea25 0303 	bic.w	r3, r5, r3
 80035d8:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80035da:	3201      	adds	r2, #1
 80035dc:	2a10      	cmp	r2, #16
 80035de:	d185      	bne.n	80034ec <HAL_GPIO_DeInit+0x14>
    }
  }
}
 80035e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80035e4:	2300      	movs	r3, #0
 80035e6:	e7bd      	b.n	8003564 <HAL_GPIO_DeInit+0x8c>
 80035e8:	2301      	movs	r3, #1
 80035ea:	e7bb      	b.n	8003564 <HAL_GPIO_DeInit+0x8c>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e7b9      	b.n	8003564 <HAL_GPIO_DeInit+0x8c>
 80035f0:	2303      	movs	r3, #3
 80035f2:	e7b7      	b.n	8003564 <HAL_GPIO_DeInit+0x8c>
 80035f4:	2304      	movs	r3, #4
 80035f6:	e7b5      	b.n	8003564 <HAL_GPIO_DeInit+0x8c>
 80035f8:	2305      	movs	r3, #5
 80035fa:	e7b3      	b.n	8003564 <HAL_GPIO_DeInit+0x8c>
 80035fc:	2306      	movs	r3, #6
 80035fe:	e7b1      	b.n	8003564 <HAL_GPIO_DeInit+0x8c>
 8003600:	2307      	movs	r3, #7
 8003602:	e7af      	b.n	8003564 <HAL_GPIO_DeInit+0x8c>
 8003604:	2308      	movs	r3, #8
 8003606:	e7ad      	b.n	8003564 <HAL_GPIO_DeInit+0x8c>
 8003608:	40013c00 	.word	0x40013c00
 800360c:	40020000 	.word	0x40020000
 8003610:	40021400 	.word	0x40021400
 8003614:	40021800 	.word	0x40021800
 8003618:	40021c00 	.word	0x40021c00

0800361c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800361c:	b10a      	cbz	r2, 8003622 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800361e:	6181      	str	r1, [r0, #24]
  }
}
 8003620:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003622:	0409      	lsls	r1, r1, #16
 8003624:	e7fb      	b.n	800361e <HAL_GPIO_WritePin+0x2>
	...

08003628 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003628:	4a04      	ldr	r2, [pc, #16]	; (800363c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800362a:	6951      	ldr	r1, [r2, #20]
 800362c:	4201      	tst	r1, r0
{
 800362e:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003630:	d002      	beq.n	8003638 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003632:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003634:	f7ff f9a6 	bl	8002984 <HAL_GPIO_EXTI_Callback>
  }
}
 8003638:	bd08      	pop	{r3, pc}
 800363a:	bf00      	nop
 800363c:	40013c00 	.word	0x40013c00

08003640 <HAL_HCD_SOF_Callback>:
 8003640:	4770      	bx	lr

08003642 <HAL_HCD_Connect_Callback>:
 8003642:	4770      	bx	lr

08003644 <HAL_HCD_Disconnect_Callback>:
 8003644:	4770      	bx	lr

08003646 <HAL_HCD_PortEnabled_Callback>:
 8003646:	4770      	bx	lr

08003648 <HAL_HCD_PortDisabled_Callback>:
 8003648:	4770      	bx	lr

0800364a <HAL_HCD_HC_NotifyURBChange_Callback>:
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 800364a:	4770      	bx	lr

0800364c <HAL_HCD_IRQHandler>:
{
 800364c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003650:	f8d0 9000 	ldr.w	r9, [r0]
{
 8003654:	b085      	sub	sp, #20
 8003656:	4604      	mov	r4, r0
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003658:	4648      	mov	r0, r9
 800365a:	f001 fe9e 	bl	800539a <USB_GetMode>
 800365e:	2801      	cmp	r0, #1
 8003660:	f040 80f1 	bne.w	8003846 <HAL_HCD_IRQHandler+0x1fa>
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003664:	6820      	ldr	r0, [r4, #0]
 8003666:	f001 fe94 	bl	8005392 <USB_ReadInterrupts>
 800366a:	2800      	cmp	r0, #0
 800366c:	f000 80eb 	beq.w	8003846 <HAL_HCD_IRQHandler+0x1fa>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003670:	6820      	ldr	r0, [r4, #0]
 8003672:	f001 fe8e 	bl	8005392 <USB_ReadInterrupts>
 8003676:	0281      	lsls	r1, r0, #10
 8003678:	d503      	bpl.n	8003682 <HAL_HCD_IRQHandler+0x36>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003680:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003682:	6820      	ldr	r0, [r4, #0]
 8003684:	f001 fe85 	bl	8005392 <USB_ReadInterrupts>
 8003688:	02c2      	lsls	r2, r0, #11
 800368a:	d503      	bpl.n	8003694 <HAL_HCD_IRQHandler+0x48>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003692:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003694:	6820      	ldr	r0, [r4, #0]
 8003696:	f001 fe7c 	bl	8005392 <USB_ReadInterrupts>
 800369a:	0143      	lsls	r3, r0, #5
 800369c:	d503      	bpl.n	80036a6 <HAL_HCD_IRQHandler+0x5a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800369e:	6823      	ldr	r3, [r4, #0]
 80036a0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80036a4:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80036a6:	6820      	ldr	r0, [r4, #0]
 80036a8:	f001 fe73 	bl	8005392 <USB_ReadInterrupts>
 80036ac:	0787      	lsls	r7, r0, #30
 80036ae:	d502      	bpl.n	80036b6 <HAL_HCD_IRQHandler+0x6a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	2202      	movs	r2, #2
 80036b4:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80036b6:	6820      	ldr	r0, [r4, #0]
 80036b8:	f001 fe6b 	bl	8005392 <USB_ReadInterrupts>
 80036bc:	0086      	lsls	r6, r0, #2
 80036be:	d515      	bpl.n	80036ec <HAL_HCD_IRQHandler+0xa0>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80036c0:	6823      	ldr	r3, [r4, #0]
 80036c2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80036c6:	615a      	str	r2, [r3, #20]
      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80036c8:	f8d9 3440 	ldr.w	r3, [r9, #1088]	; 0x440
 80036cc:	07dd      	lsls	r5, r3, #31
 80036ce:	d40d      	bmi.n	80036ec <HAL_HCD_IRQHandler+0xa0>
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80036d0:	2110      	movs	r1, #16
 80036d2:	4648      	mov	r0, r9
 80036d4:	f001 fdf4 	bl	80052c0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80036d8:	4648      	mov	r0, r9
 80036da:	f001 fe15 	bl	8005308 <USB_FlushRxFifo>
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80036de:	2101      	movs	r1, #1
 80036e0:	6820      	ldr	r0, [r4, #0]
 80036e2:	f001 fe5e 	bl	80053a2 <USB_InitFSLSPClkSel>
        HAL_HCD_Disconnect_Callback(hhcd);
 80036e6:	4620      	mov	r0, r4
 80036e8:	f7ff ffac 	bl	8003644 <HAL_HCD_Disconnect_Callback>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80036ec:	6820      	ldr	r0, [r4, #0]
 80036ee:	f001 fe50 	bl	8005392 <USB_ReadInterrupts>
 80036f2:	01c0      	lsls	r0, r0, #7
 80036f4:	d53d      	bpl.n	8003772 <HAL_HCD_IRQHandler+0x126>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036f6:	6825      	ldr	r5, [r4, #0]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80036f8:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80036fc:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 80036fe:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8003702:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003704:	9b03      	ldr	r3, [sp, #12]
 8003706:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800370a:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800370c:	9b02      	ldr	r3, [sp, #8]
 800370e:	0799      	lsls	r1, r3, #30
 8003710:	d509      	bpl.n	8003726 <HAL_HCD_IRQHandler+0xda>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003712:	9b02      	ldr	r3, [sp, #8]
 8003714:	07da      	lsls	r2, r3, #31
 8003716:	d502      	bpl.n	800371e <HAL_HCD_IRQHandler+0xd2>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003718:	4620      	mov	r0, r4
 800371a:	f7ff ff92 	bl	8003642 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800371e:	9b03      	ldr	r3, [sp, #12]
 8003720:	f043 0302 	orr.w	r3, r3, #2
 8003724:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003726:	9b02      	ldr	r3, [sp, #8]
 8003728:	071b      	lsls	r3, r3, #28
 800372a:	d518      	bpl.n	800375e <HAL_HCD_IRQHandler+0x112>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800372c:	9b03      	ldr	r3, [sp, #12]
 800372e:	f043 0308 	orr.w	r3, r3, #8
 8003732:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003734:	9b02      	ldr	r3, [sp, #8]
 8003736:	075f      	lsls	r7, r3, #29
 8003738:	f140 8090 	bpl.w	800385c <HAL_HCD_IRQHandler+0x210>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800373c:	69a1      	ldr	r1, [r4, #24]
 800373e:	2902      	cmp	r1, #2
 8003740:	f040 8084 	bne.w	800384c <HAL_HCD_IRQHandler+0x200>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003744:	9b02      	ldr	r3, [sp, #8]
 8003746:	6820      	ldr	r0, [r4, #0]
 8003748:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800374c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003750:	bf18      	it	ne
 8003752:	2101      	movne	r1, #1
 8003754:	f001 fe25 	bl	80053a2 <USB_InitFSLSPClkSel>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003758:	4620      	mov	r0, r4
 800375a:	f7ff ff74 	bl	8003646 <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800375e:	9b02      	ldr	r3, [sp, #8]
 8003760:	069e      	lsls	r6, r3, #26
 8003762:	d503      	bpl.n	800376c <HAL_HCD_IRQHandler+0x120>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003764:	9b03      	ldr	r3, [sp, #12]
 8003766:	f043 0320 	orr.w	r3, r3, #32
 800376a:	9303      	str	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800376c:	9b03      	ldr	r3, [sp, #12]
 800376e:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003772:	6820      	ldr	r0, [r4, #0]
 8003774:	f001 fe0d 	bl	8005392 <USB_ReadInterrupts>
 8003778:	0705      	lsls	r5, r0, #28
 800377a:	d505      	bpl.n	8003788 <HAL_HCD_IRQHandler+0x13c>
      HAL_HCD_SOF_Callback(hhcd);
 800377c:	4620      	mov	r0, r4
 800377e:	f7ff ff5f 	bl	8003640 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	2208      	movs	r2, #8
 8003786:	615a      	str	r2, [r3, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003788:	6820      	ldr	r0, [r4, #0]
 800378a:	f001 fe02 	bl	8005392 <USB_ReadInterrupts>
 800378e:	06c0      	lsls	r0, r0, #27
 8003790:	d542      	bpl.n	8003818 <HAL_HCD_IRQHandler+0x1cc>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003792:	6826      	ldr	r6, [r4, #0]
 8003794:	69b3      	ldr	r3, [r6, #24]
 8003796:	f023 0310 	bic.w	r3, r3, #16
 800379a:	61b3      	str	r3, [r6, #24]
  GrxstspReg = hhcd->Instance->GRXSTSP;
 800379c:	6a37      	ldr	r7, [r6, #32]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800379e:	f3c7 4343 	ubfx	r3, r7, #17, #4
  switch (pktsts)
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d133      	bne.n	800380e <HAL_HCD_IRQHandler+0x1c2>
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037a6:	f3c7 180a 	ubfx	r8, r7, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80037aa:	f1b8 0f00 	cmp.w	r8, #0
 80037ae:	d02e      	beq.n	800380e <HAL_HCD_IRQHandler+0x1c2>
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80037b0:	f007 070f 	and.w	r7, r7, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80037b4:	252c      	movs	r5, #44	; 0x2c
 80037b6:	fb05 4507 	mla	r5, r5, r7, r4
 80037ba:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80037bc:	b339      	cbz	r1, 800380e <HAL_HCD_IRQHandler+0x1c2>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80037be:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80037c0:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 80037c2:	4443      	add	r3, r8
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d84d      	bhi.n	8003864 <HAL_HCD_IRQHandler+0x218>
          (void)USB_ReadPacket(hhcd->Instance,
 80037c8:	4642      	mov	r2, r8
 80037ca:	4630      	mov	r0, r6
 80037cc:	f001 fdbe 	bl	800534c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80037d0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80037d2:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80037d6:	f8b5 1040 	ldrh.w	r1, [r5, #64]	; 0x40
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80037da:	4443      	add	r3, r8
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80037dc:	017a      	lsls	r2, r7, #5
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80037de:	4588      	cmp	r8, r1
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80037e0:	eb06 1747 	add.w	r7, r6, r7, lsl #5
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80037e4:	646b      	str	r3, [r5, #68]	; 0x44
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80037e6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80037e8:	4443      	add	r3, r8
 80037ea:	652b      	str	r3, [r5, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80037ec:	693b      	ldr	r3, [r7, #16]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80037ee:	d10e      	bne.n	800380e <HAL_HCD_IRQHandler+0x1c2>
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80037f0:	f3c3 43c9 	ubfx	r3, r3, #19, #10
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80037f4:	b15b      	cbz	r3, 800380e <HAL_HCD_IRQHandler+0x1c2>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80037f6:	5993      	ldr	r3, [r2, r6]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003800:	5193      	str	r3, [r2, r6]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003802:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 8003806:	f083 0301 	eor.w	r3, r3, #1
 800380a:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800380e:	6822      	ldr	r2, [r4, #0]
 8003810:	6993      	ldr	r3, [r2, #24]
 8003812:	f043 0310 	orr.w	r3, r3, #16
 8003816:	6193      	str	r3, [r2, #24]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003818:	6820      	ldr	r0, [r4, #0]
 800381a:	f001 fdba 	bl	8005392 <USB_ReadInterrupts>
 800381e:	0181      	lsls	r1, r0, #6
 8003820:	d511      	bpl.n	8003846 <HAL_HCD_IRQHandler+0x1fa>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003822:	6820      	ldr	r0, [r4, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003824:	f04f 0a00 	mov.w	sl, #0
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003828:	f001 fdd8 	bl	80053dc <USB_HC_ReadInterrupt>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800382c:	262c      	movs	r6, #44	; 0x2c
 800382e:	f509 63a0 	add.w	r3, r9, #1280	; 0x500
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003832:	2702      	movs	r7, #2
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003834:	9000      	str	r0, [sp, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003836:	9301      	str	r3, [sp, #4]
 8003838:	68a3      	ldr	r3, [r4, #8]
 800383a:	6820      	ldr	r0, [r4, #0]
 800383c:	4553      	cmp	r3, sl
 800383e:	d815      	bhi.n	800386c <HAL_HCD_IRQHandler+0x220>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003840:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003844:	6143      	str	r3, [r0, #20]
}
 8003846:	b005      	add	sp, #20
 8003848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800384c:	68e3      	ldr	r3, [r4, #12]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d182      	bne.n	8003758 <HAL_HCD_IRQHandler+0x10c>
          USBx_HOST->HFIR = 60000U;
 8003852:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003856:	f8c5 2404 	str.w	r2, [r5, #1028]	; 0x404
 800385a:	e77d      	b.n	8003758 <HAL_HCD_IRQHandler+0x10c>
      HAL_HCD_PortDisabled_Callback(hhcd);
 800385c:	4620      	mov	r0, r4
 800385e:	f7ff fef3 	bl	8003648 <HAL_HCD_PortDisabled_Callback>
 8003862:	e77c      	b.n	800375e <HAL_HCD_IRQHandler+0x112>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003864:	2304      	movs	r3, #4
 8003866:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
 800386a:	e7d0      	b.n	800380e <HAL_HCD_IRQHandler+0x1c2>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800386c:	9a00      	ldr	r2, [sp, #0]
 800386e:	f00a 030f 	and.w	r3, sl, #15
 8003872:	fa22 f303 	lsr.w	r3, r2, r3
 8003876:	07da      	lsls	r2, r3, #31
 8003878:	f140 8093 	bpl.w	80039a2 <HAL_HCD_IRQHandler+0x356>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800387c:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8003880:	9a01      	ldr	r2, [sp, #4]
 8003882:	fa5f f58a 	uxtb.w	r5, sl
 8003886:	f500 69a0 	add.w	r9, r0, #1280	; 0x500
 800388a:	58d2      	ldr	r2, [r2, r3]
 800388c:	eb09 1b45 	add.w	fp, r9, r5, lsl #5
 8003890:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8003894:	ea4f 1845 	mov.w	r8, r5, lsl #5
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003898:	f8db 2008 	ldr.w	r2, [fp, #8]
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800389c:	f000 80f6 	beq.w	8003a8c <HAL_HCD_IRQHandler+0x440>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80038a0:	0753      	lsls	r3, r2, #29
 80038a2:	d506      	bpl.n	80038b2 <HAL_HCD_IRQHandler+0x266>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80038a4:	2204      	movs	r2, #4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80038a6:	f8cb 2008 	str.w	r2, [fp, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80038aa:	2106      	movs	r1, #6
 80038ac:	fb06 4205 	mla	r2, r6, r5, r4
 80038b0:	e00a      	b.n	80038c8 <HAL_HCD_IRQHandler+0x27c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80038b2:	f8db 2008 	ldr.w	r2, [fp, #8]
 80038b6:	05d1      	lsls	r1, r2, #23
 80038b8:	d50c      	bpl.n	80038d4 <HAL_HCD_IRQHandler+0x288>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80038ba:	f44f 7280 	mov.w	r2, #256	; 0x100
    hhcd->hc[ch_num].state = HC_BBLERR;
 80038be:	2107      	movs	r1, #7
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80038c0:	f8cb 2008 	str.w	r2, [fp, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80038c4:	fb06 4205 	mla	r2, r6, r5, r4
    hhcd->hc[ch_num].state = HC_XACTERR;
 80038c8:	f882 1061 	strb.w	r1, [r2, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038cc:	4629      	mov	r1, r5
 80038ce:	f001 fd8a 	bl	80053e6 <USB_HC_Halt>
 80038d2:	e006      	b.n	80038e2 <HAL_HCD_IRQHandler+0x296>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80038d4:	f8db 2008 	ldr.w	r2, [fp, #8]
 80038d8:	0692      	lsls	r2, r2, #26
 80038da:	d50f      	bpl.n	80038fc <HAL_HCD_IRQHandler+0x2b0>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80038dc:	2220      	movs	r2, #32
 80038de:	f8cb 2008 	str.w	r2, [fp, #8]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80038e2:	f8db 2008 	ldr.w	r2, [fp, #8]
 80038e6:	0593      	lsls	r3, r2, #22
 80038e8:	d525      	bpl.n	8003936 <HAL_HCD_IRQHandler+0x2ea>
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038ea:	4629      	mov	r1, r5
 80038ec:	6820      	ldr	r0, [r4, #0]
 80038ee:	f001 fd7a 	bl	80053e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80038f2:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80038f6:	f8cb 2008 	str.w	r2, [fp, #8]
 80038fa:	e052      	b.n	80039a2 <HAL_HCD_IRQHandler+0x356>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80038fc:	f8db 2008 	ldr.w	r2, [fp, #8]
 8003900:	0713      	lsls	r3, r2, #28
 8003902:	d506      	bpl.n	8003912 <HAL_HCD_IRQHandler+0x2c6>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003904:	2208      	movs	r2, #8
    hhcd->hc[ch_num].state = HC_STALL;
 8003906:	2105      	movs	r1, #5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003908:	f8cb 2008 	str.w	r2, [fp, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800390c:	fb06 4205 	mla	r2, r6, r5, r4
 8003910:	e7da      	b.n	80038c8 <HAL_HCD_IRQHandler+0x27c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003912:	f8db 2008 	ldr.w	r2, [fp, #8]
 8003916:	0551      	lsls	r1, r2, #21
 8003918:	d507      	bpl.n	800392a <HAL_HCD_IRQHandler+0x2de>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800391a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800391e:	2108      	movs	r1, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003920:	f8cb 2008 	str.w	r2, [fp, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003924:	fb06 4205 	mla	r2, r6, r5, r4
 8003928:	e7ce      	b.n	80038c8 <HAL_HCD_IRQHandler+0x27c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800392a:	f8db 2008 	ldr.w	r2, [fp, #8]
 800392e:	0612      	lsls	r2, r2, #24
 8003930:	d5d7      	bpl.n	80038e2 <HAL_HCD_IRQHandler+0x296>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003932:	2280      	movs	r2, #128	; 0x80
 8003934:	e7b7      	b.n	80038a6 <HAL_HCD_IRQHandler+0x25a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003936:	f8db 2008 	ldr.w	r2, [fp, #8]
 800393a:	07d0      	lsls	r0, r2, #31
 800393c:	d54f      	bpl.n	80039de <HAL_HCD_IRQHandler+0x392>
    if (hhcd->Init.dma_enable != 0U)
 800393e:	6922      	ldr	r2, [r4, #16]
 8003940:	b142      	cbz	r2, 8003954 <HAL_HCD_IRQHandler+0x308>
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003942:	f8db 1010 	ldr.w	r1, [fp, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003946:	fb06 4005 	mla	r0, r6, r5, r4
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800394a:	f3c1 0112 	ubfx	r1, r1, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800394e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003950:	1a52      	subs	r2, r2, r1
 8003952:	6502      	str	r2, [r0, #80]	; 0x50
    hhcd->hc[ch_num].state = HC_XFRC;
 8003954:	fb06 4105 	mla	r1, r6, r5, r4
 8003958:	2001      	movs	r0, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 800395a:	2200      	movs	r2, #0
    hhcd->hc[ch_num].state = HC_XFRC;
 800395c:	f881 0061 	strb.w	r0, [r1, #97]	; 0x61
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003960:	65ca      	str	r2, [r1, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003962:	f8cb 0008 	str.w	r0, [fp, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003966:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
 800396a:	f012 0ffd 	tst.w	r2, #253	; 0xfd
 800396e:	d11b      	bne.n	80039a8 <HAL_HCD_IRQHandler+0x35c>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003970:	4629      	mov	r1, r5
 8003972:	6820      	ldr	r0, [r4, #0]
 8003974:	f001 fd37 	bl	80053e6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003978:	2210      	movs	r2, #16
 800397a:	f8cb 2008 	str.w	r2, [fp, #8]
    if (hhcd->Init.dma_enable == 1U)
 800397e:	6923      	ldr	r3, [r4, #16]
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003980:	fb06 4505 	mla	r5, r6, r5, r4
    if (hhcd->Init.dma_enable == 1U)
 8003984:	2b01      	cmp	r3, #1
 8003986:	d106      	bne.n	8003996 <HAL_HCD_IRQHandler+0x34a>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003988:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
 800398c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800398e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003992:	07d9      	lsls	r1, r3, #31
 8003994:	d505      	bpl.n	80039a2 <HAL_HCD_IRQHandler+0x356>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003996:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 800399a:	f083 0301 	eor.w	r3, r3, #1
 800399e:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80039a2:	f10a 0a01 	add.w	sl, sl, #1
 80039a6:	e747      	b.n	8003838 <HAL_HCD_IRQHandler+0x1ec>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80039a8:	2a03      	cmp	r2, #3
 80039aa:	d10d      	bne.n	80039c8 <HAL_HCD_IRQHandler+0x37c>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80039ac:	f858 3009 	ldr.w	r3, [r8, r9]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80039b0:	4602      	mov	r2, r0
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80039b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039b6:	f848 3009 	str.w	r3, [r8, r9]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80039ba:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80039be:	4629      	mov	r1, r5
 80039c0:	4620      	mov	r0, r4
 80039c2:	f7ff fe42 	bl	800364a <HAL_HCD_HC_NotifyURBChange_Callback>
 80039c6:	e7da      	b.n	800397e <HAL_HCD_IRQHandler+0x332>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80039c8:	2a01      	cmp	r2, #1
 80039ca:	d1d8      	bne.n	800397e <HAL_HCD_IRQHandler+0x332>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80039cc:	f891 3054 	ldrb.w	r3, [r1, #84]	; 0x54
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80039d0:	f881 2060 	strb.w	r2, [r1, #96]	; 0x60
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80039d4:	f083 0301 	eor.w	r3, r3, #1
 80039d8:	f881 3054 	strb.w	r3, [r1, #84]	; 0x54
 80039dc:	e7ef      	b.n	80039be <HAL_HCD_IRQHandler+0x372>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80039de:	f8db 3008 	ldr.w	r3, [fp, #8]
 80039e2:	f013 0302 	ands.w	r3, r3, #2
 80039e6:	d035      	beq.n	8003a54 <HAL_HCD_IRQHandler+0x408>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80039e8:	fb06 4105 	mla	r1, r6, r5, r4
 80039ec:	f891 2061 	ldrb.w	r2, [r1, #97]	; 0x61
 80039f0:	2a01      	cmp	r2, #1
 80039f2:	d10c      	bne.n	8003a0e <HAL_HCD_IRQHandler+0x3c2>
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039f4:	f881 2060 	strb.w	r2, [r1, #96]	; 0x60
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80039f8:	fb06 4305 	mla	r3, r6, r5, r4
 80039fc:	4629      	mov	r1, r5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80039fe:	f8cb 7008 	str.w	r7, [fp, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a02:	4620      	mov	r0, r4
 8003a04:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8003a08:	f7ff fe1f 	bl	800364a <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a0c:	e7c9      	b.n	80039a2 <HAL_HCD_IRQHandler+0x356>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003a0e:	2a05      	cmp	r2, #5
 8003a10:	d0f0      	beq.n	80039f4 <HAL_HCD_IRQHandler+0x3a8>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a12:	2a06      	cmp	r2, #6
 8003a14:	d001      	beq.n	8003a1a <HAL_HCD_IRQHandler+0x3ce>
 8003a16:	2a08      	cmp	r2, #8
 8003a18:	d108      	bne.n	8003a2c <HAL_HCD_IRQHandler+0x3e0>
      hhcd->hc[ch_num].ErrCnt++;
 8003a1a:	fb06 4105 	mla	r1, r6, r5, r4
 8003a1e:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 8003a20:	3201      	adds	r2, #1
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a22:	2a02      	cmp	r2, #2
      hhcd->hc[ch_num].ErrCnt++;
 8003a24:	65ca      	str	r2, [r1, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a26:	d903      	bls.n	8003a30 <HAL_HCD_IRQHandler+0x3e4>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a28:	2200      	movs	r2, #0
 8003a2a:	e010      	b.n	8003a4e <HAL_HCD_IRQHandler+0x402>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003a2c:	2a03      	cmp	r2, #3
 8003a2e:	d10a      	bne.n	8003a46 <HAL_HCD_IRQHandler+0x3fa>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a30:	f881 7060 	strb.w	r7, [r1, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a34:	f858 2009 	ldr.w	r2, [r8, r9]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a38:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a3c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a40:	f848 2009 	str.w	r2, [r8, r9]
 8003a44:	e7d8      	b.n	80039f8 <HAL_HCD_IRQHandler+0x3ac>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003a46:	2a07      	cmp	r2, #7
 8003a48:	d1d6      	bne.n	80039f8 <HAL_HCD_IRQHandler+0x3ac>
      hhcd->hc[ch_num].ErrCnt++;
 8003a4a:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 8003a4c:	3201      	adds	r2, #1
 8003a4e:	65ca      	str	r2, [r1, #92]	; 0x5c
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a50:	2204      	movs	r2, #4
 8003a52:	e7cf      	b.n	80039f4 <HAL_HCD_IRQHandler+0x3a8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003a54:	f8db 2008 	ldr.w	r2, [fp, #8]
 8003a58:	06d2      	lsls	r2, r2, #27
 8003a5a:	d5a2      	bpl.n	80039a2 <HAL_HCD_IRQHandler+0x356>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003a5c:	fb06 4105 	mla	r1, r6, r5, r4
 8003a60:	6820      	ldr	r0, [r4, #0]
 8003a62:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
 8003a66:	2a03      	cmp	r2, #3
 8003a68:	d105      	bne.n	8003a76 <HAL_HCD_IRQHandler+0x42a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003a6a:	65cb      	str	r3, [r1, #92]	; 0x5c
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a6c:	4629      	mov	r1, r5
 8003a6e:	f001 fcba 	bl	80053e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a72:	2210      	movs	r2, #16
 8003a74:	e73f      	b.n	80038f6 <HAL_HCD_IRQHandler+0x2aa>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003a76:	f012 02fd 	ands.w	r2, r2, #253	; 0xfd
 8003a7a:	d1fa      	bne.n	8003a72 <HAL_HCD_IRQHandler+0x426>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003a7c:	65ca      	str	r2, [r1, #92]	; 0x5c
      if (hhcd->Init.dma_enable == 0U)
 8003a7e:	6922      	ldr	r2, [r4, #16]
 8003a80:	2a00      	cmp	r2, #0
 8003a82:	d1f6      	bne.n	8003a72 <HAL_HCD_IRQHandler+0x426>
        hhcd->hc[ch_num].state = HC_NAK;
 8003a84:	2203      	movs	r2, #3
 8003a86:	f881 2061 	strb.w	r2, [r1, #97]	; 0x61
 8003a8a:	e7ef      	b.n	8003a6c <HAL_HCD_IRQHandler+0x420>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003a8c:	f012 0204 	ands.w	r2, r2, #4
 8003a90:	d008      	beq.n	8003aa4 <HAL_HCD_IRQHandler+0x458>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003a92:	2204      	movs	r2, #4
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003a94:	fb06 4305 	mla	r3, r6, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003a98:	f8cb 2008 	str.w	r2, [fp, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003a9c:	2206      	movs	r2, #6
    hhcd->hc[ch_num].state = HC_STALL;
 8003a9e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8003aa2:	e011      	b.n	8003ac8 <HAL_HCD_IRQHandler+0x47c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003aa4:	f8db 1008 	ldr.w	r1, [fp, #8]
 8003aa8:	068b      	lsls	r3, r1, #26
 8003aaa:	d511      	bpl.n	8003ad0 <HAL_HCD_IRQHandler+0x484>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003aac:	2120      	movs	r1, #32
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003aae:	fb06 4305 	mla	r3, r6, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003ab2:	f8cb 1008 	str.w	r1, [fp, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003ab6:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
 8003aba:	2901      	cmp	r1, #1
 8003abc:	f47f af71 	bne.w	80039a2 <HAL_HCD_IRQHandler+0x356>
      hhcd->hc[ch_num].do_ping = 0U;
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ac4:	f883 7060 	strb.w	r7, [r3, #96]	; 0x60
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ac8:	4629      	mov	r1, r5
 8003aca:	f001 fc8c 	bl	80053e6 <USB_HC_Halt>
 8003ace:	e768      	b.n	80039a2 <HAL_HCD_IRQHandler+0x356>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003ad0:	f8db 1008 	ldr.w	r1, [fp, #8]
 8003ad4:	f411 7100 	ands.w	r1, r1, #512	; 0x200
 8003ad8:	d004      	beq.n	8003ae4 <HAL_HCD_IRQHandler+0x498>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ade:	f8cb 2008 	str.w	r2, [fp, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ae2:	e7f1      	b.n	8003ac8 <HAL_HCD_IRQHandler+0x47c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003ae4:	f8db 3008 	ldr.w	r3, [fp, #8]
 8003ae8:	f013 0301 	ands.w	r3, r3, #1
 8003aec:	d012      	beq.n	8003b14 <HAL_HCD_IRQHandler+0x4c8>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003aee:	fb06 4205 	mla	r2, r6, r5, r4
 8003af2:	65d1      	str	r1, [r2, #92]	; 0x5c
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003af4:	f8db 1008 	ldr.w	r1, [fp, #8]
 8003af8:	0649      	lsls	r1, r1, #25
 8003afa:	d505      	bpl.n	8003b08 <HAL_HCD_IRQHandler+0x4bc>
      hhcd->hc[ch_num].do_ping = 1U;
 8003afc:	2101      	movs	r1, #1
 8003afe:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003b02:	2240      	movs	r2, #64	; 0x40
 8003b04:	f8cb 2008 	str.w	r2, [fp, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003b08:	2201      	movs	r2, #1
    hhcd->hc[ch_num].state = HC_XFRC;
 8003b0a:	fb06 4305 	mla	r3, r6, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003b0e:	f8cb 2008 	str.w	r2, [fp, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003b12:	e7c4      	b.n	8003a9e <HAL_HCD_IRQHandler+0x452>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003b14:	f8db 2008 	ldr.w	r2, [fp, #8]
 8003b18:	0652      	lsls	r2, r2, #25
 8003b1a:	d50d      	bpl.n	8003b38 <HAL_HCD_IRQHandler+0x4ec>
    hhcd->hc[ch_num].state = HC_NYET;
 8003b1c:	fb06 4205 	mla	r2, r6, r5, r4
 8003b20:	2104      	movs	r1, #4
 8003b22:	f882 1061 	strb.w	r1, [r2, #97]	; 0x61
    hhcd->hc[ch_num].do_ping = 1U;
 8003b26:	2101      	movs	r1, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b28:	65d3      	str	r3, [r2, #92]	; 0x5c
    hhcd->hc[ch_num].do_ping = 1U;
 8003b2a:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b2e:	4629      	mov	r1, r5
 8003b30:	f001 fc59 	bl	80053e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003b34:	2240      	movs	r2, #64	; 0x40
 8003b36:	e6de      	b.n	80038f6 <HAL_HCD_IRQHandler+0x2aa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003b38:	f8db 2008 	ldr.w	r2, [fp, #8]
 8003b3c:	0711      	lsls	r1, r2, #28
 8003b3e:	d506      	bpl.n	8003b4e <HAL_HCD_IRQHandler+0x502>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003b40:	2208      	movs	r2, #8
    hhcd->hc[ch_num].state = HC_STALL;
 8003b42:	fb06 4305 	mla	r3, r6, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003b46:	f8cb 2008 	str.w	r2, [fp, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003b4a:	2205      	movs	r2, #5
 8003b4c:	e7a7      	b.n	8003a9e <HAL_HCD_IRQHandler+0x452>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003b4e:	f8db 2008 	ldr.w	r2, [fp, #8]
 8003b52:	06d2      	lsls	r2, r2, #27
 8003b54:	d514      	bpl.n	8003b80 <HAL_HCD_IRQHandler+0x534>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b56:	fb06 4205 	mla	r2, r6, r5, r4
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	65d1      	str	r1, [r2, #92]	; 0x5c
    hhcd->hc[ch_num].state = HC_NAK;
 8003b5e:	2103      	movs	r1, #3
 8003b60:	f882 1061 	strb.w	r1, [r2, #97]	; 0x61
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003b64:	f892 103d 	ldrb.w	r1, [r2, #61]	; 0x3d
 8003b68:	2900      	cmp	r1, #0
 8003b6a:	f47f af7f 	bne.w	8003a6c <HAL_HCD_IRQHandler+0x420>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003b6e:	f892 103c 	ldrb.w	r1, [r2, #60]	; 0x3c
 8003b72:	2900      	cmp	r1, #0
 8003b74:	f47f af7a 	bne.w	8003a6c <HAL_HCD_IRQHandler+0x420>
        hhcd->hc[ch_num].do_ping = 1U;
 8003b78:	2101      	movs	r1, #1
 8003b7a:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b7e:	e775      	b.n	8003a6c <HAL_HCD_IRQHandler+0x420>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003b80:	f8db 2008 	ldr.w	r2, [fp, #8]
 8003b84:	0613      	lsls	r3, r2, #24
 8003b86:	d51f      	bpl.n	8003bc8 <HAL_HCD_IRQHandler+0x57c>
    if (hhcd->Init.dma_enable == 0U)
 8003b88:	6922      	ldr	r2, [r4, #16]
 8003b8a:	b94a      	cbnz	r2, 8003ba0 <HAL_HCD_IRQHandler+0x554>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003b8c:	2106      	movs	r1, #6
 8003b8e:	fb06 4205 	mla	r2, r6, r5, r4
 8003b92:	f882 1061 	strb.w	r1, [r2, #97]	; 0x61
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b96:	4629      	mov	r1, r5
 8003b98:	f001 fc25 	bl	80053e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003b9c:	2280      	movs	r2, #128	; 0x80
 8003b9e:	e6aa      	b.n	80038f6 <HAL_HCD_IRQHandler+0x2aa>
      hhcd->hc[ch_num].ErrCnt++;
 8003ba0:	fb06 4105 	mla	r1, r6, r5, r4
 8003ba4:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 8003ba6:	3201      	adds	r2, #1
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003ba8:	2a02      	cmp	r2, #2
      hhcd->hc[ch_num].ErrCnt++;
 8003baa:	65ca      	str	r2, [r1, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003bac:	d909      	bls.n	8003bc2 <HAL_HCD_IRQHandler+0x576>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003bae:	2200      	movs	r2, #0
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003bb0:	4620      	mov	r0, r4
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003bb2:	65ca      	str	r2, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003bb4:	2204      	movs	r2, #4
 8003bb6:	f881 2060 	strb.w	r2, [r1, #96]	; 0x60
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003bba:	4629      	mov	r1, r5
 8003bbc:	f7ff fd45 	bl	800364a <HAL_HCD_HC_NotifyURBChange_Callback>
 8003bc0:	e7ec      	b.n	8003b9c <HAL_HCD_IRQHandler+0x550>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003bc2:	f881 7060 	strb.w	r7, [r1, #96]	; 0x60
 8003bc6:	e7e9      	b.n	8003b9c <HAL_HCD_IRQHandler+0x550>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003bc8:	f8db 2008 	ldr.w	r2, [fp, #8]
 8003bcc:	0551      	lsls	r1, r2, #21
 8003bce:	d50a      	bpl.n	8003be6 <HAL_HCD_IRQHandler+0x59a>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003bd0:	fb06 4205 	mla	r2, r6, r5, r4
 8003bd4:	2108      	movs	r1, #8
 8003bd6:	f882 1061 	strb.w	r1, [r2, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bda:	4629      	mov	r1, r5
 8003bdc:	f001 fc03 	bl	80053e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003be0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003be4:	e687      	b.n	80038f6 <HAL_HCD_IRQHandler+0x2aa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003be6:	f8db 2008 	ldr.w	r2, [fp, #8]
 8003bea:	0792      	lsls	r2, r2, #30
 8003bec:	f57f aed9 	bpl.w	80039a2 <HAL_HCD_IRQHandler+0x356>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003bf0:	fb06 4205 	mla	r2, r6, r5, r4
 8003bf4:	f892 1061 	ldrb.w	r1, [r2, #97]	; 0x61
 8003bf8:	2901      	cmp	r1, #1
 8003bfa:	d121      	bne.n	8003c40 <HAL_HCD_IRQHandler+0x5f4>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003bfc:	f882 1060 	strb.w	r1, [r2, #96]	; 0x60
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003c00:	f892 103f 	ldrb.w	r1, [r2, #63]	; 0x3f
 8003c04:	3902      	subs	r1, #2
 8003c06:	2901      	cmp	r1, #1
 8003c08:	f63f aef6 	bhi.w	80039f8 <HAL_HCD_IRQHandler+0x3ac>
        if (hhcd->Init.dma_enable == 0U)
 8003c0c:	6921      	ldr	r1, [r4, #16]
 8003c0e:	b931      	cbnz	r1, 8003c1e <HAL_HCD_IRQHandler+0x5d2>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003c10:	f892 1055 	ldrb.w	r1, [r2, #85]	; 0x55
 8003c14:	f081 0101 	eor.w	r1, r1, #1
 8003c18:	f882 1055 	strb.w	r1, [r2, #85]	; 0x55
 8003c1c:	e6ec      	b.n	80039f8 <HAL_HCD_IRQHandler+0x3ac>
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003c1e:	2901      	cmp	r1, #1
 8003c20:	f47f aeea 	bne.w	80039f8 <HAL_HCD_IRQHandler+0x3ac>
 8003c24:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8003c26:	2900      	cmp	r1, #0
 8003c28:	f43f aee6 	beq.w	80039f8 <HAL_HCD_IRQHandler+0x3ac>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003c2c:	f8b2 0040 	ldrh.w	r0, [r2, #64]	; 0x40
 8003c30:	3901      	subs	r1, #1
 8003c32:	4401      	add	r1, r0
 8003c34:	fbb1 f1f0 	udiv	r1, r1, r0
          if ((num_packets & 1U) != 0U)
 8003c38:	07cb      	lsls	r3, r1, #31
 8003c3a:	f57f aedd 	bpl.w	80039f8 <HAL_HCD_IRQHandler+0x3ac>
 8003c3e:	e7e7      	b.n	8003c10 <HAL_HCD_IRQHandler+0x5c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c40:	2903      	cmp	r1, #3
 8003c42:	d102      	bne.n	8003c4a <HAL_HCD_IRQHandler+0x5fe>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003c44:	f882 7060 	strb.w	r7, [r2, #96]	; 0x60
 8003c48:	e6d6      	b.n	80039f8 <HAL_HCD_IRQHandler+0x3ac>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003c4a:	2904      	cmp	r1, #4
 8003c4c:	d0fa      	beq.n	8003c44 <HAL_HCD_IRQHandler+0x5f8>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003c4e:	2905      	cmp	r1, #5
 8003c50:	d102      	bne.n	8003c58 <HAL_HCD_IRQHandler+0x60c>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003c52:	f882 1060 	strb.w	r1, [r2, #96]	; 0x60
 8003c56:	e6cf      	b.n	80039f8 <HAL_HCD_IRQHandler+0x3ac>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c58:	2906      	cmp	r1, #6
 8003c5a:	f43f aede 	beq.w	8003a1a <HAL_HCD_IRQHandler+0x3ce>
 8003c5e:	2908      	cmp	r1, #8
 8003c60:	f47f aeca 	bne.w	80039f8 <HAL_HCD_IRQHandler+0x3ac>
 8003c64:	e6d9      	b.n	8003a1a <HAL_HCD_IRQHandler+0x3ce>

08003c66 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c66:	6803      	ldr	r3, [r0, #0]
 8003c68:	699a      	ldr	r2, [r3, #24]
 8003c6a:	0791      	lsls	r1, r2, #30
 8003c6c:	d501      	bpl.n	8003c72 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c6e:	2200      	movs	r2, #0
 8003c70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c72:	699a      	ldr	r2, [r3, #24]
 8003c74:	07d2      	lsls	r2, r2, #31
 8003c76:	d403      	bmi.n	8003c80 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c78:	699a      	ldr	r2, [r3, #24]
 8003c7a:	f042 0201 	orr.w	r2, r2, #1
 8003c7e:	619a      	str	r2, [r3, #24]
  }
}
 8003c80:	4770      	bx	lr
	...

08003c84 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003c84:	b530      	push	{r4, r5, lr}
 8003c86:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c88:	f3c1 0109 	ubfx	r1, r1, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c8c:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c8e:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c90:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c96:	4a05      	ldr	r2, [pc, #20]	; (8003cac <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c98:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c9a:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ca2:	ea20 0002 	bic.w	r0, r0, r2
 8003ca6:	4303      	orrs	r3, r0
 8003ca8:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003caa:	bd30      	pop	{r4, r5, pc}
 8003cac:	03ff63ff 	.word	0x03ff63ff

08003cb0 <I2C_IsErrorOccurred>:
{
 8003cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8003cb4:	6803      	ldr	r3, [r0, #0]
{
 8003cb6:	4604      	mov	r4, r0
 8003cb8:	4688      	mov	r8, r1
 8003cba:	4617      	mov	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8003cbc:	699d      	ldr	r5, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003cbe:	f015 0510 	ands.w	r5, r5, #16
 8003cc2:	d079      	beq.n	8003db8 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cc4:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8003cc6:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 8003cc8:	f04f 0920 	mov.w	r9, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ccc:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	699a      	ldr	r2, [r3, #24]
 8003cd2:	0695      	lsls	r5, r2, #26
 8003cd4:	d436      	bmi.n	8003d44 <I2C_IsErrorOccurred+0x94>
 8003cd6:	b10e      	cbz	r6, 8003cdc <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 8003cd8:	2504      	movs	r5, #4
 8003cda:	e039      	b.n	8003d50 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8003cdc:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003ce0:	d0f6      	beq.n	8003cd0 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ce2:	f7fe ff51 	bl	8002b88 <HAL_GetTick>
 8003ce6:	1bc0      	subs	r0, r0, r7
 8003ce8:	4540      	cmp	r0, r8
 8003cea:	d802      	bhi.n	8003cf2 <I2C_IsErrorOccurred+0x42>
 8003cec:	f1b8 0f00 	cmp.w	r8, #0
 8003cf0:	d1ed      	bne.n	8003cce <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8003cf6:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003cfa:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8003cfc:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003cfe:	0400      	lsls	r0, r0, #16
 8003d00:	d50a      	bpl.n	8003d18 <I2C_IsErrorOccurred+0x68>
 8003d02:	0449      	lsls	r1, r1, #17
 8003d04:	d408      	bmi.n	8003d18 <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 8003d06:	2a20      	cmp	r2, #32
 8003d08:	d006      	beq.n	8003d18 <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d10:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8003d12:	f7fe ff39 	bl	8002b88 <HAL_GetTick>
 8003d16:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d18:	6823      	ldr	r3, [r4, #0]
 8003d1a:	699d      	ldr	r5, [r3, #24]
 8003d1c:	f015 0520 	ands.w	r5, r5, #32
 8003d20:	d1d5      	bne.n	8003cce <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003d22:	f7fe ff31 	bl	8002b88 <HAL_GetTick>
 8003d26:	1bc0      	subs	r0, r0, r7
 8003d28:	2819      	cmp	r0, #25
 8003d2a:	d9f5      	bls.n	8003d18 <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
              status = HAL_ERROR;
 8003d2e:	2601      	movs	r6, #1
              __HAL_UNLOCK(hi2c);
 8003d30:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d34:	f043 0320 	orr.w	r3, r3, #32
 8003d38:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003d3a:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3e:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
              status = HAL_ERROR;
 8003d42:	e7e9      	b.n	8003d18 <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 8003d44:	2e00      	cmp	r6, #0
 8003d46:	d1c7      	bne.n	8003cd8 <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d48:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 8003d4a:	2504      	movs	r5, #4
    status = HAL_ERROR;
 8003d4c:	2601      	movs	r6, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d4e:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 8003d50:	6823      	ldr	r3, [r4, #0]
 8003d52:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d54:	05d0      	lsls	r0, r2, #23
 8003d56:	d505      	bpl.n	8003d64 <I2C_IsErrorOccurred+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d58:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8003d5c:	f045 0501 	orr.w	r5, r5, #1
    status = HAL_ERROR;
 8003d60:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d62:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d64:	0551      	lsls	r1, r2, #21
 8003d66:	d505      	bpl.n	8003d74 <I2C_IsErrorOccurred+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d68:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8003d6c:	f045 0508 	orr.w	r5, r5, #8
    status = HAL_ERROR;
 8003d70:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d72:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003d74:	0592      	lsls	r2, r2, #22
 8003d76:	d521      	bpl.n	8003dbc <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d78:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d7c:	f045 0502 	orr.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d80:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8003d82:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8003d84:	2601      	movs	r6, #1
    I2C_Flush_TXDR(hi2c);
 8003d86:	f7ff ff6e 	bl	8003c66 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003d8a:	6822      	ldr	r2, [r4, #0]
 8003d8c:	6853      	ldr	r3, [r2, #4]
 8003d8e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003d92:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003d96:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003d9a:	f023 0301 	bic.w	r3, r3, #1
 8003d9e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8003da0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003da2:	431d      	orrs	r5, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8003da4:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 8003da6:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003da8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dac:	2300      	movs	r3, #0
 8003dae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003db2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003db6:	e003      	b.n	8003dc0 <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 8003db8:	462e      	mov	r6, r5
 8003dba:	e7c9      	b.n	8003d50 <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 8003dbc:	2e00      	cmp	r6, #0
 8003dbe:	d1e0      	bne.n	8003d82 <I2C_IsErrorOccurred+0xd2>
}
 8003dc0:	4630      	mov	r0, r6
 8003dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003dc6 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003dc6:	b570      	push	{r4, r5, r6, lr}
 8003dc8:	4604      	mov	r4, r0
 8003dca:	460d      	mov	r5, r1
 8003dcc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003dce:	6823      	ldr	r3, [r4, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	079b      	lsls	r3, r3, #30
 8003dd4:	d501      	bpl.n	8003dda <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8003dd6:	2000      	movs	r0, #0
}
 8003dd8:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dda:	4632      	mov	r2, r6
 8003ddc:	4629      	mov	r1, r5
 8003dde:	4620      	mov	r0, r4
 8003de0:	f7ff ff66 	bl	8003cb0 <I2C_IsErrorOccurred>
 8003de4:	b9a0      	cbnz	r0, 8003e10 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8003de6:	1c6a      	adds	r2, r5, #1
 8003de8:	d0f1      	beq.n	8003dce <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dea:	f7fe fecd 	bl	8002b88 <HAL_GetTick>
 8003dee:	1b80      	subs	r0, r0, r6
 8003df0:	42a8      	cmp	r0, r5
 8003df2:	d801      	bhi.n	8003df8 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8003df4:	2d00      	cmp	r5, #0
 8003df6:	d1ea      	bne.n	8003dce <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003df8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003dfa:	f043 0320 	orr.w	r3, r3, #32
 8003dfe:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e00:	2320      	movs	r3, #32
 8003e02:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e06:	2300      	movs	r3, #0
 8003e08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003e0c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003e10:	2001      	movs	r0, #1
 8003e12:	e7e1      	b.n	8003dd8 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08003e14 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003e14:	b570      	push	{r4, r5, r6, lr}
 8003e16:	4604      	mov	r4, r0
 8003e18:	460d      	mov	r5, r1
 8003e1a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e1c:	6823      	ldr	r3, [r4, #0]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	069b      	lsls	r3, r3, #26
 8003e22:	d501      	bpl.n	8003e28 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8003e24:	2000      	movs	r0, #0
}
 8003e26:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e28:	4632      	mov	r2, r6
 8003e2a:	4629      	mov	r1, r5
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	f7ff ff3f 	bl	8003cb0 <I2C_IsErrorOccurred>
 8003e32:	b990      	cbnz	r0, 8003e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e34:	f7fe fea8 	bl	8002b88 <HAL_GetTick>
 8003e38:	1b80      	subs	r0, r0, r6
 8003e3a:	42a8      	cmp	r0, r5
 8003e3c:	d801      	bhi.n	8003e42 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8003e3e:	2d00      	cmp	r5, #0
 8003e40:	d1ec      	bne.n	8003e1c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e42:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003e44:	f043 0320 	orr.w	r3, r3, #32
 8003e48:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e4a:	2320      	movs	r3, #32
 8003e4c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e50:	2300      	movs	r3, #0
 8003e52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003e56:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003e5a:	2001      	movs	r0, #1
 8003e5c:	e7e3      	b.n	8003e26 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08003e5e <I2C_WaitOnFlagUntilTimeout>:
{
 8003e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e62:	9f06      	ldr	r7, [sp, #24]
 8003e64:	4604      	mov	r4, r0
 8003e66:	4688      	mov	r8, r1
 8003e68:	4616      	mov	r6, r2
 8003e6a:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e6c:	6822      	ldr	r2, [r4, #0]
 8003e6e:	6993      	ldr	r3, [r2, #24]
 8003e70:	ea38 0303 	bics.w	r3, r8, r3
 8003e74:	bf0c      	ite	eq
 8003e76:	2301      	moveq	r3, #1
 8003e78:	2300      	movne	r3, #0
 8003e7a:	42b3      	cmp	r3, r6
 8003e7c:	d001      	beq.n	8003e82 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8003e7e:	2000      	movs	r0, #0
 8003e80:	e015      	b.n	8003eae <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003e82:	1c6b      	adds	r3, r5, #1
 8003e84:	d0f3      	beq.n	8003e6e <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e86:	f7fe fe7f 	bl	8002b88 <HAL_GetTick>
 8003e8a:	1bc0      	subs	r0, r0, r7
 8003e8c:	42a8      	cmp	r0, r5
 8003e8e:	d801      	bhi.n	8003e94 <I2C_WaitOnFlagUntilTimeout+0x36>
 8003e90:	2d00      	cmp	r5, #0
 8003e92:	d1eb      	bne.n	8003e6c <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e94:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003e96:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e98:	f043 0320 	orr.w	r3, r3, #32
 8003e9c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e9e:	2320      	movs	r3, #32
 8003ea0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003eaa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8003eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003eb4 <I2C_RequestMemoryWrite>:
{
 8003eb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003eb8:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003eba:	4b18      	ldr	r3, [pc, #96]	; (8003f1c <I2C_RequestMemoryWrite+0x68>)
{
 8003ebc:	4605      	mov	r5, r0
 8003ebe:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	b2f2      	uxtb	r2, r6
 8003ec4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 8003ec8:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003ecc:	f7ff feda 	bl	8003c84 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ed0:	4628      	mov	r0, r5
 8003ed2:	4642      	mov	r2, r8
 8003ed4:	4639      	mov	r1, r7
 8003ed6:	f7ff ff76 	bl	8003dc6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003eda:	b118      	cbz	r0, 8003ee4 <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 8003edc:	2001      	movs	r0, #1
}
 8003ede:	b002      	add	sp, #8
 8003ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ee4:	2e01      	cmp	r6, #1
 8003ee6:	682b      	ldr	r3, [r5, #0]
 8003ee8:	d10d      	bne.n	8003f06 <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003eea:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003eec:	2200      	movs	r2, #0
 8003eee:	2180      	movs	r1, #128	; 0x80
 8003ef0:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ef2:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003ef4:	463b      	mov	r3, r7
 8003ef6:	f8cd 8000 	str.w	r8, [sp]
 8003efa:	f7ff ffb0 	bl	8003e5e <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8003efe:	3800      	subs	r0, #0
 8003f00:	bf18      	it	ne
 8003f02:	2001      	movne	r0, #1
 8003f04:	e7eb      	b.n	8003ede <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f06:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f08:	4639      	mov	r1, r7
 8003f0a:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f0c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f0e:	4642      	mov	r2, r8
 8003f10:	f7ff ff59 	bl	8003dc6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f14:	2800      	cmp	r0, #0
 8003f16:	d1e1      	bne.n	8003edc <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f18:	682b      	ldr	r3, [r5, #0]
 8003f1a:	e7e6      	b.n	8003eea <I2C_RequestMemoryWrite+0x36>
 8003f1c:	80002000 	.word	0x80002000

08003f20 <I2C_RequestMemoryRead>:
{
 8003f20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003f24:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003f26:	4b18      	ldr	r3, [pc, #96]	; (8003f88 <I2C_RequestMemoryRead+0x68>)
{
 8003f28:	4605      	mov	r5, r0
 8003f2a:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	b2f2      	uxtb	r2, r6
 8003f30:	2300      	movs	r3, #0
{
 8003f32:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003f36:	f7ff fea5 	bl	8003c84 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f3a:	4628      	mov	r0, r5
 8003f3c:	4642      	mov	r2, r8
 8003f3e:	4639      	mov	r1, r7
 8003f40:	f7ff ff41 	bl	8003dc6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f44:	b118      	cbz	r0, 8003f4e <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8003f46:	2001      	movs	r0, #1
}
 8003f48:	b002      	add	sp, #8
 8003f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f4e:	2e01      	cmp	r6, #1
 8003f50:	682b      	ldr	r3, [r5, #0]
 8003f52:	d10d      	bne.n	8003f70 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f54:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003f56:	2200      	movs	r2, #0
 8003f58:	2140      	movs	r1, #64	; 0x40
 8003f5a:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f5c:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003f5e:	463b      	mov	r3, r7
 8003f60:	f8cd 8000 	str.w	r8, [sp]
 8003f64:	f7ff ff7b 	bl	8003e5e <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8003f68:	3800      	subs	r0, #0
 8003f6a:	bf18      	it	ne
 8003f6c:	2001      	movne	r0, #1
 8003f6e:	e7eb      	b.n	8003f48 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f70:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f72:	4639      	mov	r1, r7
 8003f74:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f76:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f78:	4642      	mov	r2, r8
 8003f7a:	f7ff ff24 	bl	8003dc6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f7e:	2800      	cmp	r0, #0
 8003f80:	d1e1      	bne.n	8003f46 <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f82:	682b      	ldr	r3, [r5, #0]
 8003f84:	e7e6      	b.n	8003f54 <I2C_RequestMemoryRead+0x34>
 8003f86:	bf00      	nop
 8003f88:	80002000 	.word	0x80002000

08003f8c <HAL_I2C_Init>:
{
 8003f8c:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8003f8e:	4604      	mov	r4, r0
 8003f90:	2800      	cmp	r0, #0
 8003f92:	d04a      	beq.n	800402a <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f94:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003f98:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003f9c:	b91b      	cbnz	r3, 8003fa6 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8003f9e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003fa2:	f7fe fadb 	bl	800255c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fa6:	2324      	movs	r3, #36	; 0x24
 8003fa8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003fac:	6823      	ldr	r3, [r4, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	f022 0201 	bic.w	r2, r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003fb6:	6862      	ldr	r2, [r4, #4]
 8003fb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fbc:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fc4:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fc6:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8003fca:	2901      	cmp	r1, #1
 8003fcc:	d124      	bne.n	8004018 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003fce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fd2:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fd4:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fd6:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fd8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003fdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fe0:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fe8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fea:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8003fee:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ff0:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ff2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003ff6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ff8:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	f042 0201 	orr.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8004008:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800400a:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800400c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004010:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004012:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8004016:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004018:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800401c:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800401e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004020:	d1d8      	bne.n	8003fd4 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004022:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004026:	605a      	str	r2, [r3, #4]
 8004028:	e7d4      	b.n	8003fd4 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800402a:	2001      	movs	r0, #1
 800402c:	e7f3      	b.n	8004016 <HAL_I2C_Init+0x8a>

0800402e <HAL_I2C_DeInit>:
{
 800402e:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8004030:	4604      	mov	r4, r0
 8004032:	b198      	cbz	r0, 800405c <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8004034:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004036:	2324      	movs	r3, #36	; 0x24
 8004038:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800403c:	6813      	ldr	r3, [r2, #0]
 800403e:	f023 0301 	bic.w	r3, r3, #1
 8004042:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8004044:	f7fe faec 	bl	8002620 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004048:	2000      	movs	r0, #0
 800404a:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 800404c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8004050:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004054:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004056:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800405a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800405c:	2001      	movs	r0, #1
 800405e:	e7fc      	b.n	800405a <HAL_I2C_DeInit+0x2c>

08004060 <HAL_I2C_Mem_Write>:
{
 8004060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004064:	b085      	sub	sp, #20
 8004066:	469b      	mov	fp, r3
 8004068:	4604      	mov	r4, r0
 800406a:	460f      	mov	r7, r1
 800406c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8004070:	4692      	mov	sl, r2
 8004072:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8004076:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004078:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800407c:	2b20      	cmp	r3, #32
 800407e:	f040 80a3 	bne.w	80041c8 <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 8004082:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004084:	b10b      	cbz	r3, 800408a <HAL_I2C_Mem_Write+0x2a>
 8004086:	9b03      	ldr	r3, [sp, #12]
 8004088:	b933      	cbnz	r3, 8004098 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800408a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800408e:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8004090:	2001      	movs	r0, #1
}
 8004092:	b005      	add	sp, #20
 8004094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004098:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800409c:	2b01      	cmp	r3, #1
 800409e:	f000 8093 	beq.w	80041c8 <HAL_I2C_Mem_Write+0x168>
 80040a2:	2501      	movs	r5, #1
 80040a4:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80040a8:	f7fe fd6e 	bl	8002b88 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040ac:	2319      	movs	r3, #25
 80040ae:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80040b0:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040b2:	462a      	mov	r2, r5
 80040b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040b8:	4620      	mov	r0, r4
 80040ba:	f7ff fed0 	bl	8003e5e <I2C_WaitOnFlagUntilTimeout>
 80040be:	4680      	mov	r8, r0
 80040c0:	2800      	cmp	r0, #0
 80040c2:	d1e5      	bne.n	8004090 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040c4:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 80040c6:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040c8:	4652      	mov	r2, sl
 80040ca:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040d0:	2340      	movs	r3, #64	; 0x40
 80040d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80040d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040d8:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040da:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80040dc:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80040de:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040e0:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 80040e4:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040e6:	465b      	mov	r3, fp
 80040e8:	f7ff fee4 	bl	8003eb4 <I2C_RequestMemoryWrite>
 80040ec:	b110      	cbz	r0, 80040f4 <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 80040ee:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 80040f2:	e7cd      	b.n	8004090 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	2bff      	cmp	r3, #255	; 0xff
 80040fa:	d955      	bls.n	80041a8 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040fc:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80040fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004102:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004104:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004106:	4639      	mov	r1, r7
 8004108:	4620      	mov	r0, r4
 800410a:	f7ff fdbb 	bl	8003c84 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800410e:	4632      	mov	r2, r6
 8004110:	4649      	mov	r1, r9
 8004112:	4620      	mov	r0, r4
 8004114:	f7ff fe57 	bl	8003dc6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004118:	2800      	cmp	r0, #0
 800411a:	d1b9      	bne.n	8004090 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800411c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800411e:	6822      	ldr	r2, [r4, #0]
 8004120:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004124:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004126:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004128:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800412a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800412c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800412e:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8004130:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8004132:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8004134:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004136:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004138:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800413a:	b29b      	uxth	r3, r3
 800413c:	b1ab      	cbz	r3, 800416a <HAL_I2C_Mem_Write+0x10a>
 800413e:	b9a2      	cbnz	r2, 800416a <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004140:	464b      	mov	r3, r9
 8004142:	2180      	movs	r1, #128	; 0x80
 8004144:	4620      	mov	r0, r4
 8004146:	9600      	str	r6, [sp, #0]
 8004148:	f7ff fe89 	bl	8003e5e <I2C_WaitOnFlagUntilTimeout>
 800414c:	2800      	cmp	r0, #0
 800414e:	d19f      	bne.n	8004090 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004150:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004152:	b29b      	uxth	r3, r3
 8004154:	2bff      	cmp	r3, #255	; 0xff
 8004156:	d92f      	bls.n	80041b8 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004158:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800415a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800415e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004160:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004162:	4639      	mov	r1, r7
 8004164:	4620      	mov	r0, r4
 8004166:	f7ff fd8d 	bl	8003c84 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800416a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1cd      	bne.n	800410e <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004172:	4632      	mov	r2, r6
 8004174:	4649      	mov	r1, r9
 8004176:	4620      	mov	r0, r4
 8004178:	f7ff fe4c 	bl	8003e14 <I2C_WaitOnSTOPFlagUntilTimeout>
 800417c:	2800      	cmp	r0, #0
 800417e:	d187      	bne.n	8004090 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	2120      	movs	r1, #32
 8004184:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800418c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004190:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004194:	f022 0201 	bic.w	r2, r2, #1
 8004198:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800419a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800419e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041a2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80041a6:	e774      	b.n	8004092 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80041a8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80041aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041ae:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80041b0:	b292      	uxth	r2, r2
 80041b2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80041b4:	b2d2      	uxtb	r2, r2
 80041b6:	e7a6      	b.n	8004106 <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 80041b8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041be:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80041c0:	b292      	uxth	r2, r2
 80041c2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041c4:	b2d2      	uxtb	r2, r2
 80041c6:	e7cc      	b.n	8004162 <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 80041c8:	2002      	movs	r0, #2
 80041ca:	e762      	b.n	8004092 <HAL_I2C_Mem_Write+0x32>

080041cc <HAL_I2C_Mem_Read>:
{
 80041cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d0:	b085      	sub	sp, #20
 80041d2:	469b      	mov	fp, r3
 80041d4:	4604      	mov	r4, r0
 80041d6:	460f      	mov	r7, r1
 80041d8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80041dc:	4692      	mov	sl, r2
 80041de:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 80041e2:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80041e4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80041e8:	2b20      	cmp	r3, #32
 80041ea:	f040 80a7 	bne.w	800433c <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 80041ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041f0:	b10b      	cbz	r3, 80041f6 <HAL_I2C_Mem_Read+0x2a>
 80041f2:	9b03      	ldr	r3, [sp, #12]
 80041f4:	b933      	cbnz	r3, 8004204 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80041f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041fa:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80041fc:	2001      	movs	r0, #1
}
 80041fe:	b005      	add	sp, #20
 8004200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004204:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004208:	2b01      	cmp	r3, #1
 800420a:	f000 8097 	beq.w	800433c <HAL_I2C_Mem_Read+0x170>
 800420e:	2501      	movs	r5, #1
 8004210:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004214:	f7fe fcb8 	bl	8002b88 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004218:	2319      	movs	r3, #25
 800421a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800421c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800421e:	462a      	mov	r2, r5
 8004220:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004224:	4620      	mov	r0, r4
 8004226:	f7ff fe1a 	bl	8003e5e <I2C_WaitOnFlagUntilTimeout>
 800422a:	4680      	mov	r8, r0
 800422c:	2800      	cmp	r0, #0
 800422e:	d1e5      	bne.n	80041fc <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004230:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 8004232:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004234:	4652      	mov	r2, sl
 8004236:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004238:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800423c:	2340      	movs	r3, #64	; 0x40
 800423e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8004242:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004244:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004246:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8004248:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800424a:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800424c:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8004250:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004252:	465b      	mov	r3, fp
 8004254:	f7ff fe64 	bl	8003f20 <I2C_RequestMemoryRead>
 8004258:	b110      	cbz	r0, 8004260 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 800425a:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 800425e:	e7cd      	b.n	80041fc <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004260:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004262:	b29b      	uxth	r3, r3
 8004264:	2bff      	cmp	r3, #255	; 0xff
 8004266:	4b36      	ldr	r3, [pc, #216]	; (8004340 <HAL_I2C_Mem_Read+0x174>)
 8004268:	d958      	bls.n	800431c <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800426a:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004272:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004274:	4639      	mov	r1, r7
 8004276:	4620      	mov	r0, r4
 8004278:	f7ff fd04 	bl	8003c84 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800427c:	464b      	mov	r3, r9
 800427e:	2200      	movs	r2, #0
 8004280:	2104      	movs	r1, #4
 8004282:	4620      	mov	r0, r4
 8004284:	9600      	str	r6, [sp, #0]
 8004286:	f7ff fdea 	bl	8003e5e <I2C_WaitOnFlagUntilTimeout>
 800428a:	2800      	cmp	r0, #0
 800428c:	d1b6      	bne.n	80041fc <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800428e:	6823      	ldr	r3, [r4, #0]
 8004290:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004292:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004294:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004296:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004298:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800429a:	3301      	adds	r3, #1
      hi2c->XferSize--;
 800429c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800429e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80042a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80042a2:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80042a4:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80042a6:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	b1ab      	cbz	r3, 80042de <HAL_I2C_Mem_Read+0x112>
 80042b2:	b9a2      	cbnz	r2, 80042de <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042b4:	464b      	mov	r3, r9
 80042b6:	2180      	movs	r1, #128	; 0x80
 80042b8:	4620      	mov	r0, r4
 80042ba:	9600      	str	r6, [sp, #0]
 80042bc:	f7ff fdcf 	bl	8003e5e <I2C_WaitOnFlagUntilTimeout>
 80042c0:	2800      	cmp	r0, #0
 80042c2:	d19b      	bne.n	80041fc <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	2bff      	cmp	r3, #255	; 0xff
 80042ca:	d92f      	bls.n	800432c <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042cc:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80042ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042d2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042d4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042d6:	4639      	mov	r1, r7
 80042d8:	4620      	mov	r0, r4
 80042da:	f7ff fcd3 	bl	8003c84 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80042de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1ca      	bne.n	800427c <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042e6:	4632      	mov	r2, r6
 80042e8:	4649      	mov	r1, r9
 80042ea:	4620      	mov	r0, r4
 80042ec:	f7ff fd92 	bl	8003e14 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042f0:	2800      	cmp	r0, #0
 80042f2:	d183      	bne.n	80041fc <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042f4:	6823      	ldr	r3, [r4, #0]
 80042f6:	2120      	movs	r1, #32
 80042f8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004300:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004304:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004308:	f022 0201 	bic.w	r2, r2, #1
 800430c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800430e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004312:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004316:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800431a:	e770      	b.n	80041fe <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 800431c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8004324:	b292      	uxth	r2, r2
 8004326:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	e7a3      	b.n	8004274 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 800432c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800432e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004332:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8004334:	b292      	uxth	r2, r2
 8004336:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	e7cc      	b.n	80042d6 <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 800433c:	2002      	movs	r0, #2
 800433e:	e75e      	b.n	80041fe <HAL_I2C_Mem_Read+0x32>
 8004340:	80002400 	.word	0x80002400

08004344 <HAL_I2C_GetState>:
  return hi2c->State;
 8004344:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8004348:	4770      	bx	lr

0800434a <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800434a:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800434c:	f8d1 c000 	ldr.w	ip, [r1]
{
 8004350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004354:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004356:	6804      	ldr	r4, [r0, #0]
 8004358:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800435a:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800435e:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004360:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004362:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004366:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800436a:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800436c:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004370:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004374:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004376:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004378:	68e0      	ldr	r0, [r4, #12]
 800437a:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800437e:	4430      	add	r0, r6
 8004380:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004384:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004386:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004388:	68e0      	ldr	r0, [r4, #12]
 800438a:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800438e:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004390:	6898      	ldr	r0, [r3, #8]
 8004392:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8004396:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004398:	6888      	ldr	r0, [r1, #8]
 800439a:	68e6      	ldr	r6, [r4, #12]
 800439c:	3001      	adds	r0, #1
 800439e:	f3c6 060a 	ubfx	r6, r6, #0, #11
 80043a2:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80043a4:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80043a6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80043aa:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80043ac:	6918      	ldr	r0, [r3, #16]
 80043ae:	f020 0007 	bic.w	r0, r0, #7
 80043b2:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80043b4:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80043b6:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80043b8:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80043bc:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80043c0:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80043c4:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 80043c8:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 80043cc:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 80043d0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80043d4:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80043d6:	6958      	ldr	r0, [r3, #20]
 80043d8:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80043dc:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80043de:	6948      	ldr	r0, [r1, #20]
 80043e0:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80043e2:	69d8      	ldr	r0, [r3, #28]
 80043e4:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80043e8:	f020 0007 	bic.w	r0, r0, #7
 80043ec:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80043ee:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 80043f2:	4305      	orrs	r5, r0
 80043f4:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80043f6:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80043f8:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80043fa:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80043fe:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004400:	b31e      	cbz	r6, 800444a <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004402:	2e01      	cmp	r6, #1
 8004404:	d023      	beq.n	800444e <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004406:	1eb0      	subs	r0, r6, #2
 8004408:	2802      	cmp	r0, #2
 800440a:	d922      	bls.n	8004452 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800440c:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 800440e:	bf0c      	ite	eq
 8004410:	2002      	moveq	r0, #2
 8004412:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004414:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004416:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800441a:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 800441e:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004420:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004422:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004424:	4345      	muls	r5, r0
 8004426:	4378      	muls	r0, r7
 8004428:	3003      	adds	r0, #3
 800442a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800442e:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004430:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004432:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8004436:	f020 0007 	bic.w	r0, r0, #7
 800443a:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800443c:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800443e:	58a3      	ldr	r3, [r4, r2]
 8004440:	f043 0301 	orr.w	r3, r3, #1
 8004444:	50a3      	str	r3, [r4, r2]
}
 8004446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800444a:	2004      	movs	r0, #4
 800444c:	e7e2      	b.n	8004414 <LTDC_SetConfig+0xca>
    tmp = 3U;
 800444e:	2003      	movs	r0, #3
 8004450:	e7e0      	b.n	8004414 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8004452:	2002      	movs	r0, #2
 8004454:	e7de      	b.n	8004414 <LTDC_SetConfig+0xca>
	...

08004458 <HAL_LTDC_Init>:
{
 8004458:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800445a:	4604      	mov	r4, r0
 800445c:	2800      	cmp	r0, #0
 800445e:	d063      	beq.n	8004528 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004460:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8004464:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004468:	b91b      	cbnz	r3, 8004472 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800446a:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800446e:	f7fe f909 	bl	8002684 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004472:	2302      	movs	r3, #2
 8004474:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004478:	6823      	ldr	r3, [r4, #0]
 800447a:	699a      	ldr	r2, [r3, #24]
 800447c:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004480:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004482:	6999      	ldr	r1, [r3, #24]
 8004484:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8004488:	4302      	orrs	r2, r0
 800448a:	68e0      	ldr	r0, [r4, #12]
 800448c:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800448e:	6920      	ldr	r0, [r4, #16]
 8004490:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004492:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004494:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004496:	4925      	ldr	r1, [pc, #148]	; (800452c <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004498:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	400a      	ands	r2, r1
 800449e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80044a0:	689a      	ldr	r2, [r3, #8]
 80044a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80044a6:	69a0      	ldr	r0, [r4, #24]
 80044a8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80044aa:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80044ac:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	400a      	ands	r2, r1
 80044b2:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80044ba:	6a20      	ldr	r0, [r4, #32]
 80044bc:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80044be:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80044c0:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80044c2:	691a      	ldr	r2, [r3, #16]
 80044c4:	400a      	ands	r2, r1
 80044c6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80044c8:	691a      	ldr	r2, [r3, #16]
 80044ca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80044ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80044d0:	4302      	orrs	r2, r0
 80044d2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80044d4:	695a      	ldr	r2, [r3, #20]
 80044d6:	4011      	ands	r1, r2
 80044d8:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80044da:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80044dc:	695a      	ldr	r2, [r3, #20]
 80044de:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80044e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80044e4:	430a      	orrs	r2, r1
 80044e6:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80044e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80044ea:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80044ee:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80044f2:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80044f6:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80044f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044fa:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80044fe:	430a      	orrs	r2, r1
 8004500:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004504:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004508:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800450a:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800450c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800450e:	f042 0206 	orr.w	r2, r2, #6
 8004512:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8004514:	699a      	ldr	r2, [r3, #24]
 8004516:	f042 0201 	orr.w	r2, r2, #1
 800451a:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800451c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800451e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8004522:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8004526:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004528:	2001      	movs	r0, #1
 800452a:	e7fc      	b.n	8004526 <HAL_LTDC_Init+0xce>
 800452c:	f000f800 	.word	0xf000f800

08004530 <HAL_LTDC_ErrorCallback>:
 8004530:	4770      	bx	lr

08004532 <HAL_LTDC_LineEventCallback>:
 8004532:	4770      	bx	lr

08004534 <HAL_LTDC_ReloadEventCallback>:
 8004534:	4770      	bx	lr

08004536 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004536:	6803      	ldr	r3, [r0, #0]
{
 8004538:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800453a:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 800453c:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800453e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004540:	0772      	lsls	r2, r6, #29
 8004542:	d514      	bpl.n	800456e <HAL_LTDC_IRQHandler+0x38>
 8004544:	0769      	lsls	r1, r5, #29
 8004546:	d512      	bpl.n	800456e <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800454a:	f022 0204 	bic.w	r2, r2, #4
 800454e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004550:	2204      	movs	r2, #4
 8004552:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004554:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8004558:	f043 0301 	orr.w	r3, r3, #1
 800455c:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8004560:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004562:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8004566:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800456a:	f7ff ffe1 	bl	8004530 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800456e:	07b2      	lsls	r2, r6, #30
 8004570:	d516      	bpl.n	80045a0 <HAL_LTDC_IRQHandler+0x6a>
 8004572:	07ab      	lsls	r3, r5, #30
 8004574:	d514      	bpl.n	80045a0 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004576:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8004578:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800457a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800457c:	f022 0202 	bic.w	r2, r2, #2
 8004580:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004582:	2202      	movs	r2, #2
 8004584:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004586:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004590:	2304      	movs	r3, #4
 8004592:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8004596:	2300      	movs	r3, #0
 8004598:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800459c:	f7ff ffc8 	bl	8004530 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80045a0:	07f0      	lsls	r0, r6, #31
 80045a2:	d510      	bpl.n	80045c6 <HAL_LTDC_IRQHandler+0x90>
 80045a4:	07e9      	lsls	r1, r5, #31
 80045a6:	d50e      	bpl.n	80045c6 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80045a8:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 80045aa:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80045ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045ae:	f022 0201 	bic.w	r2, r2, #1
 80045b2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80045b4:	2201      	movs	r2, #1
 80045b6:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 80045b8:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 80045ba:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80045be:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80045c2:	f7ff ffb6 	bl	8004532 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80045c6:	0732      	lsls	r2, r6, #28
 80045c8:	d511      	bpl.n	80045ee <HAL_LTDC_IRQHandler+0xb8>
 80045ca:	072b      	lsls	r3, r5, #28
 80045cc:	d50f      	bpl.n	80045ee <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80045ce:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 80045d0:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80045d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045d4:	f022 0208 	bic.w	r2, r2, #8
 80045d8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80045da:	2208      	movs	r2, #8
 80045dc:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80045de:	2301      	movs	r3, #1
 80045e0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80045e4:	2300      	movs	r3, #0
 80045e6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80045ea:	f7ff ffa3 	bl	8004534 <HAL_LTDC_ReloadEventCallback>
}
 80045ee:	bd70      	pop	{r4, r5, r6, pc}

080045f0 <HAL_LTDC_ConfigLayer>:
{
 80045f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 80045f4:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 80045f8:	4606      	mov	r6, r0
 80045fa:	460f      	mov	r7, r1
 80045fc:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 80045fe:	2b01      	cmp	r3, #1
 8004600:	f04f 0002 	mov.w	r0, #2
 8004604:	d01f      	beq.n	8004646 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004606:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8004608:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800460c:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800460e:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004612:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8004616:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800461a:	3438      	adds	r4, #56	; 0x38
 800461c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800461e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004628:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800462a:	4630      	mov	r0, r6
 800462c:	4662      	mov	r2, ip
 800462e:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004630:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004632:	f7ff fe8a 	bl	800434a <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004636:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8004638:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800463a:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800463e:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8004642:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8004646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800464a <HAL_LTDC_GetState>:
  return hltdc->State;
 800464a:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 800464e:	4770      	bx	lr

08004650 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004650:	4a02      	ldr	r2, [pc, #8]	; (800465c <HAL_PWR_EnableBkUpAccess+0xc>)
 8004652:	6813      	ldr	r3, [r2, #0]
 8004654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004658:	6013      	str	r3, [r2, #0]
}
 800465a:	4770      	bx	lr
 800465c:	40007000 	.word	0x40007000

08004660 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8004660:	4b19      	ldr	r3, [pc, #100]	; (80046c8 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8004662:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8004664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004666:	4c19      	ldr	r4, [pc, #100]	; (80046cc <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8004668:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800466c:	641a      	str	r2, [r3, #64]	; 0x40
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004674:	9301      	str	r3, [sp, #4]
 8004676:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004678:	6823      	ldr	r3, [r4, #0]
 800467a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800467e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004680:	f7fe fa82 	bl	8002b88 <HAL_GetTick>
 8004684:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004686:	6863      	ldr	r3, [r4, #4]
 8004688:	03da      	lsls	r2, r3, #15
 800468a:	d50c      	bpl.n	80046a6 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800468c:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800468e:	4d0f      	ldr	r5, [pc, #60]	; (80046cc <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004694:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004696:	f7fe fa77 	bl	8002b88 <HAL_GetTick>
 800469a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800469c:	686b      	ldr	r3, [r5, #4]
 800469e:	039b      	lsls	r3, r3, #14
 80046a0:	d50a      	bpl.n	80046b8 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80046a2:	2000      	movs	r0, #0
 80046a4:	e006      	b.n	80046b4 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80046a6:	f7fe fa6f 	bl	8002b88 <HAL_GetTick>
 80046aa:	1b40      	subs	r0, r0, r5
 80046ac:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80046b0:	d9e9      	bls.n	8004686 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 80046b2:	2003      	movs	r0, #3
}
 80046b4:	b003      	add	sp, #12
 80046b6:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80046b8:	f7fe fa66 	bl	8002b88 <HAL_GetTick>
 80046bc:	1b00      	subs	r0, r0, r4
 80046be:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80046c2:	d9eb      	bls.n	800469c <HAL_PWREx_EnableOverDrive+0x3c>
 80046c4:	e7f5      	b.n	80046b2 <HAL_PWREx_EnableOverDrive+0x52>
 80046c6:	bf00      	nop
 80046c8:	40023800 	.word	0x40023800
 80046cc:	40007000 	.word	0x40007000

080046d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046d4:	4604      	mov	r4, r0
 80046d6:	b340      	cbz	r0, 800472a <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046d8:	6803      	ldr	r3, [r0, #0]
 80046da:	07d8      	lsls	r0, r3, #31
 80046dc:	d410      	bmi.n	8004700 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	0799      	lsls	r1, r3, #30
 80046e2:	d464      	bmi.n	80047ae <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046e4:	6823      	ldr	r3, [r4, #0]
 80046e6:	0719      	lsls	r1, r3, #28
 80046e8:	f100 80aa 	bmi.w	8004840 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	075a      	lsls	r2, r3, #29
 80046f0:	f100 80cb 	bmi.w	800488a <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046f4:	69a2      	ldr	r2, [r4, #24]
 80046f6:	2a00      	cmp	r2, #0
 80046f8:	f040 8134 	bne.w	8004964 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80046fc:	2000      	movs	r0, #0
 80046fe:	e02b      	b.n	8004758 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004700:	4b96      	ldr	r3, [pc, #600]	; (800495c <HAL_RCC_OscConfig+0x28c>)
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	f002 020c 	and.w	r2, r2, #12
 8004708:	2a04      	cmp	r2, #4
 800470a:	d007      	beq.n	800471c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800470c:	689a      	ldr	r2, [r3, #8]
 800470e:	f002 020c 	and.w	r2, r2, #12
 8004712:	2a08      	cmp	r2, #8
 8004714:	d10b      	bne.n	800472e <HAL_RCC_OscConfig+0x5e>
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	0252      	lsls	r2, r2, #9
 800471a:	d508      	bpl.n	800472e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800471c:	4b8f      	ldr	r3, [pc, #572]	; (800495c <HAL_RCC_OscConfig+0x28c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	039b      	lsls	r3, r3, #14
 8004722:	d5dc      	bpl.n	80046de <HAL_RCC_OscConfig+0xe>
 8004724:	6863      	ldr	r3, [r4, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1d9      	bne.n	80046de <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 800472a:	2001      	movs	r0, #1
 800472c:	e014      	b.n	8004758 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800472e:	6862      	ldr	r2, [r4, #4]
 8004730:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004734:	d113      	bne.n	800475e <HAL_RCC_OscConfig+0x8e>
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800473c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800473e:	f7fe fa23 	bl	8002b88 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004742:	4e86      	ldr	r6, [pc, #536]	; (800495c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8004744:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004746:	6833      	ldr	r3, [r6, #0]
 8004748:	039f      	lsls	r7, r3, #14
 800474a:	d4c8      	bmi.n	80046de <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800474c:	f7fe fa1c 	bl	8002b88 <HAL_GetTick>
 8004750:	1b40      	subs	r0, r0, r5
 8004752:	2864      	cmp	r0, #100	; 0x64
 8004754:	d9f7      	bls.n	8004746 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8004756:	2003      	movs	r0, #3
}
 8004758:	b002      	add	sp, #8
 800475a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800475e:	4d7f      	ldr	r5, [pc, #508]	; (800495c <HAL_RCC_OscConfig+0x28c>)
 8004760:	682b      	ldr	r3, [r5, #0]
 8004762:	b992      	cbnz	r2, 800478a <HAL_RCC_OscConfig+0xba>
 8004764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004768:	602b      	str	r3, [r5, #0]
 800476a:	682b      	ldr	r3, [r5, #0]
 800476c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004770:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004772:	f7fe fa09 	bl	8002b88 <HAL_GetTick>
 8004776:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004778:	682b      	ldr	r3, [r5, #0]
 800477a:	0398      	lsls	r0, r3, #14
 800477c:	d5af      	bpl.n	80046de <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800477e:	f7fe fa03 	bl	8002b88 <HAL_GetTick>
 8004782:	1b80      	subs	r0, r0, r6
 8004784:	2864      	cmp	r0, #100	; 0x64
 8004786:	d9f7      	bls.n	8004778 <HAL_RCC_OscConfig+0xa8>
 8004788:	e7e5      	b.n	8004756 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800478a:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800478e:	d107      	bne.n	80047a0 <HAL_RCC_OscConfig+0xd0>
 8004790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004794:	602b      	str	r3, [r5, #0]
 8004796:	682b      	ldr	r3, [r5, #0]
 8004798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800479c:	602b      	str	r3, [r5, #0]
 800479e:	e7ce      	b.n	800473e <HAL_RCC_OscConfig+0x6e>
 80047a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047a4:	602b      	str	r3, [r5, #0]
 80047a6:	682b      	ldr	r3, [r5, #0]
 80047a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047ac:	e7f6      	b.n	800479c <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047ae:	4b6b      	ldr	r3, [pc, #428]	; (800495c <HAL_RCC_OscConfig+0x28c>)
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	f012 0f0c 	tst.w	r2, #12
 80047b6:	d007      	beq.n	80047c8 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	f002 020c 	and.w	r2, r2, #12
 80047be:	2a08      	cmp	r2, #8
 80047c0:	d111      	bne.n	80047e6 <HAL_RCC_OscConfig+0x116>
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	0251      	lsls	r1, r2, #9
 80047c6:	d40e      	bmi.n	80047e6 <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047c8:	4b64      	ldr	r3, [pc, #400]	; (800495c <HAL_RCC_OscConfig+0x28c>)
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	0792      	lsls	r2, r2, #30
 80047ce:	d502      	bpl.n	80047d6 <HAL_RCC_OscConfig+0x106>
 80047d0:	68e2      	ldr	r2, [r4, #12]
 80047d2:	2a01      	cmp	r2, #1
 80047d4:	d1a9      	bne.n	800472a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	6921      	ldr	r1, [r4, #16]
 80047da:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80047de:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80047e2:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047e4:	e77e      	b.n	80046e4 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80047e6:	68e2      	ldr	r2, [r4, #12]
 80047e8:	b1c2      	cbz	r2, 800481c <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 80047ea:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ec:	4d5b      	ldr	r5, [pc, #364]	; (800495c <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 80047ee:	f042 0201 	orr.w	r2, r2, #1
 80047f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80047f4:	f7fe f9c8 	bl	8002b88 <HAL_GetTick>
 80047f8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047fa:	682b      	ldr	r3, [r5, #0]
 80047fc:	079f      	lsls	r7, r3, #30
 80047fe:	d507      	bpl.n	8004810 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004800:	682b      	ldr	r3, [r5, #0]
 8004802:	6922      	ldr	r2, [r4, #16]
 8004804:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004808:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800480c:	602b      	str	r3, [r5, #0]
 800480e:	e769      	b.n	80046e4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004810:	f7fe f9ba 	bl	8002b88 <HAL_GetTick>
 8004814:	1b80      	subs	r0, r0, r6
 8004816:	2802      	cmp	r0, #2
 8004818:	d9ef      	bls.n	80047fa <HAL_RCC_OscConfig+0x12a>
 800481a:	e79c      	b.n	8004756 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 800481c:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800481e:	4e4f      	ldr	r6, [pc, #316]	; (800495c <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 8004820:	f022 0201 	bic.w	r2, r2, #1
 8004824:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004826:	f7fe f9af 	bl	8002b88 <HAL_GetTick>
 800482a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800482c:	6833      	ldr	r3, [r6, #0]
 800482e:	0798      	lsls	r0, r3, #30
 8004830:	f57f af58 	bpl.w	80046e4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004834:	f7fe f9a8 	bl	8002b88 <HAL_GetTick>
 8004838:	1b40      	subs	r0, r0, r5
 800483a:	2802      	cmp	r0, #2
 800483c:	d9f6      	bls.n	800482c <HAL_RCC_OscConfig+0x15c>
 800483e:	e78a      	b.n	8004756 <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004840:	6963      	ldr	r3, [r4, #20]
 8004842:	4d46      	ldr	r5, [pc, #280]	; (800495c <HAL_RCC_OscConfig+0x28c>)
 8004844:	b183      	cbz	r3, 8004868 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 8004846:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004848:	f043 0301 	orr.w	r3, r3, #1
 800484c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800484e:	f7fe f99b 	bl	8002b88 <HAL_GetTick>
 8004852:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004854:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004856:	079b      	lsls	r3, r3, #30
 8004858:	f53f af48 	bmi.w	80046ec <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800485c:	f7fe f994 	bl	8002b88 <HAL_GetTick>
 8004860:	1b80      	subs	r0, r0, r6
 8004862:	2802      	cmp	r0, #2
 8004864:	d9f6      	bls.n	8004854 <HAL_RCC_OscConfig+0x184>
 8004866:	e776      	b.n	8004756 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8004868:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800486a:	f023 0301 	bic.w	r3, r3, #1
 800486e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8004870:	f7fe f98a 	bl	8002b88 <HAL_GetTick>
 8004874:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004876:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004878:	079f      	lsls	r7, r3, #30
 800487a:	f57f af37 	bpl.w	80046ec <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800487e:	f7fe f983 	bl	8002b88 <HAL_GetTick>
 8004882:	1b80      	subs	r0, r0, r6
 8004884:	2802      	cmp	r0, #2
 8004886:	d9f6      	bls.n	8004876 <HAL_RCC_OscConfig+0x1a6>
 8004888:	e765      	b.n	8004756 <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800488a:	4b34      	ldr	r3, [pc, #208]	; (800495c <HAL_RCC_OscConfig+0x28c>)
 800488c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800488e:	00d0      	lsls	r0, r2, #3
 8004890:	d427      	bmi.n	80048e2 <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004892:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8004894:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004896:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800489a:	641a      	str	r2, [r3, #64]	; 0x40
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a2:	9301      	str	r3, [sp, #4]
 80048a4:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048a6:	4d2e      	ldr	r5, [pc, #184]	; (8004960 <HAL_RCC_OscConfig+0x290>)
 80048a8:	682b      	ldr	r3, [r5, #0]
 80048aa:	05d9      	lsls	r1, r3, #23
 80048ac:	d51b      	bpl.n	80048e6 <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048ae:	68a3      	ldr	r3, [r4, #8]
 80048b0:	4d2a      	ldr	r5, [pc, #168]	; (800495c <HAL_RCC_OscConfig+0x28c>)
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d127      	bne.n	8004906 <HAL_RCC_OscConfig+0x236>
 80048b6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80048b8:	f043 0301 	orr.w	r3, r3, #1
 80048bc:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048be:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80048c2:	f7fe f961 	bl	8002b88 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048c6:	4e25      	ldr	r6, [pc, #148]	; (800495c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80048c8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ca:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80048cc:	079b      	lsls	r3, r3, #30
 80048ce:	d53f      	bpl.n	8004950 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 80048d0:	2f00      	cmp	r7, #0
 80048d2:	f43f af0f 	beq.w	80046f4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80048d6:	4a21      	ldr	r2, [pc, #132]	; (800495c <HAL_RCC_OscConfig+0x28c>)
 80048d8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80048da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048de:	6413      	str	r3, [r2, #64]	; 0x40
 80048e0:	e708      	b.n	80046f4 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 80048e2:	2700      	movs	r7, #0
 80048e4:	e7df      	b.n	80048a6 <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 80048e6:	682b      	ldr	r3, [r5, #0]
 80048e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ec:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80048ee:	f7fe f94b 	bl	8002b88 <HAL_GetTick>
 80048f2:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048f4:	682b      	ldr	r3, [r5, #0]
 80048f6:	05da      	lsls	r2, r3, #23
 80048f8:	d4d9      	bmi.n	80048ae <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048fa:	f7fe f945 	bl	8002b88 <HAL_GetTick>
 80048fe:	1b80      	subs	r0, r0, r6
 8004900:	2864      	cmp	r0, #100	; 0x64
 8004902:	d9f7      	bls.n	80048f4 <HAL_RCC_OscConfig+0x224>
 8004904:	e727      	b.n	8004756 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004906:	b9ab      	cbnz	r3, 8004934 <HAL_RCC_OscConfig+0x264>
 8004908:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800490a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800490e:	f023 0301 	bic.w	r3, r3, #1
 8004912:	672b      	str	r3, [r5, #112]	; 0x70
 8004914:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004916:	f023 0304 	bic.w	r3, r3, #4
 800491a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800491c:	f7fe f934 	bl	8002b88 <HAL_GetTick>
 8004920:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004922:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004924:	0798      	lsls	r0, r3, #30
 8004926:	d5d3      	bpl.n	80048d0 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004928:	f7fe f92e 	bl	8002b88 <HAL_GetTick>
 800492c:	1b80      	subs	r0, r0, r6
 800492e:	4540      	cmp	r0, r8
 8004930:	d9f7      	bls.n	8004922 <HAL_RCC_OscConfig+0x252>
 8004932:	e710      	b.n	8004756 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004934:	2b05      	cmp	r3, #5
 8004936:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004938:	d103      	bne.n	8004942 <HAL_RCC_OscConfig+0x272>
 800493a:	f043 0304 	orr.w	r3, r3, #4
 800493e:	672b      	str	r3, [r5, #112]	; 0x70
 8004940:	e7b9      	b.n	80048b6 <HAL_RCC_OscConfig+0x1e6>
 8004942:	f023 0301 	bic.w	r3, r3, #1
 8004946:	672b      	str	r3, [r5, #112]	; 0x70
 8004948:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800494a:	f023 0304 	bic.w	r3, r3, #4
 800494e:	e7b5      	b.n	80048bc <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004950:	f7fe f91a 	bl	8002b88 <HAL_GetTick>
 8004954:	1b40      	subs	r0, r0, r5
 8004956:	4540      	cmp	r0, r8
 8004958:	d9b7      	bls.n	80048ca <HAL_RCC_OscConfig+0x1fa>
 800495a:	e6fc      	b.n	8004756 <HAL_RCC_OscConfig+0x86>
 800495c:	40023800 	.word	0x40023800
 8004960:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004964:	4d38      	ldr	r5, [pc, #224]	; (8004a48 <HAL_RCC_OscConfig+0x378>)
 8004966:	68ab      	ldr	r3, [r5, #8]
 8004968:	f003 030c 	and.w	r3, r3, #12
 800496c:	2b08      	cmp	r3, #8
 800496e:	d041      	beq.n	80049f4 <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
 8004970:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004972:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8004974:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004978:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800497a:	d12e      	bne.n	80049da <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 800497c:	f7fe f904 	bl	8002b88 <HAL_GetTick>
 8004980:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004982:	682b      	ldr	r3, [r5, #0]
 8004984:	0199      	lsls	r1, r3, #6
 8004986:	d422      	bmi.n	80049ce <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004988:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800498a:	085b      	lsrs	r3, r3, #1
 800498c:	1e5a      	subs	r2, r3, #1
 800498e:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8004992:	430b      	orrs	r3, r1
 8004994:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004998:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800499a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800499e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80049a0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80049a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049a8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80049aa:	682b      	ldr	r3, [r5, #0]
 80049ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049b0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80049b2:	f7fe f8e9 	bl	8002b88 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049b6:	4d24      	ldr	r5, [pc, #144]	; (8004a48 <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
 80049b8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ba:	682b      	ldr	r3, [r5, #0]
 80049bc:	019a      	lsls	r2, r3, #6
 80049be:	f53f ae9d 	bmi.w	80046fc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c2:	f7fe f8e1 	bl	8002b88 <HAL_GetTick>
 80049c6:	1b00      	subs	r0, r0, r4
 80049c8:	2802      	cmp	r0, #2
 80049ca:	d9f6      	bls.n	80049ba <HAL_RCC_OscConfig+0x2ea>
 80049cc:	e6c3      	b.n	8004756 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ce:	f7fe f8db 	bl	8002b88 <HAL_GetTick>
 80049d2:	1b80      	subs	r0, r0, r6
 80049d4:	2802      	cmp	r0, #2
 80049d6:	d9d4      	bls.n	8004982 <HAL_RCC_OscConfig+0x2b2>
 80049d8:	e6bd      	b.n	8004756 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80049da:	f7fe f8d5 	bl	8002b88 <HAL_GetTick>
 80049de:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049e0:	682b      	ldr	r3, [r5, #0]
 80049e2:	019b      	lsls	r3, r3, #6
 80049e4:	f57f ae8a 	bpl.w	80046fc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e8:	f7fe f8ce 	bl	8002b88 <HAL_GetTick>
 80049ec:	1b00      	subs	r0, r0, r4
 80049ee:	2802      	cmp	r0, #2
 80049f0:	d9f6      	bls.n	80049e0 <HAL_RCC_OscConfig+0x310>
 80049f2:	e6b0      	b.n	8004756 <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049f4:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 80049f6:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049f8:	f43f ae97 	beq.w	800472a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a00:	69e1      	ldr	r1, [r4, #28]
 8004a02:	428a      	cmp	r2, r1
 8004a04:	f47f ae91 	bne.w	800472a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a08:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a0c:	6a21      	ldr	r1, [r4, #32]
 8004a0e:	428a      	cmp	r2, r1
 8004a10:	f47f ae8b 	bne.w	800472a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a14:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a18:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a1a:	401a      	ands	r2, r3
 8004a1c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004a20:	f47f ae83 	bne.w	800472a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004a24:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004a26:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8004a2a:	0852      	lsrs	r2, r2, #1
 8004a2c:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a2e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004a32:	f47f ae7a 	bne.w	800472a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a36:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8004a3a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004a3c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8004a40:	f43f ae5c 	beq.w	80046fc <HAL_RCC_OscConfig+0x2c>
 8004a44:	e671      	b.n	800472a <HAL_RCC_OscConfig+0x5a>
 8004a46:	bf00      	nop
 8004a48:	40023800 	.word	0x40023800

08004a4c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a4c:	4913      	ldr	r1, [pc, #76]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8004a4e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a50:	688b      	ldr	r3, [r1, #8]
 8004a52:	f003 030c 	and.w	r3, r3, #12
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d01b      	beq.n	8004a92 <HAL_RCC_GetSysClockFreq+0x46>
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d11b      	bne.n	8004a96 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a5e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004a60:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a62:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a64:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004a68:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a6c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004a70:	bf1a      	itte	ne
 8004a72:	480b      	ldrne	r0, [pc, #44]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x54>)
 8004a74:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a76:	480b      	ldreq	r0, [pc, #44]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x58>)
 8004a78:	fba1 0100 	umull	r0, r1, r1, r0
 8004a7c:	f7fc f88e 	bl	8000b9c <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004a80:	4b06      	ldr	r3, [pc, #24]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x50>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004a88:	3301      	adds	r3, #1
 8004a8a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8004a8c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004a90:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a92:	4803      	ldr	r0, [pc, #12]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x54>)
 8004a94:	e7fc      	b.n	8004a90 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8004a96:	4803      	ldr	r0, [pc, #12]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8004a98:	e7fa      	b.n	8004a90 <HAL_RCC_GetSysClockFreq+0x44>
 8004a9a:	bf00      	nop
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	017d7840 	.word	0x017d7840
 8004aa4:	00f42400 	.word	0x00f42400

08004aa8 <HAL_RCC_ClockConfig>:
{
 8004aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aac:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8004aae:	4604      	mov	r4, r0
 8004ab0:	b910      	cbnz	r0, 8004ab8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004ab2:	2001      	movs	r0, #1
}
 8004ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ab8:	4a46      	ldr	r2, [pc, #280]	; (8004bd4 <HAL_RCC_ClockConfig+0x12c>)
 8004aba:	6813      	ldr	r3, [r2, #0]
 8004abc:	f003 030f 	and.w	r3, r3, #15
 8004ac0:	428b      	cmp	r3, r1
 8004ac2:	d328      	bcc.n	8004b16 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ac4:	6822      	ldr	r2, [r4, #0]
 8004ac6:	0797      	lsls	r7, r2, #30
 8004ac8:	d430      	bmi.n	8004b2c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aca:	07d0      	lsls	r0, r2, #31
 8004acc:	d444      	bmi.n	8004b58 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ace:	4a41      	ldr	r2, [pc, #260]	; (8004bd4 <HAL_RCC_ClockConfig+0x12c>)
 8004ad0:	6813      	ldr	r3, [r2, #0]
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	42ab      	cmp	r3, r5
 8004ad8:	d867      	bhi.n	8004baa <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ada:	6822      	ldr	r2, [r4, #0]
 8004adc:	0751      	lsls	r1, r2, #29
 8004ade:	d470      	bmi.n	8004bc2 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae0:	0713      	lsls	r3, r2, #28
 8004ae2:	d507      	bpl.n	8004af4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ae4:	4a3c      	ldr	r2, [pc, #240]	; (8004bd8 <HAL_RCC_ClockConfig+0x130>)
 8004ae6:	6921      	ldr	r1, [r4, #16]
 8004ae8:	6893      	ldr	r3, [r2, #8]
 8004aea:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004aee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004af2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004af4:	f7ff ffaa 	bl	8004a4c <HAL_RCC_GetSysClockFreq>
 8004af8:	4b37      	ldr	r3, [pc, #220]	; (8004bd8 <HAL_RCC_ClockConfig+0x130>)
 8004afa:	4a38      	ldr	r2, [pc, #224]	; (8004bdc <HAL_RCC_ClockConfig+0x134>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004b02:	5cd3      	ldrb	r3, [r2, r3]
 8004b04:	40d8      	lsrs	r0, r3
 8004b06:	4b36      	ldr	r3, [pc, #216]	; (8004be0 <HAL_RCC_ClockConfig+0x138>)
 8004b08:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004b0a:	4b36      	ldr	r3, [pc, #216]	; (8004be4 <HAL_RCC_ClockConfig+0x13c>)
 8004b0c:	6818      	ldr	r0, [r3, #0]
 8004b0e:	f7fd fff5 	bl	8002afc <HAL_InitTick>
  return HAL_OK;
 8004b12:	2000      	movs	r0, #0
 8004b14:	e7ce      	b.n	8004ab4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b16:	6813      	ldr	r3, [r2, #0]
 8004b18:	f023 030f 	bic.w	r3, r3, #15
 8004b1c:	430b      	orrs	r3, r1
 8004b1e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b20:	6813      	ldr	r3, [r2, #0]
 8004b22:	f003 030f 	and.w	r3, r3, #15
 8004b26:	428b      	cmp	r3, r1
 8004b28:	d1c3      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0xa>
 8004b2a:	e7cb      	b.n	8004ac4 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b2c:	f012 0f04 	tst.w	r2, #4
 8004b30:	4b29      	ldr	r3, [pc, #164]	; (8004bd8 <HAL_RCC_ClockConfig+0x130>)
 8004b32:	d003      	beq.n	8004b3c <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b34:	6899      	ldr	r1, [r3, #8]
 8004b36:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 8004b3a:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b3c:	0716      	lsls	r6, r2, #28
 8004b3e:	d503      	bpl.n	8004b48 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b40:	6899      	ldr	r1, [r3, #8]
 8004b42:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 8004b46:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b48:	4923      	ldr	r1, [pc, #140]	; (8004bd8 <HAL_RCC_ClockConfig+0x130>)
 8004b4a:	68a0      	ldr	r0, [r4, #8]
 8004b4c:	688b      	ldr	r3, [r1, #8]
 8004b4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b52:	4303      	orrs	r3, r0
 8004b54:	608b      	str	r3, [r1, #8]
 8004b56:	e7b8      	b.n	8004aca <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b58:	6861      	ldr	r1, [r4, #4]
 8004b5a:	4b1f      	ldr	r3, [pc, #124]	; (8004bd8 <HAL_RCC_ClockConfig+0x130>)
 8004b5c:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b5e:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b60:	d11b      	bne.n	8004b9a <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b62:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b66:	d0a4      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b68:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b6a:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6e:	4f1a      	ldr	r7, [pc, #104]	; (8004bd8 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b70:	f022 0203 	bic.w	r2, r2, #3
 8004b74:	430a      	orrs	r2, r1
 8004b76:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004b78:	f7fe f806 	bl	8002b88 <HAL_GetTick>
 8004b7c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	6862      	ldr	r2, [r4, #4]
 8004b82:	f003 030c 	and.w	r3, r3, #12
 8004b86:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004b8a:	d0a0      	beq.n	8004ace <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b8c:	f7fd fffc 	bl	8002b88 <HAL_GetTick>
 8004b90:	1b80      	subs	r0, r0, r6
 8004b92:	4540      	cmp	r0, r8
 8004b94:	d9f3      	bls.n	8004b7e <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8004b96:	2003      	movs	r0, #3
 8004b98:	e78c      	b.n	8004ab4 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b9a:	2902      	cmp	r1, #2
 8004b9c:	d102      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b9e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004ba2:	e7e0      	b.n	8004b66 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba4:	f012 0f02 	tst.w	r2, #2
 8004ba8:	e7dd      	b.n	8004b66 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004baa:	6813      	ldr	r3, [r2, #0]
 8004bac:	f023 030f 	bic.w	r3, r3, #15
 8004bb0:	432b      	orrs	r3, r5
 8004bb2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb4:	6813      	ldr	r3, [r2, #0]
 8004bb6:	f003 030f 	and.w	r3, r3, #15
 8004bba:	42ab      	cmp	r3, r5
 8004bbc:	f47f af79 	bne.w	8004ab2 <HAL_RCC_ClockConfig+0xa>
 8004bc0:	e78b      	b.n	8004ada <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bc2:	4905      	ldr	r1, [pc, #20]	; (8004bd8 <HAL_RCC_ClockConfig+0x130>)
 8004bc4:	68e0      	ldr	r0, [r4, #12]
 8004bc6:	688b      	ldr	r3, [r1, #8]
 8004bc8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004bcc:	4303      	orrs	r3, r0
 8004bce:	608b      	str	r3, [r1, #8]
 8004bd0:	e786      	b.n	8004ae0 <HAL_RCC_ClockConfig+0x38>
 8004bd2:	bf00      	nop
 8004bd4:	40023c00 	.word	0x40023c00
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	0800bff5 	.word	0x0800bff5
 8004be0:	2000002c 	.word	0x2000002c
 8004be4:	20000034 	.word	0x20000034

08004be8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004be8:	6803      	ldr	r3, [r0, #0]
{
 8004bea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004bee:	f013 0601 	ands.w	r6, r3, #1
{
 8004bf2:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004bf4:	d00b      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004bf6:	4aaa      	ldr	r2, [pc, #680]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004bf8:	6891      	ldr	r1, [r2, #8]
 8004bfa:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8004bfe:	6091      	str	r1, [r2, #8]
 8004c00:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8004c02:	6891      	ldr	r1, [r2, #8]
 8004c04:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004c06:	fab6 f686 	clz	r6, r6
 8004c0a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c0c:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004c0e:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8004c12:	d012      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c14:	49a2      	ldr	r1, [pc, #648]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004c16:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8004c18:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004c1c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c20:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 8004c24:	bf08      	it	eq
 8004c26:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c28:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004c2c:	bf16      	itet	ne
 8004c2e:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8004c32:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004c34:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c36:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004c3a:	02df      	lsls	r7, r3, #11
 8004c3c:	d510      	bpl.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c3e:	4898      	ldr	r0, [pc, #608]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004c40:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004c42:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004c46:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c4a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8004c4e:	ea42 0201 	orr.w	r2, r2, r1
 8004c52:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004c56:	f000 8184 	beq.w	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8004c5a:	2900      	cmp	r1, #0
 8004c5c:	bf08      	it	eq
 8004c5e:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8004c60:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004c64:	bf18      	it	ne
 8004c66:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c68:	0698      	lsls	r0, r3, #26
 8004c6a:	d531      	bpl.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c6c:	4b8c      	ldr	r3, [pc, #560]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c6e:	4f8d      	ldr	r7, [pc, #564]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c72:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004c76:	641a      	str	r2, [r3, #64]	; 0x40
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c7e:	9301      	str	r3, [sp, #4]
 8004c80:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c88:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c8a:	f7fd ff7d 	bl	8002b88 <HAL_GetTick>
 8004c8e:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	05d9      	lsls	r1, r3, #23
 8004c94:	f140 8167 	bpl.w	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x37e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c98:	4f81      	ldr	r7, [pc, #516]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004c9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c9c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004ca0:	f040 816c 	bne.w	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x394>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ca4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004ca6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004caa:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004cae:	4a7c      	ldr	r2, [pc, #496]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004cb0:	f040 818a 	bne.w	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004cb4:	6891      	ldr	r1, [r2, #8]
 8004cb6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8004cba:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004cbe:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8004cc2:	4301      	orrs	r1, r0
 8004cc4:	6091      	str	r1, [r2, #8]
 8004cc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cca:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004ccc:	430b      	orrs	r3, r1
 8004cce:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	06d8      	lsls	r0, r3, #27
 8004cd4:	d50c      	bpl.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cd6:	4a72      	ldr	r2, [pc, #456]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004cd8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8004cdc:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8004ce0:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8004ce4:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8004ce8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004cea:	4301      	orrs	r1, r0
 8004cec:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cf0:	0459      	lsls	r1, r3, #17
 8004cf2:	d508      	bpl.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cf4:	496a      	ldr	r1, [pc, #424]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004cf6:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004cf8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004cfc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004d00:	4302      	orrs	r2, r0
 8004d02:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d06:	041a      	lsls	r2, r3, #16
 8004d08:	d508      	bpl.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d0a:	4965      	ldr	r1, [pc, #404]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004d0c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004d0e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004d12:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004d16:	4302      	orrs	r2, r0
 8004d18:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d1c:	03df      	lsls	r7, r3, #15
 8004d1e:	d508      	bpl.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d20:	495f      	ldr	r1, [pc, #380]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004d22:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004d24:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004d28:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004d2c:	4302      	orrs	r2, r0
 8004d2e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d32:	0398      	lsls	r0, r3, #14
 8004d34:	d508      	bpl.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d36:	495a      	ldr	r1, [pc, #360]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004d38:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004d3a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004d3e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8004d42:	4302      	orrs	r2, r0
 8004d44:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d48:	0659      	lsls	r1, r3, #25
 8004d4a:	d508      	bpl.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d4c:	4954      	ldr	r1, [pc, #336]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004d4e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004d50:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004d54:	f022 0203 	bic.w	r2, r2, #3
 8004d58:	4302      	orrs	r2, r0
 8004d5a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d5e:	061a      	lsls	r2, r3, #24
 8004d60:	d508      	bpl.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d62:	494f      	ldr	r1, [pc, #316]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004d64:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004d66:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004d6a:	f022 020c 	bic.w	r2, r2, #12
 8004d6e:	4302      	orrs	r2, r0
 8004d70:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d74:	05df      	lsls	r7, r3, #23
 8004d76:	d508      	bpl.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d78:	4949      	ldr	r1, [pc, #292]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004d7a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004d7c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004d80:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004d84:	4302      	orrs	r2, r0
 8004d86:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d8a:	0598      	lsls	r0, r3, #22
 8004d8c:	d508      	bpl.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d8e:	4944      	ldr	r1, [pc, #272]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004d90:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004d92:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004d96:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004d9a:	4302      	orrs	r2, r0
 8004d9c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004da0:	0559      	lsls	r1, r3, #21
 8004da2:	d508      	bpl.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004da4:	493e      	ldr	r1, [pc, #248]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004da6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004da8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004dac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004db0:	4302      	orrs	r2, r0
 8004db2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004db6:	051a      	lsls	r2, r3, #20
 8004db8:	d508      	bpl.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004dba:	4939      	ldr	r1, [pc, #228]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004dbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dbe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004dc2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004dc6:	4302      	orrs	r2, r0
 8004dc8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004dcc:	04df      	lsls	r7, r3, #19
 8004dce:	d508      	bpl.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004dd0:	4933      	ldr	r1, [pc, #204]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004dd2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004dd4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004dd8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004ddc:	4302      	orrs	r2, r0
 8004dde:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004de2:	0498      	lsls	r0, r3, #18
 8004de4:	d508      	bpl.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004de6:	492e      	ldr	r1, [pc, #184]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004de8:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004dea:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004dee:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004df2:	4302      	orrs	r2, r0
 8004df4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004df8:	0259      	lsls	r1, r3, #9
 8004dfa:	d508      	bpl.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004dfc:	4928      	ldr	r1, [pc, #160]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004dfe:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8004e00:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004e04:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004e08:	4302      	orrs	r2, r0
 8004e0a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004e0e:	029a      	lsls	r2, r3, #10
 8004e10:	d50c      	bpl.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004e12:	4823      	ldr	r0, [pc, #140]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004e14:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004e16:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8004e1a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004e1e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8004e22:	bf08      	it	eq
 8004e24:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004e26:	430a      	orrs	r2, r1
 8004e28:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8004e2c:	f013 0f08 	tst.w	r3, #8
 8004e30:	bf18      	it	ne
 8004e32:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e34:	035f      	lsls	r7, r3, #13
 8004e36:	d508      	bpl.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e38:	4919      	ldr	r1, [pc, #100]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004e3a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004e3c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004e40:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004e44:	4302      	orrs	r2, r0
 8004e46:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004e4a:	0218      	lsls	r0, r3, #8
 8004e4c:	d509      	bpl.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e4e:	4914      	ldr	r1, [pc, #80]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004e50:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8004e54:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004e58:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004e5c:	4302      	orrs	r2, r0
 8004e5e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e62:	2e01      	cmp	r6, #1
 8004e64:	f000 80b4 	beq.w	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004e68:	0199      	lsls	r1, r3, #6
 8004e6a:	f100 80b1 	bmi.w	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004e6e:	2d01      	cmp	r5, #1
 8004e70:	d175      	bne.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e72:	4d0b      	ldr	r5, [pc, #44]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004e74:	682b      	ldr	r3, [r5, #0]
 8004e76:	462e      	mov	r6, r5
 8004e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e7c:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e7e:	f7fd fe83 	bl	8002b88 <HAL_GetTick>
 8004e82:	4607      	mov	r7, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e84:	682b      	ldr	r3, [r5, #0]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	f100 8126 	bmi.w	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e8c:	6822      	ldr	r2, [r4, #0]
 8004e8e:	0315      	lsls	r5, r2, #12
 8004e90:	d501      	bpl.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8004e92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e94:	b143      	cbz	r3, 8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8004e96:	02d0      	lsls	r0, r2, #11
 8004e98:	d521      	bpl.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x2f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e9c:	b9fb      	cbnz	r3, 8004ede <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8004e9e:	e003      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ea8:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004eac:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004eb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004eb4:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004eb8:	430b      	orrs	r3, r1
 8004eba:	6961      	ldr	r1, [r4, #20]
 8004ebc:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004ec0:	69a1      	ldr	r1, [r4, #24]
 8004ec2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004ec6:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004eca:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8004ece:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004ed0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004ed4:	3901      	subs	r1, #1
 8004ed6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004eda:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ede:	0291      	lsls	r1, r2, #10
 8004ee0:	d515      	bpl.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x326>
 8004ee2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004ee4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ee8:	d111      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x326>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004eea:	4982      	ldr	r1, [pc, #520]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004eec:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ef0:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004ef4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8004ef8:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8004efc:	4303      	orrs	r3, r0
 8004efe:	6960      	ldr	r0, [r4, #20]
 8004f00:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004f04:	6a20      	ldr	r0, [r4, #32]
 8004f06:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f0e:	0712      	lsls	r2, r2, #28
 8004f10:	d519      	bpl.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f12:	4a78      	ldr	r2, [pc, #480]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f14:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f18:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f1c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8004f20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f24:	430b      	orrs	r3, r1
 8004f26:	6961      	ldr	r1, [r4, #20]
 8004f28:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004f2c:	69e1      	ldr	r1, [r4, #28]
 8004f2e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004f32:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f36:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004f3a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004f3c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004f40:	430b      	orrs	r3, r1
 8004f42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f46:	4c6b      	ldr	r4, [pc, #428]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f48:	6823      	ldr	r3, [r4, #0]
 8004f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f4e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f50:	f7fd fe1a 	bl	8002b88 <HAL_GetTick>
 8004f54:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	f140 80c4 	bpl.w	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8004f5e:	2000      	movs	r0, #0
 8004f60:	e009      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      plli2sused = 1;
 8004f62:	2601      	movs	r6, #1
 8004f64:	e67c      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f66:	f7fd fe0f 	bl	8002b88 <HAL_GetTick>
 8004f6a:	eba0 0008 	sub.w	r0, r0, r8
 8004f6e:	2864      	cmp	r0, #100	; 0x64
 8004f70:	f67f ae8e 	bls.w	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8004f74:	2003      	movs	r0, #3
}
 8004f76:	b003      	add	sp, #12
 8004f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f7c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004f7e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004f82:	4293      	cmp	r3, r2
 8004f84:	f43f ae8e 	beq.w	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f8a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f90:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004f94:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f96:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004f98:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004f9c:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8004f9e:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fa2:	07da      	lsls	r2, r3, #31
 8004fa4:	f57f ae7e 	bpl.w	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8004fa8:	f7fd fdee 	bl	8002b88 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fac:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004fb0:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fb4:	079b      	lsls	r3, r3, #30
 8004fb6:	f53f ae75 	bmi.w	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fba:	f7fd fde5 	bl	8002b88 <HAL_GetTick>
 8004fbe:	eba0 0008 	sub.w	r0, r0, r8
 8004fc2:	4548      	cmp	r0, r9
 8004fc4:	d9f5      	bls.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8004fc6:	e7d5      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fc8:	6891      	ldr	r1, [r2, #8]
 8004fca:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004fce:	e679      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8004fd0:	4e48      	ldr	r6, [pc, #288]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004fd2:	6833      	ldr	r3, [r6, #0]
 8004fd4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fd8:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004fda:	f7fd fdd5 	bl	8002b88 <HAL_GetTick>
 8004fde:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fe0:	6833      	ldr	r3, [r6, #0]
 8004fe2:	011a      	lsls	r2, r3, #4
 8004fe4:	d472      	bmi.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004fe6:	6822      	ldr	r2, [r4, #0]
 8004fe8:	07d3      	lsls	r3, r2, #31
 8004fea:	d512      	bpl.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8004fec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fee:	b983      	cbnz	r3, 8005012 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ff0:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ff4:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ff8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ffc:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8005000:	430b      	orrs	r3, r1
 8005002:	6861      	ldr	r1, [r4, #4]
 8005004:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8005008:	68a1      	ldr	r1, [r4, #8]
 800500a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800500e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005012:	0317      	lsls	r7, r2, #12
 8005014:	d503      	bpl.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005016:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005018:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800501c:	d005      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x442>
 800501e:	02d6      	lsls	r6, r2, #11
 8005020:	d51e      	bpl.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x478>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005022:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005024:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005028:	d11a      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x478>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800502a:	4932      	ldr	r1, [pc, #200]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800502c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005030:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005034:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005038:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800503c:	4303      	orrs	r3, r0
 800503e:	6860      	ldr	r0, [r4, #4]
 8005040:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005044:	68e0      	ldr	r0, [r4, #12]
 8005046:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800504a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800504e:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8005052:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005054:	f020 001f 	bic.w	r0, r0, #31
 8005058:	3b01      	subs	r3, #1
 800505a:	4303      	orrs	r3, r0
 800505c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005060:	01d0      	lsls	r0, r2, #7
 8005062:	d511      	bpl.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005064:	4923      	ldr	r1, [pc, #140]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005066:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800506a:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800506e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8005072:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8005076:	4303      	orrs	r3, r0
 8005078:	6860      	ldr	r0, [r4, #4]
 800507a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800507e:	6920      	ldr	r0, [r4, #16]
 8005080:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005084:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005088:	0191      	lsls	r1, r2, #6
 800508a:	d50d      	bpl.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800508c:	6923      	ldr	r3, [r4, #16]
 800508e:	6862      	ldr	r2, [r4, #4]
 8005090:	041b      	lsls	r3, r3, #16
 8005092:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005096:	68e2      	ldr	r2, [r4, #12]
 8005098:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800509c:	68a2      	ldr	r2, [r4, #8]
 800509e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80050a2:	4a14      	ldr	r2, [pc, #80]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80050a4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80050a8:	4e12      	ldr	r6, [pc, #72]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80050aa:	6833      	ldr	r3, [r6, #0]
 80050ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050b0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80050b2:	f7fd fd69 	bl	8002b88 <HAL_GetTick>
 80050b6:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050b8:	6833      	ldr	r3, [r6, #0]
 80050ba:	011a      	lsls	r2, r3, #4
 80050bc:	f53f aed7 	bmi.w	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x286>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80050c0:	f7fd fd62 	bl	8002b88 <HAL_GetTick>
 80050c4:	1bc0      	subs	r0, r0, r7
 80050c6:	2864      	cmp	r0, #100	; 0x64
 80050c8:	d9f6      	bls.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80050ca:	e753      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80050cc:	f7fd fd5c 	bl	8002b88 <HAL_GetTick>
 80050d0:	1bc0      	subs	r0, r0, r7
 80050d2:	2864      	cmp	r0, #100	; 0x64
 80050d4:	d984      	bls.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80050d6:	e74d      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80050d8:	f7fd fd56 	bl	8002b88 <HAL_GetTick>
 80050dc:	1bc0      	subs	r0, r0, r7
 80050de:	2864      	cmp	r0, #100	; 0x64
 80050e0:	f67f aed0 	bls.w	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 80050e4:	e746      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80050e6:	f7fd fd4f 	bl	8002b88 <HAL_GetTick>
 80050ea:	1b40      	subs	r0, r0, r5
 80050ec:	2864      	cmp	r0, #100	; 0x64
 80050ee:	f67f af32 	bls.w	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80050f2:	e73f      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 80050f4:	40023800 	.word	0x40023800

080050f8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80050f8:	b538      	push	{r3, r4, r5, lr}
 80050fa:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80050fc:	4604      	mov	r4, r0
 80050fe:	b1c8      	cbz	r0, 8005134 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005100:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005104:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005108:	b91b      	cbnz	r3, 8005112 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800510a:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800510e:	f7fd f851 	bl	80021b4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005112:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005114:	1d21      	adds	r1, r4, #4
 8005116:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005118:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800511c:	f000 f843 	bl	80051a6 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005120:	6862      	ldr	r2, [r4, #4]
 8005122:	4629      	mov	r1, r5
 8005124:	6820      	ldr	r0, [r4, #0]
 8005126:	f000 f879 	bl	800521c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800512a:	2301      	movs	r3, #1

  return HAL_OK;
 800512c:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800512e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8005132:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005134:	2001      	movs	r0, #1
 8005136:	e7fc      	b.n	8005132 <HAL_SDRAM_Init+0x3a>

08005138 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005138:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800513a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800513e:	4605      	mov	r5, r0
 8005140:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005142:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005144:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8005146:	d010      	beq.n	800516a <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8005148:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 800514c:	2c01      	cmp	r4, #1
 800514e:	d110      	bne.n	8005172 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005150:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005152:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005154:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005158:	f000 f896 	bl	8005288 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800515c:	6833      	ldr	r3, [r6, #0]
 800515e:	2b02      	cmp	r3, #2
 8005160:	d104      	bne.n	800516c <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005162:	2305      	movs	r3, #5
 8005164:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005168:	2000      	movs	r0, #0
}
 800516a:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800516c:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 8005170:	e7fa      	b.n	8005168 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8005172:	2001      	movs	r0, #1
 8005174:	e7f9      	b.n	800516a <HAL_SDRAM_SendCommand+0x32>

08005176 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005176:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005178:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800517c:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800517e:	2b02      	cmp	r3, #2
 8005180:	b2d8      	uxtb	r0, r3
 8005182:	d00d      	beq.n	80051a0 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005184:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8005188:	2b01      	cmp	r3, #1
 800518a:	b2dd      	uxtb	r5, r3
 800518c:	d109      	bne.n	80051a2 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800518e:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005190:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005192:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005196:	f000 f889 	bl	80052ac <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800519a:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800519c:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 80051a0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80051a2:	2001      	movs	r0, #1
 80051a4:	e7fc      	b.n	80051a0 <HAL_SDRAM_ProgramRefreshRate+0x2a>

080051a6 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80051a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80051aa:	680a      	ldr	r2, [r1, #0]
 80051ac:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 80051b0:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 80051b4:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 80051b8:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 80051bc:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 80051c0:	4323      	orrs	r3, r4
 80051c2:	b9a2      	cbnz	r2, 80051ee <FMC_SDRAM_Init+0x48>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80051c4:	ea43 0209 	orr.w	r2, r3, r9
 80051c8:	6801      	ldr	r1, [r0, #0]
 80051ca:	432a      	orrs	r2, r5
 80051cc:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 80051d0:	ea42 0308 	orr.w	r3, r2, r8
 80051d4:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 80051d8:	ea43 030e 	orr.w	r3, r3, lr
 80051dc:	ea43 030c 	orr.w	r3, r3, ip
 80051e0:	433b      	orrs	r3, r7
 80051e2:	4333      	orrs	r3, r6
 80051e4:	430b      	orrs	r3, r1
 80051e6:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 80051e8:	2000      	movs	r0, #0
 80051ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80051ee:	6802      	ldr	r2, [r0, #0]
 80051f0:	ea43 0309 	orr.w	r3, r3, r9
 80051f4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80051f8:	4313      	orrs	r3, r2
 80051fa:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80051fc:	ea45 0308 	orr.w	r3, r5, r8
 8005200:	6842      	ldr	r2, [r0, #4]
 8005202:	ea43 030e 	orr.w	r3, r3, lr
 8005206:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800520a:	ea43 030c 	orr.w	r3, r3, ip
 800520e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8005212:	433b      	orrs	r3, r7
 8005214:	4333      	orrs	r3, r6
 8005216:	4313      	orrs	r3, r2
 8005218:	6043      	str	r3, [r0, #4]
 800521a:	e7e5      	b.n	80051e8 <FMC_SDRAM_Init+0x42>

0800521c <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800521c:	68cb      	ldr	r3, [r1, #12]
 800521e:	f103 3cff 	add.w	ip, r3, #4294967295
 8005222:	694b      	ldr	r3, [r1, #20]
{
 8005224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005226:	3b01      	subs	r3, #1
 8005228:	680f      	ldr	r7, [r1, #0]
 800522a:	684c      	ldr	r4, [r1, #4]
 800522c:	688e      	ldr	r6, [r1, #8]
 800522e:	051b      	lsls	r3, r3, #20
 8005230:	690d      	ldr	r5, [r1, #16]
 8005232:	3c01      	subs	r4, #1
 8005234:	6989      	ldr	r1, [r1, #24]
 8005236:	3e01      	subs	r6, #1
 8005238:	3d01      	subs	r5, #1
 800523a:	3f01      	subs	r7, #1
 800523c:	3901      	subs	r1, #1
 800523e:	0124      	lsls	r4, r4, #4
 8005240:	0236      	lsls	r6, r6, #8
 8005242:	042d      	lsls	r5, r5, #16
 8005244:	0609      	lsls	r1, r1, #24
 8005246:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800524a:	b95a      	cbnz	r2, 8005264 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800524c:	433b      	orrs	r3, r7
 800524e:	6882      	ldr	r2, [r0, #8]
 8005250:	4323      	orrs	r3, r4
 8005252:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8005256:	4333      	orrs	r3, r6
 8005258:	432b      	orrs	r3, r5
 800525a:	430b      	orrs	r3, r1
 800525c:	4313      	orrs	r3, r2
 800525e:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8005260:	2000      	movs	r0, #0
 8005262:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005264:	6882      	ldr	r2, [r0, #8]
 8005266:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800526a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800526e:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005270:	ea44 0306 	orr.w	r3, r4, r6
 8005274:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005276:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005278:	68c2      	ldr	r2, [r0, #12]
 800527a:	432b      	orrs	r3, r5
 800527c:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8005280:	430b      	orrs	r3, r1
 8005282:	4313      	orrs	r3, r2
 8005284:	60c3      	str	r3, [r0, #12]
 8005286:	e7eb      	b.n	8005260 <FMC_SDRAM_Timing_Init+0x44>

08005288 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8005288:	6902      	ldr	r2, [r0, #16]
{
 800528a:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800528c:	e9d1 3400 	ldrd	r3, r4, [r1]
 8005290:	0d92      	lsrs	r2, r2, #22
 8005292:	4323      	orrs	r3, r4
 8005294:	68cc      	ldr	r4, [r1, #12]
 8005296:	0592      	lsls	r2, r2, #22
 8005298:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800529c:	4313      	orrs	r3, r2
 800529e:	688a      	ldr	r2, [r1, #8]
 80052a0:	3a01      	subs	r2, #1
 80052a2:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80052a6:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 80052a8:	2000      	movs	r0, #0
 80052aa:	bd10      	pop	{r4, pc}

080052ac <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80052ac:	6943      	ldr	r3, [r0, #20]
 80052ae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80052b2:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80052b6:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 80052ba:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 80052bc:	2000      	movs	r0, #0
 80052be:	4770      	bx	lr

080052c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052c0:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80052c2:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80052c4:	4a0f      	ldr	r2, [pc, #60]	; (8005304 <USB_FlushTxFifo+0x44>)
  __IO uint32_t count = 0U;
 80052c6:	9301      	str	r3, [sp, #4]
    if (++count > 200000U)
 80052c8:	9b01      	ldr	r3, [sp, #4]
 80052ca:	3301      	adds	r3, #1
 80052cc:	4293      	cmp	r3, r2
 80052ce:	9301      	str	r3, [sp, #4]
 80052d0:	d815      	bhi.n	80052fe <USB_FlushTxFifo+0x3e>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052d2:	6903      	ldr	r3, [r0, #16]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	daf7      	bge.n	80052c8 <USB_FlushTxFifo+0x8>

  /* Flush TX Fifo */
  count = 0U;
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052d8:	0189      	lsls	r1, r1, #6
  count = 0U;
 80052da:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 80052dc:	4a09      	ldr	r2, [pc, #36]	; (8005304 <USB_FlushTxFifo+0x44>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052de:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 80052e2:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052e4:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80052e6:	9b01      	ldr	r3, [sp, #4]
 80052e8:	3301      	adds	r3, #1
 80052ea:	4293      	cmp	r3, r2
 80052ec:	9301      	str	r3, [sp, #4]
 80052ee:	d806      	bhi.n	80052fe <USB_FlushTxFifo+0x3e>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052f0:	6903      	ldr	r3, [r0, #16]
 80052f2:	f013 0320 	ands.w	r3, r3, #32
 80052f6:	d1f6      	bne.n	80052e6 <USB_FlushTxFifo+0x26>

  return HAL_OK;
 80052f8:	4618      	mov	r0, r3
}
 80052fa:	b002      	add	sp, #8
 80052fc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80052fe:	2003      	movs	r0, #3
 8005300:	e7fb      	b.n	80052fa <USB_FlushTxFifo+0x3a>
 8005302:	bf00      	nop
 8005304:	00030d40 	.word	0x00030d40

08005308 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005308:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800530a:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800530c:	4a0e      	ldr	r2, [pc, #56]	; (8005348 <USB_FlushRxFifo+0x40>)
  __IO uint32_t count = 0U;
 800530e:	9301      	str	r3, [sp, #4]
    if (++count > 200000U)
 8005310:	9b01      	ldr	r3, [sp, #4]
 8005312:	3301      	adds	r3, #1
 8005314:	4293      	cmp	r3, r2
 8005316:	9301      	str	r3, [sp, #4]
 8005318:	d813      	bhi.n	8005342 <USB_FlushRxFifo+0x3a>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800531a:	6903      	ldr	r3, [r0, #16]
 800531c:	2b00      	cmp	r3, #0
 800531e:	daf7      	bge.n	8005310 <USB_FlushRxFifo+0x8>

  /* Flush RX Fifo */
  count = 0U;
 8005320:	2300      	movs	r3, #0
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;

  do
  {
    if (++count > 200000U)
 8005322:	4a09      	ldr	r2, [pc, #36]	; (8005348 <USB_FlushRxFifo+0x40>)
  count = 0U;
 8005324:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005326:	2310      	movs	r3, #16
 8005328:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800532a:	9b01      	ldr	r3, [sp, #4]
 800532c:	3301      	adds	r3, #1
 800532e:	4293      	cmp	r3, r2
 8005330:	9301      	str	r3, [sp, #4]
 8005332:	d806      	bhi.n	8005342 <USB_FlushRxFifo+0x3a>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005334:	6903      	ldr	r3, [r0, #16]
 8005336:	f013 0310 	ands.w	r3, r3, #16
 800533a:	d1f6      	bne.n	800532a <USB_FlushRxFifo+0x22>

  return HAL_OK;
 800533c:	4618      	mov	r0, r3
}
 800533e:	b002      	add	sp, #8
 8005340:	4770      	bx	lr
      return HAL_TIMEOUT;
 8005342:	2003      	movs	r0, #3
 8005344:	e7fb      	b.n	800533e <USB_FlushRxFifo+0x36>
 8005346:	bf00      	nop
 8005348:	00030d40 	.word	0x00030d40

0800534c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800534c:	b570      	push	{r4, r5, r6, lr}
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
  uint16_t remaining_bytes = len % 4U;

  for (i = 0U; i < count32b; i++)
 800534e:	2300      	movs	r3, #0
  uint32_t count32b = (uint32_t)len >> 2U;
 8005350:	0894      	lsrs	r4, r2, #2
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005352:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
  uint16_t remaining_bytes = len % 4U;
 8005356:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 800535a:	42a3      	cmp	r3, r4
 800535c:	d314      	bcc.n	8005388 <USB_ReadPacket+0x3c>
 800535e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    pDest++;
    pDest++;
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005362:	b17a      	cbz	r2, 8005384 <USB_ReadPacket+0x38>
  {
    i = 0U;
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005364:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
    i = 0U;
 8005368:	2300      	movs	r3, #0
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800536a:	6804      	ldr	r4, [r0, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800536c:	00d8      	lsls	r0, r3, #3
 800536e:	fa24 f000 	lsr.w	r0, r4, r0
 8005372:	54c8      	strb	r0, [r1, r3]
      i++;
 8005374:	3301      	adds	r3, #1
      pDest++;
      remaining_bytes--;
    } while (remaining_bytes != 0U);
 8005376:	b298      	uxth	r0, r3
 8005378:	4282      	cmp	r2, r0
 800537a:	d1f7      	bne.n	800536c <USB_ReadPacket+0x20>
 800537c:	3a01      	subs	r2, #1
 800537e:	b292      	uxth	r2, r2
 8005380:	3201      	adds	r2, #1
 8005382:	4411      	add	r1, r2
  }

  return ((void *)pDest);
}
 8005384:	4608      	mov	r0, r1
 8005386:	bd70      	pop	{r4, r5, r6, pc}
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005388:	682e      	ldr	r6, [r5, #0]
 800538a:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
  for (i = 0U; i < count32b; i++)
 800538e:	3301      	adds	r3, #1
 8005390:	e7e3      	b.n	800535a <USB_ReadPacket+0xe>

08005392 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005392:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8005394:	6980      	ldr	r0, [r0, #24]

  return tmpreg;
}
 8005396:	4010      	ands	r0, r2
 8005398:	4770      	bx	lr

0800539a <USB_GetMode>:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS) & 0x1U);
 800539a:	6940      	ldr	r0, [r0, #20]
}
 800539c:	f000 0001 	and.w	r0, r0, #1
 80053a0:	4770      	bx	lr

080053a2 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80053a2:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;

  if (freq == HCFG_48_MHZ)
 80053a6:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80053a8:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 80053ac:	f023 0303 	bic.w	r3, r3, #3
{
 80053b0:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80053b2:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80053b6:	f001 0303 	and.w	r3, r1, #3
 80053ba:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 80053be:	ea43 0304 	orr.w	r3, r3, r4
 80053c2:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 80053c6:	d104      	bne.n	80053d2 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
 80053c8:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 80053cc:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 80053ce:	2000      	movs	r0, #0
 80053d0:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 80053d2:	2902      	cmp	r1, #2
 80053d4:	d1fb      	bne.n	80053ce <USB_InitFSLSPClkSel+0x2c>
    USBx_HOST->HFIR = 6000U;
 80053d6:	f241 7370 	movw	r3, #6000	; 0x1770
 80053da:	e7f7      	b.n	80053cc <USB_InitFSLSPClkSel+0x2a>

080053dc <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80053dc:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80053e0:	6940      	ldr	r0, [r0, #20]
}
 80053e2:	b280      	uxth	r0, r0
 80053e4:	4770      	bx	lr

080053e6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80053e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  __IO uint32_t count = 0U;
 80053e8:	2300      	movs	r3, #0
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80053ea:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  __IO uint32_t count = 0U;
 80053ee:	9301      	str	r3, [sp, #4]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80053f0:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 80053f4:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80053f8:	f8d1 4500 	ldr.w	r4, [r1, #1280]	; 0x500

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80053fc:	6885      	ldr	r5, [r0, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80053fe:	0c9b      	lsrs	r3, r3, #18
  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005400:	06ad      	lsls	r5, r5, #26
 8005402:	d501      	bpl.n	8005408 <USB_HC_Halt+0x22>
 8005404:	2c00      	cmp	r4, #0
 8005406:	da24      	bge.n	8005452 <USB_HC_Halt+0x6c>
  {
    return HAL_OK;
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005408:	f013 0f01 	tst.w	r3, #1
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800540c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005410:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005414:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005418:	d11e      	bne.n	8005458 <USB_HC_Halt+0x72>

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800541a:	6883      	ldr	r3, [r0, #8]
 800541c:	069b      	lsls	r3, r3, #26
 800541e:	d418      	bmi.n	8005452 <USB_HC_Halt+0x6c>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005420:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005422:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005426:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800542a:	d130      	bne.n	800548e <USB_HC_Halt+0xa8>
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800542c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005430:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005434:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005438:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800543c:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        do
        {
          if (++count > 1000U)
 8005440:	9b01      	ldr	r3, [sp, #4]
 8005442:	3301      	adds	r3, #1
 8005444:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005448:	9301      	str	r3, [sp, #4]
 800544a:	d802      	bhi.n	8005452 <USB_HC_Halt+0x6c>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800544c:	6813      	ldr	r3, [r2, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	dbf6      	blt.n	8005440 <USB_HC_Halt+0x5a>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8005452:	2000      	movs	r0, #0
 8005454:	b003      	add	sp, #12
 8005456:	bd30      	pop	{r4, r5, pc}
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005458:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 800545c:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005460:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005464:	d113      	bne.n	800548e <USB_HC_Halt+0xa8>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005466:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800546a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800546e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005472:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005476:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        if (++count > 1000U)
 800547a:	9b01      	ldr	r3, [sp, #4]
 800547c:	3301      	adds	r3, #1
 800547e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005482:	9301      	str	r3, [sp, #4]
 8005484:	d8e5      	bhi.n	8005452 <USB_HC_Halt+0x6c>
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005486:	6813      	ldr	r3, [r2, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	dbf6      	blt.n	800547a <USB_HC_Halt+0x94>
 800548c:	e7e1      	b.n	8005452 <USB_HC_Halt+0x6c>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800548e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005492:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8005496:	e7dc      	b.n	8005452 <USB_HC_Halt+0x6c>

08005498 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 8005498:	b530      	push	{r4, r5, lr}
  err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 800549a:	4c26      	ldr	r4, [pc, #152]	; (8005534 <MX_X_CUBE_AI_Init+0x9c>)
{
 800549c:	b08d      	sub	sp, #52	; 0x34
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 800549e:	4826      	ldr	r0, [pc, #152]	; (8005538 <MX_X_CUBE_AI_Init+0xa0>)
 80054a0:	f005 fbdc 	bl	800ac5c <puts>

  ai_boostrap(ai_network_data_weights_get(), activations);
 80054a4:	f000 fa26 	bl	80058f4 <ai_network_data_weights_get>
  err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 80054a8:	2100      	movs	r1, #0
  ai_boostrap(ai_network_data_weights_get(), activations);
 80054aa:	4605      	mov	r5, r0
  err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 80054ac:	4620      	mov	r0, r4
 80054ae:	f000 f93d 	bl	800572c <ai_network_create>
  if (err.type != AI_ERROR_NONE) {
 80054b2:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
 80054b6:	d005      	beq.n	80054c4 <MX_X_CUBE_AI_Init+0x2c>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80054b8:	0a03      	lsrs	r3, r0, #8
 80054ba:	4920      	ldr	r1, [pc, #128]	; (800553c <MX_X_CUBE_AI_Init+0xa4>)
 80054bc:	4820      	ldr	r0, [pc, #128]	; (8005540 <MX_X_CUBE_AI_Init+0xa8>)
 80054be:	f005 fb47 	bl	800ab50 <iprintf>
  do {} while (1);
 80054c2:	e7fe      	b.n	80054c2 <MX_X_CUBE_AI_Init+0x2a>
  const ai_network_params params = AI_NETWORK_PARAMS_INIT(
 80054c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054c8:	4b1e      	ldr	r3, [pc, #120]	; (8005544 <MX_X_CUBE_AI_Init+0xac>)
 80054ca:	481f      	ldr	r0, [pc, #124]	; (8005548 <MX_X_CUBE_AI_Init+0xb0>)
 80054cc:	9205      	str	r2, [sp, #20]
 80054ce:	e9cd 3100 	strd	r3, r1, [sp]
 80054d2:	2301      	movs	r3, #1
 80054d4:	f8ad 3008 	strh.w	r3, [sp, #8]
 80054d8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80054dc:	f44f 43e9 	mov.w	r3, #29824	; 0x7480
 80054e0:	e9cd 0503 	strd	r0, r5, [sp, #12]
 80054e4:	4819      	ldr	r0, [pc, #100]	; (800554c <MX_X_CUBE_AI_Init+0xb4>)
 80054e6:	9309      	str	r3, [sp, #36]	; 0x24
 80054e8:	4b19      	ldr	r3, [pc, #100]	; (8005550 <MX_X_CUBE_AI_Init+0xb8>)
 80054ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
  if (!ai_network_init(network, &params)) {
 80054ee:	4669      	mov	r1, sp
 80054f0:	6820      	ldr	r0, [r4, #0]
  const ai_network_params params = AI_NETWORK_PARAMS_INIT(
 80054f2:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  if (!ai_network_init(network, &params)) {
 80054f6:	f000 f927 	bl	8005748 <ai_network_init>
 80054fa:	b948      	cbnz	r0, 8005510 <MX_X_CUBE_AI_Init+0x78>
      err = ai_network_get_error(network);
 80054fc:	6820      	ldr	r0, [r4, #0]
 80054fe:	f000 f913 	bl	8005728 <ai_network_get_error>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8005502:	4914      	ldr	r1, [pc, #80]	; (8005554 <MX_X_CUBE_AI_Init+0xbc>)
 8005504:	0a03      	lsrs	r3, r0, #8
 8005506:	b2c2      	uxtb	r2, r0
 8005508:	480d      	ldr	r0, [pc, #52]	; (8005540 <MX_X_CUBE_AI_Init+0xa8>)
 800550a:	f005 fb21 	bl	800ab50 <iprintf>
  do {} while (1);
 800550e:	e7fe      	b.n	800550e <MX_X_CUBE_AI_Init+0x76>
  if (!ai_network_get_info(network, &network_info)) {
 8005510:	4911      	ldr	r1, [pc, #68]	; (8005558 <MX_X_CUBE_AI_Init+0xc0>)
 8005512:	6820      	ldr	r0, [r4, #0]
 8005514:	f000 f8c0 	bl	8005698 <ai_network_get_info>
 8005518:	b948      	cbnz	r0, 800552e <MX_X_CUBE_AI_Init+0x96>
    err = ai_network_get_error(network);
 800551a:	6820      	ldr	r0, [r4, #0]
 800551c:	f000 f904 	bl	8005728 <ai_network_get_error>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8005520:	490e      	ldr	r1, [pc, #56]	; (800555c <MX_X_CUBE_AI_Init+0xc4>)
 8005522:	0a03      	lsrs	r3, r0, #8
 8005524:	b2c2      	uxtb	r2, r0
 8005526:	4806      	ldr	r0, [pc, #24]	; (8005540 <MX_X_CUBE_AI_Init+0xa8>)
 8005528:	f005 fb12 	bl	800ab50 <iprintf>
  do {} while (1);
 800552c:	e7fe      	b.n	800552c <MX_X_CUBE_AI_Init+0x94>
    /* USER CODE END 5 */
}
 800552e:	b00d      	add	sp, #52	; 0x34
 8005530:	bd30      	pop	{r4, r5, pc}
 8005532:	bf00      	nop
 8005534:	20008158 	.word	0x20008158
 8005538:	0800e6a5 	.word	0x0800e6a5
 800553c:	0800e6c2 	.word	0x0800e6c2
 8005540:	0800e6d4 	.word	0x0800e6d4
 8005544:	40040440 	.word	0x40040440
 8005548:	0005b228 	.word	0x0005b228
 800554c:	00040440 	.word	0x00040440
 8005550:	20000cd8 	.word	0x20000cd8
 8005554:	0800e706 	.word	0x0800e706
 8005558:	2000815c 	.word	0x2000815c
 800555c:	0800e716 	.word	0x0800e716

08005560 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8005560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* USER CODE BEGIN 6 */
	  uint8_t text[20] = {0};
 8005564:	2400      	movs	r4, #0
 8005566:	2210      	movs	r2, #16
{
 8005568:	ed2d 8b02 	vpush	{d8}
 800556c:	f5ad 6d79 	sub.w	sp, sp, #3984	; 0xf90
	  uint8_t text[20] = {0};
 8005570:	4621      	mov	r1, r4
 8005572:	a802      	add	r0, sp, #8
 8005574:	9401      	str	r4, [sp, #4]
 8005576:	f005 fa39 	bl	800a9ec <memset>
	  uint8_t dst_image[784] = {0};
 800557a:	f44f 7243 	mov.w	r2, #780	; 0x30c
 800557e:	4621      	mov	r1, r4
 8005580:	a811      	add	r0, sp, #68	; 0x44
 8005582:	9410      	str	r4, [sp, #64]	; 0x40
 8005584:	f005 fa32 	bl	800a9ec <memset>
	  float nn_input[28][28];
	  float nn_output[10];

	  scale_nearest_neighbour_algorithm((uint32_t *)SDRAM_DEVICE_ADDR, dst_image);
 8005588:	a910      	add	r1, sp, #64	; 0x40
 800558a:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 800558e:	f7fc fd29 	bl	8001fe4 <scale_nearest_neighbour_algorithm>

	  for(uint32_t y=0; y < 28; y++)
 8005592:	aad4      	add	r2, sp, #848	; 0x350
	  scale_nearest_neighbour_algorithm((uint32_t *)SDRAM_DEVICE_ADDR, dst_image);
 8005594:	4623      	mov	r3, r4
	  {
		  for(uint32_t x=0; x < 28; x++)
		  {
			  nn_input[y][x] = dst_image[y*28+x]/255.0f;
 8005596:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8005678 <MX_X_CUBE_AI_Process+0x118>
 800559a:	4615      	mov	r5, r2
		  for(uint32_t x=0; x < 28; x++)
 800559c:	a910      	add	r1, sp, #64	; 0x40
{
 800559e:	241c      	movs	r4, #28
 80055a0:	18c8      	adds	r0, r1, r3
 80055a2:	4611      	mov	r1, r2
			  nn_input[y][x] = dst_image[y*28+x]/255.0f;
 80055a4:	f810 6b01 	ldrb.w	r6, [r0], #1
		  for(uint32_t x=0; x < 28; x++)
 80055a8:	3c01      	subs	r4, #1
			  nn_input[y][x] = dst_image[y*28+x]/255.0f;
 80055aa:	ee07 6a90 	vmov	s15, r6
 80055ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80055b6:	ece1 6a01 	vstmia	r1!, {s13}
		  for(uint32_t x=0; x < 28; x++)
 80055ba:	d1f3      	bne.n	80055a4 <MX_X_CUBE_AI_Process+0x44>
	  for(uint32_t y=0; y < 28; y++)
 80055bc:	331c      	adds	r3, #28
 80055be:	3270      	adds	r2, #112	; 0x70
 80055c0:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 80055c4:	d1ea      	bne.n	800559c <MX_X_CUBE_AI_Process+0x3c>
  ai_buffer *ai_input = network_info.inputs;
 80055c6:	4b2d      	ldr	r3, [pc, #180]	; (800567c <MX_X_CUBE_AI_Process+0x11c>)
  batch = ai_network_run(network, ai_input, ai_output);
 80055c8:	4e2d      	ldr	r6, [pc, #180]	; (8005680 <MX_X_CUBE_AI_Process+0x120>)
  ai_buffer *ai_output = network_info.outputs;
 80055ca:	e9d3 120d 	ldrd	r1, r2, [r3, #52]	; 0x34
  batch = ai_network_run(network, ai_input, ai_output);
 80055ce:	6830      	ldr	r0, [r6, #0]
  ai_input[0].data = AI_HANDLE_PTR(data_in);
 80055d0:	610d      	str	r5, [r1, #16]
  ai_output[0].data = AI_HANDLE_PTR(data_out);
 80055d2:	ad06      	add	r5, sp, #24
 80055d4:	6115      	str	r5, [r2, #16]
  batch = ai_network_run(network, ai_input, ai_output);
 80055d6:	f000 f98b 	bl	80058f0 <ai_network_run>
  if (batch != 1) {
 80055da:	2801      	cmp	r0, #1
 80055dc:	d009      	beq.n	80055f2 <MX_X_CUBE_AI_Process+0x92>
    ai_log_err(ai_network_get_error(network),
 80055de:	6830      	ldr	r0, [r6, #0]
 80055e0:	f000 f8a2 	bl	8005728 <ai_network_get_error>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80055e4:	4927      	ldr	r1, [pc, #156]	; (8005684 <MX_X_CUBE_AI_Process+0x124>)
 80055e6:	0a03      	lsrs	r3, r0, #8
 80055e8:	b2c2      	uxtb	r2, r0
 80055ea:	4827      	ldr	r0, [pc, #156]	; (8005688 <MX_X_CUBE_AI_Process+0x128>)
 80055ec:	f005 fab0 	bl	800ab50 <iprintf>
  do {} while (1);
 80055f0:	e7fe      	b.n	80055f0 <MX_X_CUBE_AI_Process+0x90>

	  Virtual_LED_OFF_All();

	  for (int i = 0; i < 10; ++i)
	  {
		  if(nn_output[i] > 0.90)
 80055f2:	a71f      	add	r7, pc, #124	; (adr r7, 8005670 <MX_X_CUBE_AI_Process+0x110>)
 80055f4:	e9d7 6700 	ldrd	r6, r7, [r7]
		  {
			  Virtual_LED_ON(i);

			  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);

			  sprintf((char *)text, (char *)"Digit: %d", i);
 80055f8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8005694 <MX_X_CUBE_AI_Process+0x134>
	  Virtual_LED_OFF_All();
 80055fc:	f7fc fce8 	bl	8001fd0 <Virtual_LED_OFF_All>
			  BSP_LCD_DisplayStringAt(50, 20, text, LEFT_MODE);

			  sprintf((char *)text, (char *)"Accuracy: %d", (int)(nn_output[i]*100));
 8005600:	ed9f 8a22 	vldr	s16, [pc, #136]	; 800568c <MX_X_CUBE_AI_Process+0x12c>
		  if(nn_output[i] > 0.90)
 8005604:	f855 0b04 	ldr.w	r0, [r5], #4
 8005608:	f7fa ffb6 	bl	8000578 <__aeabi_f2d>
 800560c:	4632      	mov	r2, r6
 800560e:	463b      	mov	r3, r7
 8005610:	f7fb fa9a 	bl	8000b48 <__aeabi_dcmpgt>
 8005614:	b318      	cbz	r0, 800565e <MX_X_CUBE_AI_Process+0xfe>
			  Virtual_LED_ON(i);
 8005616:	4620      	mov	r0, r4
 8005618:	f7fc fcb2 	bl	8001f80 <Virtual_LED_ON>
			  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800561c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8005620:	f7fb fdde 	bl	80011e0 <BSP_LCD_SetTextColor>
			  sprintf((char *)text, (char *)"Digit: %d", i);
 8005624:	4622      	mov	r2, r4
 8005626:	4641      	mov	r1, r8
 8005628:	a801      	add	r0, sp, #4
 800562a:	f005 fb2f 	bl	800ac8c <siprintf>
			  BSP_LCD_DisplayStringAt(50, 20, text, LEFT_MODE);
 800562e:	2303      	movs	r3, #3
 8005630:	aa01      	add	r2, sp, #4
 8005632:	2114      	movs	r1, #20
 8005634:	2032      	movs	r0, #50	; 0x32
 8005636:	f7fb fea5 	bl	8001384 <BSP_LCD_DisplayStringAt>
			  sprintf((char *)text, (char *)"Accuracy: %d", (int)(nn_output[i]*100));
 800563a:	ed55 7a01 	vldr	s15, [r5, #-4]
 800563e:	4914      	ldr	r1, [pc, #80]	; (8005690 <MX_X_CUBE_AI_Process+0x130>)
 8005640:	a801      	add	r0, sp, #4
 8005642:	ee67 7a88 	vmul.f32	s15, s15, s16
 8005646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800564a:	ee17 2a90 	vmov	r2, s15
 800564e:	f005 fb1d 	bl	800ac8c <siprintf>
			  BSP_LCD_DisplayStringAt(50, 50, text, LEFT_MODE);
 8005652:	2132      	movs	r1, #50	; 0x32
 8005654:	2303      	movs	r3, #3
 8005656:	aa01      	add	r2, sp, #4
 8005658:	4608      	mov	r0, r1
 800565a:	f7fb fe93 	bl	8001384 <BSP_LCD_DisplayStringAt>
	  for (int i = 0; i < 10; ++i)
 800565e:	3401      	adds	r4, #1
 8005660:	2c0a      	cmp	r4, #10
 8005662:	d1cf      	bne.n	8005604 <MX_X_CUBE_AI_Process+0xa4>
		  }
	  }
    /* USER CODE END 6 */
}
 8005664:	f50d 6d79 	add.w	sp, sp, #3984	; 0xf90
 8005668:	ecbd 8b02 	vpop	{d8}
 800566c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005670:	cccccccd 	.word	0xcccccccd
 8005674:	3feccccc 	.word	0x3feccccc
 8005678:	437f0000 	.word	0x437f0000
 800567c:	2000815c 	.word	0x2000815c
 8005680:	20008158 	.word	0x20008158
 8005684:	0800e72b 	.word	0x0800e72b
 8005688:	0800e6d4 	.word	0x0800e6d4
 800568c:	42c80000 	.word	0x42c80000
 8005690:	0800e744 	.word	0x0800e744
 8005694:	0800e73a 	.word	0x0800e73a

08005698 <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/
AI_DEPRECATED
AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 8005698:	b530      	push	{r4, r5, lr}
 800569a:	460d      	mov	r5, r1
 800569c:	b09f      	sub	sp, #124	; 0x7c
 800569e:	4604      	mov	r4, r0
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 80056a0:	f000 fb60 	bl	8005d64 <ai_platform_context_acquire>

  if (report && net_ctx)
 80056a4:	2d00      	cmp	r5, #0
 80056a6:	d02f      	beq.n	8005708 <ai_network_get_info+0x70>
 80056a8:	2800      	cmp	r0, #0
 80056aa:	d02f      	beq.n	800570c <ai_network_get_info+0x74>
  {
    ai_network_report r = {
 80056ac:	2264      	movs	r2, #100	; 0x64
 80056ae:	2100      	movs	r1, #0
 80056b0:	a805      	add	r0, sp, #20
 80056b2:	f005 f99b 	bl	800a9ec <memset>
 80056b6:	4b16      	ldr	r3, [pc, #88]	; (8005710 <ai_network_get_info+0x78>)
 80056b8:	9301      	str	r3, [sp, #4]
 80056ba:	4b16      	ldr	r3, [pc, #88]	; (8005714 <ai_network_get_info+0x7c>)
 80056bc:	9302      	str	r3, [sp, #8]
 80056be:	4b16      	ldr	r3, [pc, #88]	; (8005718 <ai_network_get_info+0x80>)
 80056c0:	9303      	str	r3, [sp, #12]
 80056c2:	4b16      	ldr	r3, [pc, #88]	; (800571c <ai_network_get_info+0x84>)
 80056c4:	9304      	str	r3, [sp, #16]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 80056c6:	f000 f989 	bl	80059dc <ai_platform_runtime_get_revision>
    ai_network_report r = {
 80056ca:	9005      	str	r0, [sp, #20]
      .runtime_version   = ai_platform_runtime_get_version(),
 80056cc:	f000 f9ee 	bl	8005aac <ai_platform_runtime_get_version>
    ai_network_report r = {
 80056d0:	4b13      	ldr	r3, [pc, #76]	; (8005720 <ai_network_get_info+0x88>)
      .runtime_version   = ai_platform_runtime_get_version(),
 80056d2:	9006      	str	r0, [sp, #24]
    ai_network_report r = {
 80056d4:	9307      	str	r3, [sp, #28]
 80056d6:	2307      	movs	r3, #7
 80056d8:	f88d 3020 	strb.w	r3, [sp, #32]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 80056dc:	f000 fa4e 	bl	8005b7c <ai_platform_api_get_version>
 80056e0:	900a      	str	r0, [sp, #40]	; 0x28
      .interface_api_version  = ai_platform_interface_api_get_version(),
 80056e2:	f000 fac5 	bl	8005c70 <ai_platform_interface_api_get_version>
    ai_network_report r = {
 80056e6:	4b0f      	ldr	r3, [pc, #60]	; (8005724 <ai_network_get_info+0x8c>)
      .activations       = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 80056e8:	a901      	add	r1, sp, #4
      .interface_api_version  = ai_platform_interface_api_get_version(),
 80056ea:	900b      	str	r0, [sp, #44]	; 0x2c
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 80056ec:	4620      	mov	r0, r4
    ai_network_report r = {
 80056ee:	930c      	str	r3, [sp, #48]	; 0x30
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 80056f0:	f000 fc6a 	bl	8005fc8 <ai_platform_api_get_network_report>
 80056f4:	4604      	mov	r4, r0
 80056f6:	b120      	cbz	r0, 8005702 <ai_network_get_info+0x6a>

    *report = r;
 80056f8:	2274      	movs	r2, #116	; 0x74
 80056fa:	a901      	add	r1, sp, #4
 80056fc:	4628      	mov	r0, r5
 80056fe:	f005 f967 	bl	800a9d0 <memcpy>
    return true;
  }
  return false;
}
 8005702:	4620      	mov	r0, r4
 8005704:	b01f      	add	sp, #124	; 0x7c
 8005706:	bd30      	pop	{r4, r5, pc}
  return false;
 8005708:	462c      	mov	r4, r5
 800570a:	e7fa      	b.n	8005702 <ai_network_get_info+0x6a>
 800570c:	4604      	mov	r4, r0
 800570e:	e7f8      	b.n	8005702 <ai_network_get_info+0x6a>
 8005710:	0800e751 	.word	0x0800e751
 8005714:	0800e759 	.word	0x0800e759
 8005718:	0800e77a 	.word	0x0800e77a
 800571c:	0800e793 	.word	0x0800e793
 8005720:	0800e705 	.word	0x0800e705
 8005724:	002b8740 	.word	0x002b8740

08005728 <ai_network_get_error>:
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8005728:	f000 bb8a 	b.w	8005e40 <ai_platform_network_get_error>

0800572c <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800572c:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 800572e:	2304      	movs	r3, #4
 8005730:	2200      	movs	r2, #0
 8005732:	e9cd 3200 	strd	r3, r2, [sp]
 8005736:	2301      	movs	r3, #1
 8005738:	4a02      	ldr	r2, [pc, #8]	; (8005744 <ai_network_create+0x18>)
 800573a:	f000 ffc7 	bl	80066cc <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800573e:	b003      	add	sp, #12
 8005740:	f85d fb04 	ldr.w	pc, [sp], #4
 8005744:	200009e4 	.word	0x200009e4

08005748 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8005748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800574a:	b085      	sub	sp, #20
 800574c:	4605      	mov	r5, r0
 800574e:	9101      	str	r1, [sp, #4]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8005750:	f001 f90c 	bl	800696c <ai_platform_network_init>
  if (!net_ctx) return false;
 8005754:	2800      	cmp	r0, #0
 8005756:	f000 80a1 	beq.w	800589c <ai_network_init+0x154>
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 800575a:	2300      	movs	r3, #0
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 800575c:	9a01      	ldr	r2, [sp, #4]
 800575e:	2101      	movs	r1, #1
 8005760:	a803      	add	r0, sp, #12
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8005762:	9303      	str	r3, [sp, #12]
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8005764:	f000 f8ce 	bl	8005904 <ai_platform_get_weights_map>
 8005768:	9a01      	ldr	r2, [sp, #4]
 800576a:	4604      	mov	r4, r0
 800576c:	2800      	cmp	r0, #0
 800576e:	d060      	beq.n	8005832 <ai_network_init+0xea>
    conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005770:	494b      	ldr	r1, [pc, #300]	; (80058a0 <ai_network_init+0x158>)
 8005772:	680b      	ldr	r3, [r1, #0]
 8005774:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005778:	600b      	str	r3, [r1, #0]
    conv2d_weights_array.data = AI_PTR(weights_map[0] + 0);
 800577a:	9b03      	ldr	r3, [sp, #12]
    conv2d_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 800577c:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005780:	4948      	ldr	r1, [pc, #288]	; (80058a4 <ai_network_init+0x15c>)
 8005782:	6808      	ldr	r0, [r1, #0]
 8005784:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005788:	6008      	str	r0, [r1, #0]
    conv2d_bias_array.data = AI_PTR(weights_map[0] + 1152);
 800578a:	f503 6090 	add.w	r0, r3, #1152	; 0x480
    conv2d_bias_array.data_start = AI_PTR(weights_map[0] + 1152);
 800578e:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005792:	4945      	ldr	r1, [pc, #276]	; (80058a8 <ai_network_init+0x160>)
 8005794:	6808      	ldr	r0, [r1, #0]
 8005796:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800579a:	6008      	str	r0, [r1, #0]
    conv2d_1_weights_array.data = AI_PTR(weights_map[0] + 1280);
 800579c:	f503 60a0 	add.w	r0, r3, #1280	; 0x500
    conv2d_1_weights_array.data_start = AI_PTR(weights_map[0] + 1280);
 80057a0:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80057a4:	4941      	ldr	r1, [pc, #260]	; (80058ac <ai_network_init+0x164>)
 80057a6:	6808      	ldr	r0, [r1, #0]
 80057a8:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80057ac:	6008      	str	r0, [r1, #0]
    conv2d_1_bias_array.data = AI_PTR(weights_map[0] + 75008);
 80057ae:	f503 3092 	add.w	r0, r3, #74752	; 0x12400
 80057b2:	f500 7080 	add.w	r0, r0, #256	; 0x100
    conv2d_1_bias_array.data_start = AI_PTR(weights_map[0] + 75008);
 80057b6:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80057ba:	493d      	ldr	r1, [pc, #244]	; (80058b0 <ai_network_init+0x168>)
 80057bc:	6808      	ldr	r0, [r1, #0]
 80057be:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80057c2:	6008      	str	r0, [r1, #0]
    conv2d_2_weights_array.data = AI_PTR(weights_map[0] + 75264);
 80057c4:	f503 3093 	add.w	r0, r3, #75264	; 0x12600
    conv2d_2_weights_array.data_start = AI_PTR(weights_map[0] + 75264);
 80057c8:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80057cc:	4939      	ldr	r1, [pc, #228]	; (80058b4 <ai_network_init+0x16c>)
 80057ce:	6808      	ldr	r0, [r1, #0]
 80057d0:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80057d4:	6008      	str	r0, [r1, #0]
    conv2d_2_bias_array.data = AI_PTR(weights_map[0] + 222720);
 80057d6:	f503 3059 	add.w	r0, r3, #222208	; 0x36400
 80057da:	f500 7600 	add.w	r6, r0, #512	; 0x200
    dense_weights_array.data = AI_PTR(weights_map[0] + 222976);
 80057de:	f500 7040 	add.w	r0, r0, #768	; 0x300
    conv2d_2_bias_array.data_start = AI_PTR(weights_map[0] + 222720);
 80057e2:	e9c1 6602 	strd	r6, r6, [r1, #8]
    dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80057e6:	4934      	ldr	r1, [pc, #208]	; (80058b8 <ai_network_init+0x170>)
 80057e8:	680e      	ldr	r6, [r1, #0]
 80057ea:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    dense_weights_array.data_start = AI_PTR(weights_map[0] + 222976);
 80057ee:	e9c1 0002 	strd	r0, r0, [r1, #8]
    dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80057f2:	600e      	str	r6, [r1, #0]
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80057f4:	4931      	ldr	r1, [pc, #196]	; (80058bc <ai_network_init+0x174>)
 80057f6:	6808      	ldr	r0, [r1, #0]
 80057f8:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80057fc:	6008      	str	r0, [r1, #0]
    dense_bias_array.data = AI_PTR(weights_map[0] + 370432);
 80057fe:	f503 20b4 	add.w	r0, r3, #368640	; 0x5a000
 8005802:	f500 60e0 	add.w	r0, r0, #1792	; 0x700
    dense_bias_array.data_start = AI_PTR(weights_map[0] + 370432);
 8005806:	e9c1 0002 	strd	r0, r0, [r1, #8]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800580a:	492d      	ldr	r1, [pc, #180]	; (80058c0 <ai_network_init+0x178>)
 800580c:	6808      	ldr	r0, [r1, #0]
 800580e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005812:	6008      	str	r0, [r1, #0]
    dense_1_weights_array.data = AI_PTR(weights_map[0] + 370688);
 8005814:	f503 20b5 	add.w	r0, r3, #370688	; 0x5a800
    dense_1_bias_array.data = AI_PTR(weights_map[0] + 373248);
 8005818:	f503 23b6 	add.w	r3, r3, #372736	; 0x5b000
    dense_1_weights_array.data_start = AI_PTR(weights_map[0] + 370688);
 800581c:	e9c1 0002 	strd	r0, r0, [r1, #8]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005820:	4928      	ldr	r1, [pc, #160]	; (80058c4 <ai_network_init+0x17c>)
    dense_1_bias_array.data = AI_PTR(weights_map[0] + 373248);
 8005822:	f503 7300 	add.w	r3, r3, #512	; 0x200
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005826:	6808      	ldr	r0, [r1, #0]
 8005828:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    dense_1_bias_array.data_start = AI_PTR(weights_map[0] + 373248);
 800582c:	e9c1 3302 	strd	r3, r3, [r1, #8]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005830:	6008      	str	r0, [r1, #0]
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8005832:	2600      	movs	r6, #0
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8005834:	2101      	movs	r1, #1
 8005836:	a803      	add	r0, sp, #12
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8005838:	9603      	str	r6, [sp, #12]
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 800583a:	f000 f899 	bl	8005970 <ai_platform_get_activations_map>
 800583e:	4607      	mov	r7, r0
 8005840:	b330      	cbz	r0, 8005890 <ai_network_init+0x148>
    input_0_output_array.data = AI_PTR(NULL);
 8005842:	4b21      	ldr	r3, [pc, #132]	; (80058c8 <ai_network_init+0x180>)
    conv2d_output_array.data = AI_PTR(activations_map[0] + 1536);
 8005844:	4a21      	ldr	r2, [pc, #132]	; (80058cc <ai_network_init+0x184>)
    input_0_output_array.data_start = AI_PTR(NULL);
 8005846:	e9c3 6602 	strd	r6, r6, [r3, #8]
    conv2d_output_array.data = AI_PTR(activations_map[0] + 1536);
 800584a:	9b03      	ldr	r3, [sp, #12]
 800584c:	f503 61c0 	add.w	r1, r3, #1536	; 0x600
    conv2d_output_array.data_start = AI_PTR(activations_map[0] + 1536);
 8005850:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_1_output_array.data = AI_PTR(activations_map[0] + 0);
 8005854:	4a1e      	ldr	r2, [pc, #120]	; (80058d0 <ai_network_init+0x188>)
    conv2d_2_output_array.data = AI_PTR(activations_map[0] + 6400);
 8005856:	f503 51c8 	add.w	r1, r3, #6400	; 0x1900
    conv2d_1_output_array.data_start = AI_PTR(activations_map[0] + 0);
 800585a:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_2_output_array.data = AI_PTR(activations_map[0] + 6400);
 800585e:	4a1d      	ldr	r2, [pc, #116]	; (80058d4 <ai_network_init+0x18c>)
    conv2d_2_output_array.data_start = AI_PTR(activations_map[0] + 6400);
 8005860:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_output_array.data = AI_PTR(activations_map[0] + 0);
 8005864:	4a1c      	ldr	r2, [pc, #112]	; (80058d8 <ai_network_init+0x190>)
    dense_nl_output_array.data = AI_PTR(activations_map[0] + 256);
 8005866:	f503 7180 	add.w	r1, r3, #256	; 0x100
    dense_output_array.data_start = AI_PTR(activations_map[0] + 0);
 800586a:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_nl_output_array.data = AI_PTR(activations_map[0] + 256);
 800586e:	4a1b      	ldr	r2, [pc, #108]	; (80058dc <ai_network_init+0x194>)
    dense_nl_output_array.data_start = AI_PTR(activations_map[0] + 256);
 8005870:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_output_array.data = AI_PTR(activations_map[0] + 0);
 8005874:	4a1a      	ldr	r2, [pc, #104]	; (80058e0 <ai_network_init+0x198>)
    dense_1_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8005876:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_1_nl_output_array.data = AI_PTR(NULL);
 800587a:	4a1a      	ldr	r2, [pc, #104]	; (80058e4 <ai_network_init+0x19c>)
    conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 23168);
 800587c:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
    dense_1_nl_output_array.data_start = AI_PTR(NULL);
 8005880:	e9c2 6602 	strd	r6, r6, [r2, #8]
    conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 23168);
 8005884:	4a18      	ldr	r2, [pc, #96]	; (80058e8 <ai_network_init+0x1a0>)
    conv2d_scratch0_array.data_start = AI_PTR(activations_map[0] + 23168);
 8005886:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_1_scratch0_array.data = AI_PTR(activations_map[0] + 23168);
 800588a:	4a18      	ldr	r2, [pc, #96]	; (80058ec <ai_network_init+0x1a4>)
    conv2d_1_scratch0_array.data_start = AI_PTR(activations_map[0] + 23168);
 800588c:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8005890:	4628      	mov	r0, r5
 8005892:	f001 f9d7 	bl	8006c44 <ai_platform_network_post_init>
 8005896:	4038      	ands	r0, r7
 8005898:	4020      	ands	r0, r4
 800589a:	b2c0      	uxtb	r0, r0

  return ok;
}
 800589c:	b005      	add	sp, #20
 800589e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058a0:	200007fc 	.word	0x200007fc
 80058a4:	2000071c 	.word	0x2000071c
 80058a8:	20000610 	.word	0x20000610
 80058ac:	20000530 	.word	0x20000530
 80058b0:	200006f0 	.word	0x200006f0
 80058b4:	2000063c 	.word	0x2000063c
 80058b8:	200009d4 	.word	0x200009d4
 80058bc:	20000914 	.word	0x20000914
 80058c0:	200008e8 	.word	0x200008e8
 80058c4:	20000828 	.word	0x20000828
 80058c8:	20000a48 	.word	0x20000a48
 80058cc:	200007a4 	.word	0x200007a4
 80058d0:	200005b8 	.word	0x200005b8
 80058d4:	200006c4 	.word	0x200006c4
 80058d8:	200009a8 	.word	0x200009a8
 80058dc:	2000097c 	.word	0x2000097c
 80058e0:	200008bc 	.word	0x200008bc
 80058e4:	20000890 	.word	0x20000890
 80058e8:	200007d0 	.word	0x200007d0
 80058ec:	200005e4 	.word	0x200005e4

080058f0 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 80058f0:	f001 ba8a 	b.w	8006e08 <ai_platform_network_process>

080058f4 <ai_network_data_weights_get>:
    AI_PTR(AI_MAGIC_MARKER)
  };

  return AI_HANDLE_PTR(s_network_weights_map);

}
 80058f4:	4800      	ldr	r0, [pc, #0]	; (80058f8 <ai_network_data_weights_get+0x4>)
 80058f6:	4770      	bx	lr
 80058f8:	08069a08 	.word	0x08069a08

080058fc <_ai_platform_acquire_crc>:
 80058fc:	2001      	movs	r0, #1
 80058fe:	4770      	bx	lr

08005900 <_ai_platform_release_crc>:
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop

08005904 <ai_platform_get_weights_map>:
 8005904:	b14a      	cbz	r2, 800591a <ai_platform_get_weights_map+0x16>
 8005906:	6913      	ldr	r3, [r2, #16]
 8005908:	b133      	cbz	r3, 8005918 <ai_platform_get_weights_map+0x14>
 800590a:	fab1 f281 	clz	r2, r1
 800590e:	0952      	lsrs	r2, r2, #5
 8005910:	2800      	cmp	r0, #0
 8005912:	bf08      	it	eq
 8005914:	2201      	moveq	r2, #1
 8005916:	b112      	cbz	r2, 800591e <ai_platform_get_weights_map+0x1a>
 8005918:	2200      	movs	r2, #0
 800591a:	4610      	mov	r0, r2
 800591c:	4770      	bx	lr
 800591e:	b4f0      	push	{r4, r5, r6, r7}
 8005920:	4c12      	ldr	r4, [pc, #72]	; (800596c <ai_platform_get_weights_map+0x68>)
 8005922:	681e      	ldr	r6, [r3, #0]
 8005924:	42a6      	cmp	r6, r4
 8005926:	d008      	beq.n	800593a <ai_platform_get_weights_map+0x36>
 8005928:	f1a1 0201 	sub.w	r2, r1, #1
 800592c:	6003      	str	r3, [r0, #0]
 800592e:	fab2 f282 	clz	r2, r2
 8005932:	0952      	lsrs	r2, r2, #5
 8005934:	4610      	mov	r0, r2
 8005936:	bcf0      	pop	{r4, r5, r6, r7}
 8005938:	4770      	bx	lr
 800593a:	685c      	ldr	r4, [r3, #4]
 800593c:	3304      	adds	r3, #4
 800593e:	42b4      	cmp	r4, r6
 8005940:	d0f8      	beq.n	8005934 <ai_platform_get_weights_map+0x30>
 8005942:	3804      	subs	r0, #4
 8005944:	461f      	mov	r7, r3
 8005946:	4615      	mov	r5, r2
 8005948:	e003      	b.n	8005952 <ai_platform_get_weights_map+0x4e>
 800594a:	f857 4f04 	ldr.w	r4, [r7, #4]!
 800594e:	42b4      	cmp	r4, r6
 8005950:	d0f0      	beq.n	8005934 <ai_platform_get_weights_map+0x30>
 8005952:	3501      	adds	r5, #1
 8005954:	f840 4f04 	str.w	r4, [r0, #4]!
 8005958:	42a9      	cmp	r1, r5
 800595a:	d1f6      	bne.n	800594a <ai_platform_get_weights_map+0x46>
 800595c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8005960:	4b02      	ldr	r3, [pc, #8]	; (800596c <ai_platform_get_weights_map+0x68>)
 8005962:	4299      	cmp	r1, r3
 8005964:	bf08      	it	eq
 8005966:	2201      	moveq	r2, #1
 8005968:	e7e4      	b.n	8005934 <ai_platform_get_weights_map+0x30>
 800596a:	bf00      	nop
 800596c:	a1facade 	.word	0xa1facade

08005970 <ai_platform_get_activations_map>:
 8005970:	b14a      	cbz	r2, 8005986 <ai_platform_get_activations_map+0x16>
 8005972:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005974:	b133      	cbz	r3, 8005984 <ai_platform_get_activations_map+0x14>
 8005976:	fab1 f281 	clz	r2, r1
 800597a:	0952      	lsrs	r2, r2, #5
 800597c:	2800      	cmp	r0, #0
 800597e:	bf08      	it	eq
 8005980:	2201      	moveq	r2, #1
 8005982:	b112      	cbz	r2, 800598a <ai_platform_get_activations_map+0x1a>
 8005984:	2200      	movs	r2, #0
 8005986:	4610      	mov	r0, r2
 8005988:	4770      	bx	lr
 800598a:	b4f0      	push	{r4, r5, r6, r7}
 800598c:	4c12      	ldr	r4, [pc, #72]	; (80059d8 <ai_platform_get_activations_map+0x68>)
 800598e:	681e      	ldr	r6, [r3, #0]
 8005990:	42a6      	cmp	r6, r4
 8005992:	d008      	beq.n	80059a6 <ai_platform_get_activations_map+0x36>
 8005994:	f1a1 0201 	sub.w	r2, r1, #1
 8005998:	6003      	str	r3, [r0, #0]
 800599a:	fab2 f282 	clz	r2, r2
 800599e:	0952      	lsrs	r2, r2, #5
 80059a0:	4610      	mov	r0, r2
 80059a2:	bcf0      	pop	{r4, r5, r6, r7}
 80059a4:	4770      	bx	lr
 80059a6:	685c      	ldr	r4, [r3, #4]
 80059a8:	3304      	adds	r3, #4
 80059aa:	42b4      	cmp	r4, r6
 80059ac:	d0f8      	beq.n	80059a0 <ai_platform_get_activations_map+0x30>
 80059ae:	3804      	subs	r0, #4
 80059b0:	461f      	mov	r7, r3
 80059b2:	4615      	mov	r5, r2
 80059b4:	e003      	b.n	80059be <ai_platform_get_activations_map+0x4e>
 80059b6:	f857 4f04 	ldr.w	r4, [r7, #4]!
 80059ba:	42b4      	cmp	r4, r6
 80059bc:	d0f0      	beq.n	80059a0 <ai_platform_get_activations_map+0x30>
 80059be:	3501      	adds	r5, #1
 80059c0:	f840 4f04 	str.w	r4, [r0, #4]!
 80059c4:	42a9      	cmp	r1, r5
 80059c6:	d1f6      	bne.n	80059b6 <ai_platform_get_activations_map+0x46>
 80059c8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80059cc:	4b02      	ldr	r3, [pc, #8]	; (80059d8 <ai_platform_get_activations_map+0x68>)
 80059ce:	4299      	cmp	r1, r3
 80059d0:	bf08      	it	eq
 80059d2:	2201      	moveq	r2, #1
 80059d4:	e7e4      	b.n	80059a0 <ai_platform_get_activations_map+0x30>
 80059d6:	bf00      	nop
 80059d8:	a1facade 	.word	0xa1facade

080059dc <ai_platform_runtime_get_revision>:
 80059dc:	4a29      	ldr	r2, [pc, #164]	; (8005a84 <ai_platform_runtime_get_revision+0xa8>)
 80059de:	b508      	push	{r3, lr}
 80059e0:	6813      	ldr	r3, [r2, #0]
 80059e2:	f023 0301 	bic.w	r3, r3, #1
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	f7ff ff88 	bl	80058fc <_ai_platform_acquire_crc>
 80059ec:	4b26      	ldr	r3, [pc, #152]	; (8005a88 <ai_platform_runtime_get_revision+0xac>)
 80059ee:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059f8:	189a      	adds	r2, r3, r2
 80059fa:	2a01      	cmp	r2, #1
 80059fc:	d914      	bls.n	8005a28 <ai_platform_runtime_get_revision+0x4c>
 80059fe:	f240 4249 	movw	r2, #1097	; 0x449
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d010      	beq.n	8005a28 <ai_platform_runtime_get_revision+0x4c>
 8005a06:	4a21      	ldr	r2, [pc, #132]	; (8005a8c <ai_platform_runtime_get_revision+0xb0>)
 8005a08:	6813      	ldr	r3, [r2, #0]
 8005a0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a0e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005a12:	d018      	beq.n	8005a46 <ai_platform_runtime_get_revision+0x6a>
 8005a14:	6813      	ldr	r3, [r2, #0]
 8005a16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a1a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8005a1e:	d021      	beq.n	8005a64 <ai_platform_runtime_get_revision+0x88>
 8005a20:	f7ff ff6e 	bl	8005900 <_ai_platform_release_crc>
 8005a24:	481a      	ldr	r0, [pc, #104]	; (8005a90 <ai_platform_runtime_get_revision+0xb4>)
 8005a26:	bd08      	pop	{r3, pc}
 8005a28:	4b1a      	ldr	r3, [pc, #104]	; (8005a94 <ai_platform_runtime_get_revision+0xb8>)
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	680b      	ldr	r3, [r1, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1fc      	bne.n	8005a30 <ai_platform_runtime_get_revision+0x54>
 8005a36:	4b18      	ldr	r3, [pc, #96]	; (8005a98 <ai_platform_runtime_get_revision+0xbc>)
 8005a38:	4918      	ldr	r1, [pc, #96]	; (8005a9c <ai_platform_runtime_get_revision+0xc0>)
 8005a3a:	4a19      	ldr	r2, [pc, #100]	; (8005aa0 <ai_platform_runtime_get_revision+0xc4>)
 8005a3c:	6019      	str	r1, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d0ed      	beq.n	8005a20 <ai_platform_runtime_get_revision+0x44>
 8005a44:	e7fe      	b.n	8005a44 <ai_platform_runtime_get_revision+0x68>
 8005a46:	4b17      	ldr	r3, [pc, #92]	; (8005aa4 <ai_platform_runtime_get_revision+0xc8>)
 8005a48:	2201      	movs	r2, #1
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	601a      	str	r2, [r3, #0]
 8005a4e:	680b      	ldr	r3, [r1, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1fc      	bne.n	8005a4e <ai_platform_runtime_get_revision+0x72>
 8005a54:	4b14      	ldr	r3, [pc, #80]	; (8005aa8 <ai_platform_runtime_get_revision+0xcc>)
 8005a56:	4911      	ldr	r1, [pc, #68]	; (8005a9c <ai_platform_runtime_get_revision+0xc0>)
 8005a58:	4a11      	ldr	r2, [pc, #68]	; (8005aa0 <ai_platform_runtime_get_revision+0xc4>)
 8005a5a:	6019      	str	r1, [r3, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d0de      	beq.n	8005a20 <ai_platform_runtime_get_revision+0x44>
 8005a62:	e7fe      	b.n	8005a62 <ai_platform_runtime_get_revision+0x86>
 8005a64:	4b0b      	ldr	r3, [pc, #44]	; (8005a94 <ai_platform_runtime_get_revision+0xb8>)
 8005a66:	2201      	movs	r2, #1
 8005a68:	4619      	mov	r1, r3
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	680b      	ldr	r3, [r1, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1fc      	bne.n	8005a6c <ai_platform_runtime_get_revision+0x90>
 8005a72:	4b09      	ldr	r3, [pc, #36]	; (8005a98 <ai_platform_runtime_get_revision+0xbc>)
 8005a74:	4909      	ldr	r1, [pc, #36]	; (8005a9c <ai_platform_runtime_get_revision+0xc0>)
 8005a76:	4a0a      	ldr	r2, [pc, #40]	; (8005aa0 <ai_platform_runtime_get_revision+0xc4>)
 8005a78:	6019      	str	r1, [r3, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d0cf      	beq.n	8005a20 <ai_platform_runtime_get_revision+0x44>
 8005a80:	e7fe      	b.n	8005a80 <ai_platform_runtime_get_revision+0xa4>
 8005a82:	bf00      	nop
 8005a84:	e0002000 	.word	0xe0002000
 8005a88:	e0042000 	.word	0xe0042000
 8005a8c:	5c001000 	.word	0x5c001000
 8005a90:	08069a14 	.word	0x08069a14
 8005a94:	40023008 	.word	0x40023008
 8005a98:	40023000 	.word	0x40023000
 8005a9c:	f407a5c2 	.word	0xf407a5c2
 8005aa0:	b5e8b5cd 	.word	0xb5e8b5cd
 8005aa4:	58024c08 	.word	0x58024c08
 8005aa8:	58024c00 	.word	0x58024c00

08005aac <ai_platform_runtime_get_version>:
 8005aac:	4a2a      	ldr	r2, [pc, #168]	; (8005b58 <ai_platform_runtime_get_version+0xac>)
 8005aae:	b500      	push	{lr}
 8005ab0:	6813      	ldr	r3, [r2, #0]
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	f023 0301 	bic.w	r3, r3, #1
 8005ab8:	6013      	str	r3, [r2, #0]
 8005aba:	f7ff ff1f 	bl	80058fc <_ai_platform_acquire_crc>
 8005abe:	4b27      	ldr	r3, [pc, #156]	; (8005b5c <ai_platform_runtime_get_version+0xb0>)
 8005ac0:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005aca:	189a      	adds	r2, r3, r2
 8005acc:	2a01      	cmp	r2, #1
 8005ace:	d916      	bls.n	8005afe <ai_platform_runtime_get_version+0x52>
 8005ad0:	f240 4249 	movw	r2, #1097	; 0x449
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d012      	beq.n	8005afe <ai_platform_runtime_get_version+0x52>
 8005ad8:	4a21      	ldr	r2, [pc, #132]	; (8005b60 <ai_platform_runtime_get_version+0xb4>)
 8005ada:	6813      	ldr	r3, [r2, #0]
 8005adc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ae0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005ae4:	d01a      	beq.n	8005b1c <ai_platform_runtime_get_version+0x70>
 8005ae6:	6813      	ldr	r3, [r2, #0]
 8005ae8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005aec:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8005af0:	d023      	beq.n	8005b3a <ai_platform_runtime_get_version+0x8e>
 8005af2:	f7ff ff05 	bl	8005900 <_ai_platform_release_crc>
 8005af6:	2007      	movs	r0, #7
 8005af8:	b003      	add	sp, #12
 8005afa:	f85d fb04 	ldr.w	pc, [sp], #4
 8005afe:	4b19      	ldr	r3, [pc, #100]	; (8005b64 <ai_platform_runtime_get_version+0xb8>)
 8005b00:	2201      	movs	r2, #1
 8005b02:	4619      	mov	r1, r3
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	680b      	ldr	r3, [r1, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1fc      	bne.n	8005b06 <ai_platform_runtime_get_version+0x5a>
 8005b0c:	4b16      	ldr	r3, [pc, #88]	; (8005b68 <ai_platform_runtime_get_version+0xbc>)
 8005b0e:	4917      	ldr	r1, [pc, #92]	; (8005b6c <ai_platform_runtime_get_version+0xc0>)
 8005b10:	4a17      	ldr	r2, [pc, #92]	; (8005b70 <ai_platform_runtime_get_version+0xc4>)
 8005b12:	6019      	str	r1, [r3, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d0eb      	beq.n	8005af2 <ai_platform_runtime_get_version+0x46>
 8005b1a:	e7fe      	b.n	8005b1a <ai_platform_runtime_get_version+0x6e>
 8005b1c:	4b15      	ldr	r3, [pc, #84]	; (8005b74 <ai_platform_runtime_get_version+0xc8>)
 8005b1e:	2201      	movs	r2, #1
 8005b20:	4619      	mov	r1, r3
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	680b      	ldr	r3, [r1, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1fc      	bne.n	8005b24 <ai_platform_runtime_get_version+0x78>
 8005b2a:	4b13      	ldr	r3, [pc, #76]	; (8005b78 <ai_platform_runtime_get_version+0xcc>)
 8005b2c:	490f      	ldr	r1, [pc, #60]	; (8005b6c <ai_platform_runtime_get_version+0xc0>)
 8005b2e:	4a10      	ldr	r2, [pc, #64]	; (8005b70 <ai_platform_runtime_get_version+0xc4>)
 8005b30:	6019      	str	r1, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d0dc      	beq.n	8005af2 <ai_platform_runtime_get_version+0x46>
 8005b38:	e7fe      	b.n	8005b38 <ai_platform_runtime_get_version+0x8c>
 8005b3a:	4b0a      	ldr	r3, [pc, #40]	; (8005b64 <ai_platform_runtime_get_version+0xb8>)
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	4619      	mov	r1, r3
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	680b      	ldr	r3, [r1, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1fc      	bne.n	8005b42 <ai_platform_runtime_get_version+0x96>
 8005b48:	4b07      	ldr	r3, [pc, #28]	; (8005b68 <ai_platform_runtime_get_version+0xbc>)
 8005b4a:	4908      	ldr	r1, [pc, #32]	; (8005b6c <ai_platform_runtime_get_version+0xc0>)
 8005b4c:	4a08      	ldr	r2, [pc, #32]	; (8005b70 <ai_platform_runtime_get_version+0xc4>)
 8005b4e:	6019      	str	r1, [r3, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d0cd      	beq.n	8005af2 <ai_platform_runtime_get_version+0x46>
 8005b56:	e7fe      	b.n	8005b56 <ai_platform_runtime_get_version+0xaa>
 8005b58:	e0002000 	.word	0xe0002000
 8005b5c:	e0042000 	.word	0xe0042000
 8005b60:	5c001000 	.word	0x5c001000
 8005b64:	40023008 	.word	0x40023008
 8005b68:	40023000 	.word	0x40023000
 8005b6c:	f407a5c2 	.word	0xf407a5c2
 8005b70:	b5e8b5cd 	.word	0xb5e8b5cd
 8005b74:	58024c08 	.word	0x58024c08
 8005b78:	58024c00 	.word	0x58024c00

08005b7c <ai_platform_api_get_version>:
 8005b7c:	4a32      	ldr	r2, [pc, #200]	; (8005c48 <ai_platform_api_get_version+0xcc>)
 8005b7e:	b510      	push	{r4, lr}
 8005b80:	6813      	ldr	r3, [r2, #0]
 8005b82:	b082      	sub	sp, #8
 8005b84:	f023 0301 	bic.w	r3, r3, #1
 8005b88:	6013      	str	r3, [r2, #0]
 8005b8a:	f7ff feb7 	bl	80058fc <_ai_platform_acquire_crc>
 8005b8e:	4b2f      	ldr	r3, [pc, #188]	; (8005c4c <ai_platform_api_get_version+0xd0>)
 8005b90:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b9a:	189a      	adds	r2, r3, r2
 8005b9c:	2a01      	cmp	r2, #1
 8005b9e:	d925      	bls.n	8005bec <ai_platform_api_get_version+0x70>
 8005ba0:	f240 4249 	movw	r2, #1097	; 0x449
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d021      	beq.n	8005bec <ai_platform_api_get_version+0x70>
 8005ba8:	4a29      	ldr	r2, [pc, #164]	; (8005c50 <ai_platform_api_get_version+0xd4>)
 8005baa:	6813      	ldr	r3, [r2, #0]
 8005bac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bb0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005bb4:	d029      	beq.n	8005c0a <ai_platform_api_get_version+0x8e>
 8005bb6:	6813      	ldr	r3, [r2, #0]
 8005bb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bbc:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8005bc0:	d032      	beq.n	8005c28 <ai_platform_api_get_version+0xac>
 8005bc2:	f7ff fe9d 	bl	8005900 <_ai_platform_release_crc>
 8005bc6:	4b23      	ldr	r3, [pc, #140]	; (8005c54 <ai_platform_api_get_version+0xd8>)
 8005bc8:	2000      	movs	r0, #0
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	b2dc      	uxtb	r4, r3
 8005bce:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8005bd2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005bd6:	0e1b      	lsrs	r3, r3, #24
 8005bd8:	f364 0007 	bfi	r0, r4, #0, #8
 8005bdc:	f361 200f 	bfi	r0, r1, #8, #8
 8005be0:	f362 4017 	bfi	r0, r2, #16, #8
 8005be4:	f363 601f 	bfi	r0, r3, #24, #8
 8005be8:	b002      	add	sp, #8
 8005bea:	bd10      	pop	{r4, pc}
 8005bec:	4b1a      	ldr	r3, [pc, #104]	; (8005c58 <ai_platform_api_get_version+0xdc>)
 8005bee:	2201      	movs	r2, #1
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	680b      	ldr	r3, [r1, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1fc      	bne.n	8005bf4 <ai_platform_api_get_version+0x78>
 8005bfa:	4b18      	ldr	r3, [pc, #96]	; (8005c5c <ai_platform_api_get_version+0xe0>)
 8005bfc:	4918      	ldr	r1, [pc, #96]	; (8005c60 <ai_platform_api_get_version+0xe4>)
 8005bfe:	4a19      	ldr	r2, [pc, #100]	; (8005c64 <ai_platform_api_get_version+0xe8>)
 8005c00:	6019      	str	r1, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d0dc      	beq.n	8005bc2 <ai_platform_api_get_version+0x46>
 8005c08:	e7fe      	b.n	8005c08 <ai_platform_api_get_version+0x8c>
 8005c0a:	4b17      	ldr	r3, [pc, #92]	; (8005c68 <ai_platform_api_get_version+0xec>)
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	4619      	mov	r1, r3
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	680b      	ldr	r3, [r1, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1fc      	bne.n	8005c12 <ai_platform_api_get_version+0x96>
 8005c18:	4b14      	ldr	r3, [pc, #80]	; (8005c6c <ai_platform_api_get_version+0xf0>)
 8005c1a:	4911      	ldr	r1, [pc, #68]	; (8005c60 <ai_platform_api_get_version+0xe4>)
 8005c1c:	4a11      	ldr	r2, [pc, #68]	; (8005c64 <ai_platform_api_get_version+0xe8>)
 8005c1e:	6019      	str	r1, [r3, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d0cd      	beq.n	8005bc2 <ai_platform_api_get_version+0x46>
 8005c26:	e7fe      	b.n	8005c26 <ai_platform_api_get_version+0xaa>
 8005c28:	4b0b      	ldr	r3, [pc, #44]	; (8005c58 <ai_platform_api_get_version+0xdc>)
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	601a      	str	r2, [r3, #0]
 8005c30:	680b      	ldr	r3, [r1, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1fc      	bne.n	8005c30 <ai_platform_api_get_version+0xb4>
 8005c36:	4b09      	ldr	r3, [pc, #36]	; (8005c5c <ai_platform_api_get_version+0xe0>)
 8005c38:	4909      	ldr	r1, [pc, #36]	; (8005c60 <ai_platform_api_get_version+0xe4>)
 8005c3a:	4a0a      	ldr	r2, [pc, #40]	; (8005c64 <ai_platform_api_get_version+0xe8>)
 8005c3c:	6019      	str	r1, [r3, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d0be      	beq.n	8005bc2 <ai_platform_api_get_version+0x46>
 8005c44:	e7fe      	b.n	8005c44 <ai_platform_api_get_version+0xc8>
 8005c46:	bf00      	nop
 8005c48:	e0002000 	.word	0xe0002000
 8005c4c:	e0042000 	.word	0xe0042000
 8005c50:	5c001000 	.word	0x5c001000
 8005c54:	08069a18 	.word	0x08069a18
 8005c58:	40023008 	.word	0x40023008
 8005c5c:	40023000 	.word	0x40023000
 8005c60:	f407a5c2 	.word	0xf407a5c2
 8005c64:	b5e8b5cd 	.word	0xb5e8b5cd
 8005c68:	58024c08 	.word	0x58024c08
 8005c6c:	58024c00 	.word	0x58024c00

08005c70 <ai_platform_interface_api_get_version>:
 8005c70:	4a32      	ldr	r2, [pc, #200]	; (8005d3c <ai_platform_interface_api_get_version+0xcc>)
 8005c72:	b510      	push	{r4, lr}
 8005c74:	6813      	ldr	r3, [r2, #0]
 8005c76:	b082      	sub	sp, #8
 8005c78:	f023 0301 	bic.w	r3, r3, #1
 8005c7c:	6013      	str	r3, [r2, #0]
 8005c7e:	f7ff fe3d 	bl	80058fc <_ai_platform_acquire_crc>
 8005c82:	4b2f      	ldr	r3, [pc, #188]	; (8005d40 <ai_platform_interface_api_get_version+0xd0>)
 8005c84:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c8e:	189a      	adds	r2, r3, r2
 8005c90:	2a01      	cmp	r2, #1
 8005c92:	d925      	bls.n	8005ce0 <ai_platform_interface_api_get_version+0x70>
 8005c94:	f240 4249 	movw	r2, #1097	; 0x449
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d021      	beq.n	8005ce0 <ai_platform_interface_api_get_version+0x70>
 8005c9c:	4a29      	ldr	r2, [pc, #164]	; (8005d44 <ai_platform_interface_api_get_version+0xd4>)
 8005c9e:	6813      	ldr	r3, [r2, #0]
 8005ca0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ca4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005ca8:	d029      	beq.n	8005cfe <ai_platform_interface_api_get_version+0x8e>
 8005caa:	6813      	ldr	r3, [r2, #0]
 8005cac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cb0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8005cb4:	d032      	beq.n	8005d1c <ai_platform_interface_api_get_version+0xac>
 8005cb6:	f7ff fe23 	bl	8005900 <_ai_platform_release_crc>
 8005cba:	4b23      	ldr	r3, [pc, #140]	; (8005d48 <ai_platform_interface_api_get_version+0xd8>)
 8005cbc:	2000      	movs	r0, #0
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	b2dc      	uxtb	r4, r3
 8005cc2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8005cc6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005cca:	0e1b      	lsrs	r3, r3, #24
 8005ccc:	f364 0007 	bfi	r0, r4, #0, #8
 8005cd0:	f361 200f 	bfi	r0, r1, #8, #8
 8005cd4:	f362 4017 	bfi	r0, r2, #16, #8
 8005cd8:	f363 601f 	bfi	r0, r3, #24, #8
 8005cdc:	b002      	add	sp, #8
 8005cde:	bd10      	pop	{r4, pc}
 8005ce0:	4b1a      	ldr	r3, [pc, #104]	; (8005d4c <ai_platform_interface_api_get_version+0xdc>)
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	601a      	str	r2, [r3, #0]
 8005ce8:	680b      	ldr	r3, [r1, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1fc      	bne.n	8005ce8 <ai_platform_interface_api_get_version+0x78>
 8005cee:	4b18      	ldr	r3, [pc, #96]	; (8005d50 <ai_platform_interface_api_get_version+0xe0>)
 8005cf0:	4918      	ldr	r1, [pc, #96]	; (8005d54 <ai_platform_interface_api_get_version+0xe4>)
 8005cf2:	4a19      	ldr	r2, [pc, #100]	; (8005d58 <ai_platform_interface_api_get_version+0xe8>)
 8005cf4:	6019      	str	r1, [r3, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d0dc      	beq.n	8005cb6 <ai_platform_interface_api_get_version+0x46>
 8005cfc:	e7fe      	b.n	8005cfc <ai_platform_interface_api_get_version+0x8c>
 8005cfe:	4b17      	ldr	r3, [pc, #92]	; (8005d5c <ai_platform_interface_api_get_version+0xec>)
 8005d00:	2201      	movs	r2, #1
 8005d02:	4619      	mov	r1, r3
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	680b      	ldr	r3, [r1, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1fc      	bne.n	8005d06 <ai_platform_interface_api_get_version+0x96>
 8005d0c:	4b14      	ldr	r3, [pc, #80]	; (8005d60 <ai_platform_interface_api_get_version+0xf0>)
 8005d0e:	4911      	ldr	r1, [pc, #68]	; (8005d54 <ai_platform_interface_api_get_version+0xe4>)
 8005d10:	4a11      	ldr	r2, [pc, #68]	; (8005d58 <ai_platform_interface_api_get_version+0xe8>)
 8005d12:	6019      	str	r1, [r3, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d0cd      	beq.n	8005cb6 <ai_platform_interface_api_get_version+0x46>
 8005d1a:	e7fe      	b.n	8005d1a <ai_platform_interface_api_get_version+0xaa>
 8005d1c:	4b0b      	ldr	r3, [pc, #44]	; (8005d4c <ai_platform_interface_api_get_version+0xdc>)
 8005d1e:	2201      	movs	r2, #1
 8005d20:	4619      	mov	r1, r3
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	680b      	ldr	r3, [r1, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1fc      	bne.n	8005d24 <ai_platform_interface_api_get_version+0xb4>
 8005d2a:	4b09      	ldr	r3, [pc, #36]	; (8005d50 <ai_platform_interface_api_get_version+0xe0>)
 8005d2c:	4909      	ldr	r1, [pc, #36]	; (8005d54 <ai_platform_interface_api_get_version+0xe4>)
 8005d2e:	4a0a      	ldr	r2, [pc, #40]	; (8005d58 <ai_platform_interface_api_get_version+0xe8>)
 8005d30:	6019      	str	r1, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d0be      	beq.n	8005cb6 <ai_platform_interface_api_get_version+0x46>
 8005d38:	e7fe      	b.n	8005d38 <ai_platform_interface_api_get_version+0xc8>
 8005d3a:	bf00      	nop
 8005d3c:	e0002000 	.word	0xe0002000
 8005d40:	e0042000 	.word	0xe0042000
 8005d44:	5c001000 	.word	0x5c001000
 8005d48:	08069a1c 	.word	0x08069a1c
 8005d4c:	40023008 	.word	0x40023008
 8005d50:	40023000 	.word	0x40023000
 8005d54:	f407a5c2 	.word	0xf407a5c2
 8005d58:	b5e8b5cd 	.word	0xb5e8b5cd
 8005d5c:	58024c08 	.word	0x58024c08
 8005d60:	58024c00 	.word	0x58024c00

08005d64 <ai_platform_context_acquire>:
 8005d64:	b510      	push	{r4, lr}
 8005d66:	4604      	mov	r4, r0
 8005d68:	b120      	cbz	r0, 8005d74 <ai_platform_context_acquire+0x10>
 8005d6a:	4b2b      	ldr	r3, [pc, #172]	; (8005e18 <ai_platform_context_acquire+0xb4>)
 8005d6c:	6802      	ldr	r2, [r0, #0]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	bf18      	it	ne
 8005d72:	2400      	movne	r4, #0
 8005d74:	4a29      	ldr	r2, [pc, #164]	; (8005e1c <ai_platform_context_acquire+0xb8>)
 8005d76:	6813      	ldr	r3, [r2, #0]
 8005d78:	f023 0301 	bic.w	r3, r3, #1
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	f7ff fdbd 	bl	80058fc <_ai_platform_acquire_crc>
 8005d82:	4b27      	ldr	r3, [pc, #156]	; (8005e20 <ai_platform_context_acquire+0xbc>)
 8005d84:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d8e:	189a      	adds	r2, r3, r2
 8005d90:	2a01      	cmp	r2, #1
 8005d92:	d914      	bls.n	8005dbe <ai_platform_context_acquire+0x5a>
 8005d94:	f240 4249 	movw	r2, #1097	; 0x449
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d010      	beq.n	8005dbe <ai_platform_context_acquire+0x5a>
 8005d9c:	4a21      	ldr	r2, [pc, #132]	; (8005e24 <ai_platform_context_acquire+0xc0>)
 8005d9e:	6813      	ldr	r3, [r2, #0]
 8005da0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005da4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005da8:	d018      	beq.n	8005ddc <ai_platform_context_acquire+0x78>
 8005daa:	6813      	ldr	r3, [r2, #0]
 8005dac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005db0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8005db4:	d021      	beq.n	8005dfa <ai_platform_context_acquire+0x96>
 8005db6:	f7ff fda3 	bl	8005900 <_ai_platform_release_crc>
 8005dba:	4620      	mov	r0, r4
 8005dbc:	bd10      	pop	{r4, pc}
 8005dbe:	4b1a      	ldr	r3, [pc, #104]	; (8005e28 <ai_platform_context_acquire+0xc4>)
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	601a      	str	r2, [r3, #0]
 8005dc6:	680b      	ldr	r3, [r1, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1fc      	bne.n	8005dc6 <ai_platform_context_acquire+0x62>
 8005dcc:	4b17      	ldr	r3, [pc, #92]	; (8005e2c <ai_platform_context_acquire+0xc8>)
 8005dce:	4918      	ldr	r1, [pc, #96]	; (8005e30 <ai_platform_context_acquire+0xcc>)
 8005dd0:	4a18      	ldr	r2, [pc, #96]	; (8005e34 <ai_platform_context_acquire+0xd0>)
 8005dd2:	6019      	str	r1, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d0ed      	beq.n	8005db6 <ai_platform_context_acquire+0x52>
 8005dda:	e7fe      	b.n	8005dda <ai_platform_context_acquire+0x76>
 8005ddc:	4b16      	ldr	r3, [pc, #88]	; (8005e38 <ai_platform_context_acquire+0xd4>)
 8005dde:	2201      	movs	r2, #1
 8005de0:	4619      	mov	r1, r3
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	680b      	ldr	r3, [r1, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1fc      	bne.n	8005de4 <ai_platform_context_acquire+0x80>
 8005dea:	4b14      	ldr	r3, [pc, #80]	; (8005e3c <ai_platform_context_acquire+0xd8>)
 8005dec:	4910      	ldr	r1, [pc, #64]	; (8005e30 <ai_platform_context_acquire+0xcc>)
 8005dee:	4a11      	ldr	r2, [pc, #68]	; (8005e34 <ai_platform_context_acquire+0xd0>)
 8005df0:	6019      	str	r1, [r3, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d0de      	beq.n	8005db6 <ai_platform_context_acquire+0x52>
 8005df8:	e7fe      	b.n	8005df8 <ai_platform_context_acquire+0x94>
 8005dfa:	4b0b      	ldr	r3, [pc, #44]	; (8005e28 <ai_platform_context_acquire+0xc4>)
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	4619      	mov	r1, r3
 8005e00:	601a      	str	r2, [r3, #0]
 8005e02:	680b      	ldr	r3, [r1, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1fc      	bne.n	8005e02 <ai_platform_context_acquire+0x9e>
 8005e08:	4b08      	ldr	r3, [pc, #32]	; (8005e2c <ai_platform_context_acquire+0xc8>)
 8005e0a:	4909      	ldr	r1, [pc, #36]	; (8005e30 <ai_platform_context_acquire+0xcc>)
 8005e0c:	4a09      	ldr	r2, [pc, #36]	; (8005e34 <ai_platform_context_acquire+0xd0>)
 8005e0e:	6019      	str	r1, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d0cf      	beq.n	8005db6 <ai_platform_context_acquire+0x52>
 8005e16:	e7fe      	b.n	8005e16 <ai_platform_context_acquire+0xb2>
 8005e18:	a1c00100 	.word	0xa1c00100
 8005e1c:	e0002000 	.word	0xe0002000
 8005e20:	e0042000 	.word	0xe0042000
 8005e24:	5c001000 	.word	0x5c001000
 8005e28:	40023008 	.word	0x40023008
 8005e2c:	40023000 	.word	0x40023000
 8005e30:	f407a5c2 	.word	0xf407a5c2
 8005e34:	b5e8b5cd 	.word	0xb5e8b5cd
 8005e38:	58024c08 	.word	0x58024c08
 8005e3c:	58024c00 	.word	0x58024c00

08005e40 <ai_platform_network_get_error>:
 8005e40:	b510      	push	{r4, lr}
 8005e42:	b120      	cbz	r0, 8005e4e <ai_platform_network_get_error+0xe>
 8005e44:	4b56      	ldr	r3, [pc, #344]	; (8005fa0 <ai_platform_network_get_error+0x160>)
 8005e46:	4604      	mov	r4, r0
 8005e48:	6802      	ldr	r2, [r0, #0]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d034      	beq.n	8005eb8 <ai_platform_network_get_error+0x78>
 8005e4e:	4a55      	ldr	r2, [pc, #340]	; (8005fa4 <ai_platform_network_get_error+0x164>)
 8005e50:	6813      	ldr	r3, [r2, #0]
 8005e52:	f023 0301 	bic.w	r3, r3, #1
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	f7ff fd50 	bl	80058fc <_ai_platform_acquire_crc>
 8005e5c:	4b52      	ldr	r3, [pc, #328]	; (8005fa8 <ai_platform_network_get_error+0x168>)
 8005e5e:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e68:	185a      	adds	r2, r3, r1
 8005e6a:	2a01      	cmp	r2, #1
 8005e6c:	d915      	bls.n	8005e9a <ai_platform_network_get_error+0x5a>
 8005e6e:	f240 4249 	movw	r2, #1097	; 0x449
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d011      	beq.n	8005e9a <ai_platform_network_get_error+0x5a>
 8005e76:	4a4d      	ldr	r2, [pc, #308]	; (8005fac <ai_platform_network_get_error+0x16c>)
 8005e78:	6813      	ldr	r3, [r2, #0]
 8005e7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e7e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005e82:	d051      	beq.n	8005f28 <ai_platform_network_get_error+0xe8>
 8005e84:	6813      	ldr	r3, [r2, #0]
 8005e86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e8a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8005e8e:	d03c      	beq.n	8005f0a <ai_platform_network_get_error+0xca>
 8005e90:	f7ff fd36 	bl	8005900 <_ai_platform_release_crc>
 8005e94:	f241 0010 	movw	r0, #4112	; 0x1010
 8005e98:	bd10      	pop	{r4, pc}
 8005e9a:	4b45      	ldr	r3, [pc, #276]	; (8005fb0 <ai_platform_network_get_error+0x170>)
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	680b      	ldr	r3, [r1, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1fc      	bne.n	8005ea2 <ai_platform_network_get_error+0x62>
 8005ea8:	4b42      	ldr	r3, [pc, #264]	; (8005fb4 <ai_platform_network_get_error+0x174>)
 8005eaa:	4943      	ldr	r1, [pc, #268]	; (8005fb8 <ai_platform_network_get_error+0x178>)
 8005eac:	4a43      	ldr	r2, [pc, #268]	; (8005fbc <ai_platform_network_get_error+0x17c>)
 8005eae:	6019      	str	r1, [r3, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d0ec      	beq.n	8005e90 <ai_platform_network_get_error+0x50>
 8005eb6:	e7fe      	b.n	8005eb6 <ai_platform_network_get_error+0x76>
 8005eb8:	4a3a      	ldr	r2, [pc, #232]	; (8005fa4 <ai_platform_network_get_error+0x164>)
 8005eba:	6813      	ldr	r3, [r2, #0]
 8005ebc:	f023 0301 	bic.w	r3, r3, #1
 8005ec0:	6013      	str	r3, [r2, #0]
 8005ec2:	f7ff fd1b 	bl	80058fc <_ai_platform_acquire_crc>
 8005ec6:	4b38      	ldr	r3, [pc, #224]	; (8005fa8 <ai_platform_network_get_error+0x168>)
 8005ec8:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ed2:	189a      	adds	r2, r3, r2
 8005ed4:	2a01      	cmp	r2, #1
 8005ed6:	d954      	bls.n	8005f82 <ai_platform_network_get_error+0x142>
 8005ed8:	f240 4249 	movw	r2, #1097	; 0x449
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d050      	beq.n	8005f82 <ai_platform_network_get_error+0x142>
 8005ee0:	4a32      	ldr	r2, [pc, #200]	; (8005fac <ai_platform_network_get_error+0x16c>)
 8005ee2:	6813      	ldr	r3, [r2, #0]
 8005ee4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ee8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005eec:	d02b      	beq.n	8005f46 <ai_platform_network_get_error+0x106>
 8005eee:	6813      	ldr	r3, [r2, #0]
 8005ef0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ef4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8005ef8:	d034      	beq.n	8005f64 <ai_platform_network_get_error+0x124>
 8005efa:	f7ff fd01 	bl	8005900 <_ai_platform_release_crc>
 8005efe:	f104 0010 	add.w	r0, r4, #16
 8005f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f06:	f001 ba49 	b.w	800739c <core_get_error>
 8005f0a:	4b29      	ldr	r3, [pc, #164]	; (8005fb0 <ai_platform_network_get_error+0x170>)
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	4619      	mov	r1, r3
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	680b      	ldr	r3, [r1, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1fc      	bne.n	8005f12 <ai_platform_network_get_error+0xd2>
 8005f18:	4b26      	ldr	r3, [pc, #152]	; (8005fb4 <ai_platform_network_get_error+0x174>)
 8005f1a:	4927      	ldr	r1, [pc, #156]	; (8005fb8 <ai_platform_network_get_error+0x178>)
 8005f1c:	4a27      	ldr	r2, [pc, #156]	; (8005fbc <ai_platform_network_get_error+0x17c>)
 8005f1e:	6019      	str	r1, [r3, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d0b4      	beq.n	8005e90 <ai_platform_network_get_error+0x50>
 8005f26:	e7fe      	b.n	8005f26 <ai_platform_network_get_error+0xe6>
 8005f28:	4b25      	ldr	r3, [pc, #148]	; (8005fc0 <ai_platform_network_get_error+0x180>)
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	601a      	str	r2, [r3, #0]
 8005f30:	680b      	ldr	r3, [r1, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1fc      	bne.n	8005f30 <ai_platform_network_get_error+0xf0>
 8005f36:	4b23      	ldr	r3, [pc, #140]	; (8005fc4 <ai_platform_network_get_error+0x184>)
 8005f38:	491f      	ldr	r1, [pc, #124]	; (8005fb8 <ai_platform_network_get_error+0x178>)
 8005f3a:	4a20      	ldr	r2, [pc, #128]	; (8005fbc <ai_platform_network_get_error+0x17c>)
 8005f3c:	6019      	str	r1, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d0a5      	beq.n	8005e90 <ai_platform_network_get_error+0x50>
 8005f44:	e7fe      	b.n	8005f44 <ai_platform_network_get_error+0x104>
 8005f46:	4b1e      	ldr	r3, [pc, #120]	; (8005fc0 <ai_platform_network_get_error+0x180>)
 8005f48:	2201      	movs	r2, #1
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	601a      	str	r2, [r3, #0]
 8005f4e:	680b      	ldr	r3, [r1, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1fc      	bne.n	8005f4e <ai_platform_network_get_error+0x10e>
 8005f54:	4b1b      	ldr	r3, [pc, #108]	; (8005fc4 <ai_platform_network_get_error+0x184>)
 8005f56:	4918      	ldr	r1, [pc, #96]	; (8005fb8 <ai_platform_network_get_error+0x178>)
 8005f58:	4a18      	ldr	r2, [pc, #96]	; (8005fbc <ai_platform_network_get_error+0x17c>)
 8005f5a:	6019      	str	r1, [r3, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d0cb      	beq.n	8005efa <ai_platform_network_get_error+0xba>
 8005f62:	e7fe      	b.n	8005f62 <ai_platform_network_get_error+0x122>
 8005f64:	4b12      	ldr	r3, [pc, #72]	; (8005fb0 <ai_platform_network_get_error+0x170>)
 8005f66:	2201      	movs	r2, #1
 8005f68:	4619      	mov	r1, r3
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	680b      	ldr	r3, [r1, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1fc      	bne.n	8005f6c <ai_platform_network_get_error+0x12c>
 8005f72:	4b10      	ldr	r3, [pc, #64]	; (8005fb4 <ai_platform_network_get_error+0x174>)
 8005f74:	4910      	ldr	r1, [pc, #64]	; (8005fb8 <ai_platform_network_get_error+0x178>)
 8005f76:	4a11      	ldr	r2, [pc, #68]	; (8005fbc <ai_platform_network_get_error+0x17c>)
 8005f78:	6019      	str	r1, [r3, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d0bc      	beq.n	8005efa <ai_platform_network_get_error+0xba>
 8005f80:	e7fe      	b.n	8005f80 <ai_platform_network_get_error+0x140>
 8005f82:	4b0b      	ldr	r3, [pc, #44]	; (8005fb0 <ai_platform_network_get_error+0x170>)
 8005f84:	2201      	movs	r2, #1
 8005f86:	4619      	mov	r1, r3
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	680b      	ldr	r3, [r1, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1fc      	bne.n	8005f8a <ai_platform_network_get_error+0x14a>
 8005f90:	4b08      	ldr	r3, [pc, #32]	; (8005fb4 <ai_platform_network_get_error+0x174>)
 8005f92:	4909      	ldr	r1, [pc, #36]	; (8005fb8 <ai_platform_network_get_error+0x178>)
 8005f94:	4a09      	ldr	r2, [pc, #36]	; (8005fbc <ai_platform_network_get_error+0x17c>)
 8005f96:	6019      	str	r1, [r3, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d0ad      	beq.n	8005efa <ai_platform_network_get_error+0xba>
 8005f9e:	e7fe      	b.n	8005f9e <ai_platform_network_get_error+0x15e>
 8005fa0:	a1c00100 	.word	0xa1c00100
 8005fa4:	e0002000 	.word	0xe0002000
 8005fa8:	e0042000 	.word	0xe0042000
 8005fac:	5c001000 	.word	0x5c001000
 8005fb0:	40023008 	.word	0x40023008
 8005fb4:	40023000 	.word	0x40023000
 8005fb8:	f407a5c2 	.word	0xf407a5c2
 8005fbc:	b5e8b5cd 	.word	0xb5e8b5cd
 8005fc0:	58024c08 	.word	0x58024c08
 8005fc4:	58024c00 	.word	0x58024c00

08005fc8 <ai_platform_api_get_network_report>:
 8005fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fcc:	460c      	mov	r4, r1
 8005fce:	b085      	sub	sp, #20
 8005fd0:	4605      	mov	r5, r0
 8005fd2:	b120      	cbz	r0, 8005fde <ai_platform_api_get_network_report+0x16>
 8005fd4:	4ba9      	ldr	r3, [pc, #676]	; (800627c <ai_platform_api_get_network_report+0x2b4>)
 8005fd6:	6802      	ldr	r2, [r0, #0]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	bf18      	it	ne
 8005fdc:	2500      	movne	r5, #0
 8005fde:	4aa8      	ldr	r2, [pc, #672]	; (8006280 <ai_platform_api_get_network_report+0x2b8>)
 8005fe0:	6813      	ldr	r3, [r2, #0]
 8005fe2:	f023 0301 	bic.w	r3, r3, #1
 8005fe6:	6013      	str	r3, [r2, #0]
 8005fe8:	f7ff fc88 	bl	80058fc <_ai_platform_acquire_crc>
 8005fec:	4ba5      	ldr	r3, [pc, #660]	; (8006284 <ai_platform_api_get_network_report+0x2bc>)
 8005fee:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ff8:	eb03 020c 	add.w	r2, r3, ip
 8005ffc:	2a01      	cmp	r2, #1
 8005ffe:	f240 812d 	bls.w	800625c <ai_platform_api_get_network_report+0x294>
 8006002:	f240 4249 	movw	r2, #1097	; 0x449
 8006006:	4293      	cmp	r3, r2
 8006008:	f000 8128 	beq.w	800625c <ai_platform_api_get_network_report+0x294>
 800600c:	4a9e      	ldr	r2, [pc, #632]	; (8006288 <ai_platform_api_get_network_report+0x2c0>)
 800600e:	6813      	ldr	r3, [r2, #0]
 8006010:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006014:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006018:	f000 8140 	beq.w	800629c <ai_platform_api_get_network_report+0x2d4>
 800601c:	6813      	ldr	r3, [r2, #0]
 800601e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006022:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006026:	f000 8157 	beq.w	80062d8 <ai_platform_api_get_network_report+0x310>
 800602a:	f7ff fc69 	bl	8005900 <_ai_platform_release_crc>
 800602e:	2d00      	cmp	r5, #0
 8006030:	f000 8150 	beq.w	80062d4 <ai_platform_api_get_network_report+0x30c>
 8006034:	fab4 f384 	clz	r3, r4
 8006038:	095b      	lsrs	r3, r3, #5
 800603a:	2b00      	cmp	r3, #0
 800603c:	f040 814a 	bne.w	80062d4 <ai_platform_api_get_network_report+0x30c>
 8006040:	66e3      	str	r3, [r4, #108]	; 0x6c
 8006042:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8006044:	2a00      	cmp	r2, #0
 8006046:	f000 8157 	beq.w	80062f8 <ai_platform_api_get_network_report+0x330>
 800604a:	2301      	movs	r3, #1
 800604c:	66e3      	str	r3, [r4, #108]	; 0x6c
 800604e:	6913      	ldr	r3, [r2, #16]
 8006050:	b17b      	cbz	r3, 8006072 <ai_platform_api_get_network_report+0xaa>
 8006052:	4293      	cmp	r3, r2
 8006054:	d00d      	beq.n	8006072 <ai_platform_api_get_network_report+0xaa>
 8006056:	2202      	movs	r2, #2
 8006058:	e002      	b.n	8006060 <ai_platform_api_get_network_report+0x98>
 800605a:	b131      	cbz	r1, 800606a <ai_platform_api_get_network_report+0xa2>
 800605c:	460b      	mov	r3, r1
 800605e:	b121      	cbz	r1, 800606a <ai_platform_api_get_network_report+0xa2>
 8006060:	66e2      	str	r2, [r4, #108]	; 0x6c
 8006062:	3201      	adds	r2, #1
 8006064:	6919      	ldr	r1, [r3, #16]
 8006066:	4299      	cmp	r1, r3
 8006068:	d1f7      	bne.n	800605a <ai_platform_api_get_network_report+0x92>
 800606a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 8143 	beq.w	80062f8 <ai_platform_api_get_network_report+0x330>
 8006072:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8006074:	2b00      	cmp	r3, #0
 8006076:	f000 8121 	beq.w	80062bc <ai_platform_api_get_network_report+0x2f4>
 800607a:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 800607c:	2f00      	cmp	r7, #0
 800607e:	f000 811d 	beq.w	80062bc <ai_platform_api_get_network_report+0x2f4>
 8006082:	883b      	ldrh	r3, [r7, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 8119 	beq.w	80062bc <ai_platform_api_get_network_report+0x2f4>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 8115 	beq.w	80062bc <ai_platform_api_get_network_report+0x2f4>
 8006092:	681e      	ldr	r6, [r3, #0]
 8006094:	2e00      	cmp	r6, #0
 8006096:	f000 8111 	beq.w	80062bc <ai_platform_api_get_network_report+0x2f4>
 800609a:	f04f 0901 	mov.w	r9, #1
 800609e:	f04f 0800 	mov.w	r8, #0
 80060a2:	464b      	mov	r3, r9
 80060a4:	e01c      	b.n	80060e0 <ai_platform_api_get_network_report+0x118>
 80060a6:	2200      	movs	r2, #0
 80060a8:	f84b 2008 	str.w	r2, [fp, r8]
 80060ac:	6832      	ldr	r2, [r6, #0]
 80060ae:	604a      	str	r2, [r1, #4]
 80060b0:	2a00      	cmp	r2, #0
 80060b2:	d040      	beq.n	8006136 <ai_platform_api_get_network_report+0x16e>
 80060b4:	8852      	ldrh	r2, [r2, #2]
 80060b6:	2a00      	cmp	r2, #0
 80060b8:	d03d      	beq.n	8006136 <ai_platform_api_get_network_report+0x16e>
 80060ba:	600b      	str	r3, [r1, #0]
 80060bc:	fa1f f289 	uxth.w	r2, r9
 80060c0:	f8ca 1014 	str.w	r1, [sl, #20]
 80060c4:	8839      	ldrh	r1, [r7, #0]
 80060c6:	4589      	cmp	r9, r1
 80060c8:	d23d      	bcs.n	8006146 <ai_platform_api_get_network_report+0x17e>
 80060ca:	6879      	ldr	r1, [r7, #4]
 80060cc:	2900      	cmp	r1, #0
 80060ce:	d03a      	beq.n	8006146 <ai_platform_api_get_network_report+0x17e>
 80060d0:	f851 6029 	ldr.w	r6, [r1, r9, lsl #2]
 80060d4:	f108 0808 	add.w	r8, r8, #8
 80060d8:	f109 0901 	add.w	r9, r9, #1
 80060dc:	2e00      	cmp	r6, #0
 80060de:	d032      	beq.n	8006146 <ai_platform_api_get_network_report+0x17e>
 80060e0:	f8d7 c008 	ldr.w	ip, [r7, #8]
 80060e4:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 80060e8:	69b0      	ldr	r0, [r6, #24]
 80060ea:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80060ee:	6800      	ldr	r0, [r0, #0]
 80060f0:	eb01 0a02 	add.w	sl, r1, r2
 80060f4:	9303      	str	r3, [sp, #12]
 80060f6:	f8dc b008 	ldr.w	fp, [ip, #8]
 80060fa:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80060fe:	f004 fbbd 	bl	800a87c <ai_array_to_buffer_fmt>
 8006102:	9b03      	ldr	r3, [sp, #12]
 8006104:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 8006108:	5088      	str	r0, [r1, r2]
 800610a:	eb0b 0108 	add.w	r1, fp, r8
 800610e:	f8aa 3004 	strh.w	r3, [sl, #4]
 8006112:	68f2      	ldr	r2, [r6, #12]
 8006114:	68d2      	ldr	r2, [r2, #12]
 8006116:	f8aa 2006 	strh.w	r2, [sl, #6]
 800611a:	68f2      	ldr	r2, [r6, #12]
 800611c:	6892      	ldr	r2, [r2, #8]
 800611e:	f8aa 2008 	strh.w	r2, [sl, #8]
 8006122:	68f2      	ldr	r2, [r6, #12]
 8006124:	6852      	ldr	r2, [r2, #4]
 8006126:	f8ca 200c 	str.w	r2, [sl, #12]
 800612a:	69b2      	ldr	r2, [r6, #24]
 800612c:	6892      	ldr	r2, [r2, #8]
 800612e:	f8ca 2010 	str.w	r2, [sl, #16]
 8006132:	2900      	cmp	r1, #0
 8006134:	d1b7      	bne.n	80060a6 <ai_platform_api_get_network_report+0xde>
 8006136:	2100      	movs	r1, #0
 8006138:	fa1f f289 	uxth.w	r2, r9
 800613c:	f8ca 1014 	str.w	r1, [sl, #20]
 8006140:	8839      	ldrh	r1, [r7, #0]
 8006142:	4589      	cmp	r9, r1
 8006144:	d3c1      	bcc.n	80060ca <ai_platform_api_get_network_report+0x102>
 8006146:	2a00      	cmp	r2, #0
 8006148:	f000 80b8 	beq.w	80062bc <ai_platform_api_get_network_report+0x2f4>
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	8622      	strh	r2, [r4, #48]	; 0x30
 8006152:	6363      	str	r3, [r4, #52]	; 0x34
 8006154:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8006156:	2b01      	cmp	r3, #1
 8006158:	f240 80d6 	bls.w	8006308 <ai_platform_api_get_network_report+0x340>
 800615c:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 800615e:	f117 0f0c 	cmn.w	r7, #12
 8006162:	f000 80d1 	beq.w	8006308 <ai_platform_api_get_network_report+0x340>
 8006166:	89bb      	ldrh	r3, [r7, #12]
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 80cd 	beq.w	8006308 <ai_platform_api_get_network_report+0x340>
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 80c9 	beq.w	8006308 <ai_platform_api_get_network_report+0x340>
 8006176:	681e      	ldr	r6, [r3, #0]
 8006178:	2e00      	cmp	r6, #0
 800617a:	f000 80c5 	beq.w	8006308 <ai_platform_api_get_network_report+0x340>
 800617e:	f04f 0901 	mov.w	r9, #1
 8006182:	f04f 0800 	mov.w	r8, #0
 8006186:	464b      	mov	r3, r9
 8006188:	e01c      	b.n	80061c4 <ai_platform_api_get_network_report+0x1fc>
 800618a:	2200      	movs	r2, #0
 800618c:	f84b 2008 	str.w	r2, [fp, r8]
 8006190:	6832      	ldr	r2, [r6, #0]
 8006192:	604a      	str	r2, [r1, #4]
 8006194:	2a00      	cmp	r2, #0
 8006196:	d040      	beq.n	800621a <ai_platform_api_get_network_report+0x252>
 8006198:	8852      	ldrh	r2, [r2, #2]
 800619a:	2a00      	cmp	r2, #0
 800619c:	d03d      	beq.n	800621a <ai_platform_api_get_network_report+0x252>
 800619e:	600b      	str	r3, [r1, #0]
 80061a0:	fa1f f289 	uxth.w	r2, r9
 80061a4:	f8ca 1014 	str.w	r1, [sl, #20]
 80061a8:	89b9      	ldrh	r1, [r7, #12]
 80061aa:	4589      	cmp	r9, r1
 80061ac:	d23d      	bcs.n	800622a <ai_platform_api_get_network_report+0x262>
 80061ae:	6939      	ldr	r1, [r7, #16]
 80061b0:	2900      	cmp	r1, #0
 80061b2:	d03a      	beq.n	800622a <ai_platform_api_get_network_report+0x262>
 80061b4:	f851 6029 	ldr.w	r6, [r1, r9, lsl #2]
 80061b8:	f108 0808 	add.w	r8, r8, #8
 80061bc:	f109 0901 	add.w	r9, r9, #1
 80061c0:	2e00      	cmp	r6, #0
 80061c2:	d032      	beq.n	800622a <ai_platform_api_get_network_report+0x262>
 80061c4:	f8d7 c014 	ldr.w	ip, [r7, #20]
 80061c8:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 80061cc:	69b0      	ldr	r0, [r6, #24]
 80061ce:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80061d2:	6800      	ldr	r0, [r0, #0]
 80061d4:	eb01 0a02 	add.w	sl, r1, r2
 80061d8:	9303      	str	r3, [sp, #12]
 80061da:	f8dc b008 	ldr.w	fp, [ip, #8]
 80061de:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80061e2:	f004 fb4b 	bl	800a87c <ai_array_to_buffer_fmt>
 80061e6:	9b03      	ldr	r3, [sp, #12]
 80061e8:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 80061ec:	5088      	str	r0, [r1, r2]
 80061ee:	eb0b 0108 	add.w	r1, fp, r8
 80061f2:	f8aa 3004 	strh.w	r3, [sl, #4]
 80061f6:	68f2      	ldr	r2, [r6, #12]
 80061f8:	68d2      	ldr	r2, [r2, #12]
 80061fa:	f8aa 2006 	strh.w	r2, [sl, #6]
 80061fe:	68f2      	ldr	r2, [r6, #12]
 8006200:	6892      	ldr	r2, [r2, #8]
 8006202:	f8aa 2008 	strh.w	r2, [sl, #8]
 8006206:	68f2      	ldr	r2, [r6, #12]
 8006208:	6852      	ldr	r2, [r2, #4]
 800620a:	f8ca 200c 	str.w	r2, [sl, #12]
 800620e:	69b2      	ldr	r2, [r6, #24]
 8006210:	6892      	ldr	r2, [r2, #8]
 8006212:	f8ca 2010 	str.w	r2, [sl, #16]
 8006216:	2900      	cmp	r1, #0
 8006218:	d1b7      	bne.n	800618a <ai_platform_api_get_network_report+0x1c2>
 800621a:	2100      	movs	r1, #0
 800621c:	fa1f f289 	uxth.w	r2, r9
 8006220:	f8ca 1014 	str.w	r1, [sl, #20]
 8006224:	89b9      	ldrh	r1, [r7, #12]
 8006226:	4589      	cmp	r9, r1
 8006228:	d3c1      	bcc.n	80061ae <ai_platform_api_get_network_report+0x1e6>
 800622a:	2a00      	cmp	r2, #0
 800622c:	d06c      	beq.n	8006308 <ai_platform_api_get_network_report+0x340>
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	8662      	strh	r2, [r4, #50]	; 0x32
 8006234:	63a3      	str	r3, [r4, #56]	; 0x38
 8006236:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006238:	2b00      	cmp	r3, #0
 800623a:	d06e      	beq.n	800631a <ai_platform_api_get_network_report+0x352>
 800623c:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800623e:	2b00      	cmp	r3, #0
 8006240:	d06b      	beq.n	800631a <ai_platform_api_get_network_report+0x352>
 8006242:	6a2b      	ldr	r3, [r5, #32]
 8006244:	b113      	cbz	r3, 800624c <ai_platform_api_get_network_report+0x284>
 8006246:	8beb      	ldrh	r3, [r5, #30]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d16e      	bne.n	800632a <ai_platform_api_get_network_report+0x362>
 800624c:	f105 0010 	add.w	r0, r5, #16
 8006250:	2212      	movs	r2, #18
 8006252:	2111      	movs	r1, #17
 8006254:	2600      	movs	r6, #0
 8006256:	f001 f8a7 	bl	80073a8 <core_set_error>
 800625a:	e037      	b.n	80062cc <ai_platform_api_get_network_report+0x304>
 800625c:	4b0b      	ldr	r3, [pc, #44]	; (800628c <ai_platform_api_get_network_report+0x2c4>)
 800625e:	2201      	movs	r2, #1
 8006260:	4619      	mov	r1, r3
 8006262:	601a      	str	r2, [r3, #0]
 8006264:	680b      	ldr	r3, [r1, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1fc      	bne.n	8006264 <ai_platform_api_get_network_report+0x29c>
 800626a:	4b09      	ldr	r3, [pc, #36]	; (8006290 <ai_platform_api_get_network_report+0x2c8>)
 800626c:	4909      	ldr	r1, [pc, #36]	; (8006294 <ai_platform_api_get_network_report+0x2cc>)
 800626e:	4a0a      	ldr	r2, [pc, #40]	; (8006298 <ai_platform_api_get_network_report+0x2d0>)
 8006270:	6019      	str	r1, [r3, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4293      	cmp	r3, r2
 8006276:	f43f aed8 	beq.w	800602a <ai_platform_api_get_network_report+0x62>
 800627a:	e7fe      	b.n	800627a <ai_platform_api_get_network_report+0x2b2>
 800627c:	a1c00100 	.word	0xa1c00100
 8006280:	e0002000 	.word	0xe0002000
 8006284:	e0042000 	.word	0xe0042000
 8006288:	5c001000 	.word	0x5c001000
 800628c:	40023008 	.word	0x40023008
 8006290:	40023000 	.word	0x40023000
 8006294:	f407a5c2 	.word	0xf407a5c2
 8006298:	b5e8b5cd 	.word	0xb5e8b5cd
 800629c:	4bb2      	ldr	r3, [pc, #712]	; (8006568 <ai_platform_api_get_network_report+0x5a0>)
 800629e:	2201      	movs	r2, #1
 80062a0:	4619      	mov	r1, r3
 80062a2:	601a      	str	r2, [r3, #0]
 80062a4:	680b      	ldr	r3, [r1, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1fc      	bne.n	80062a4 <ai_platform_api_get_network_report+0x2dc>
 80062aa:	4bb0      	ldr	r3, [pc, #704]	; (800656c <ai_platform_api_get_network_report+0x5a4>)
 80062ac:	49b0      	ldr	r1, [pc, #704]	; (8006570 <ai_platform_api_get_network_report+0x5a8>)
 80062ae:	4ab1      	ldr	r2, [pc, #708]	; (8006574 <ai_platform_api_get_network_report+0x5ac>)
 80062b0:	6019      	str	r1, [r3, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4293      	cmp	r3, r2
 80062b6:	f43f aeb8 	beq.w	800602a <ai_platform_api_get_network_report+0x62>
 80062ba:	e7fe      	b.n	80062ba <ai_platform_api_get_network_report+0x2f2>
 80062bc:	2600      	movs	r6, #0
 80062be:	f105 0010 	add.w	r0, r5, #16
 80062c2:	2218      	movs	r2, #24
 80062c4:	2112      	movs	r1, #18
 80062c6:	8626      	strh	r6, [r4, #48]	; 0x30
 80062c8:	f001 f86e 	bl	80073a8 <core_set_error>
 80062cc:	4630      	mov	r0, r6
 80062ce:	b005      	add	sp, #20
 80062d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d4:	2600      	movs	r6, #0
 80062d6:	e7f9      	b.n	80062cc <ai_platform_api_get_network_report+0x304>
 80062d8:	4ba7      	ldr	r3, [pc, #668]	; (8006578 <ai_platform_api_get_network_report+0x5b0>)
 80062da:	2201      	movs	r2, #1
 80062dc:	4619      	mov	r1, r3
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	680b      	ldr	r3, [r1, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1fc      	bne.n	80062e0 <ai_platform_api_get_network_report+0x318>
 80062e6:	4ba5      	ldr	r3, [pc, #660]	; (800657c <ai_platform_api_get_network_report+0x5b4>)
 80062e8:	49a1      	ldr	r1, [pc, #644]	; (8006570 <ai_platform_api_get_network_report+0x5a8>)
 80062ea:	4aa2      	ldr	r2, [pc, #648]	; (8006574 <ai_platform_api_get_network_report+0x5ac>)
 80062ec:	6019      	str	r1, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4293      	cmp	r3, r2
 80062f2:	f43f ae9a 	beq.w	800602a <ai_platform_api_get_network_report+0x62>
 80062f6:	e7fe      	b.n	80062f6 <ai_platform_api_get_network_report+0x32e>
 80062f8:	f105 0010 	add.w	r0, r5, #16
 80062fc:	2218      	movs	r2, #24
 80062fe:	2111      	movs	r1, #17
 8006300:	2600      	movs	r6, #0
 8006302:	f001 f851 	bl	80073a8 <core_set_error>
 8006306:	e7e1      	b.n	80062cc <ai_platform_api_get_network_report+0x304>
 8006308:	2600      	movs	r6, #0
 800630a:	f105 0010 	add.w	r0, r5, #16
 800630e:	2218      	movs	r2, #24
 8006310:	2113      	movs	r1, #19
 8006312:	8666      	strh	r6, [r4, #50]	; 0x32
 8006314:	f001 f848 	bl	80073a8 <core_set_error>
 8006318:	e7d8      	b.n	80062cc <ai_platform_api_get_network_report+0x304>
 800631a:	f105 0010 	add.w	r0, r5, #16
 800631e:	2213      	movs	r2, #19
 8006320:	2111      	movs	r1, #17
 8006322:	2600      	movs	r6, #0
 8006324:	f001 f840 	bl	80073a8 <core_set_error>
 8006328:	e7d0      	b.n	80062cc <ai_platform_api_get_network_report+0x304>
 800632a:	686b      	ldr	r3, [r5, #4]
 800632c:	f46f 678a 	mvn.w	r7, #1104	; 0x450
 8006330:	4a93      	ldr	r2, [pc, #588]	; (8006580 <ai_platform_api_get_network_report+0x5b8>)
 8006332:	6723      	str	r3, [r4, #112]	; 0x70
 8006334:	6813      	ldr	r3, [r2, #0]
 8006336:	f023 0301 	bic.w	r3, r3, #1
 800633a:	6013      	str	r3, [r2, #0]
 800633c:	f7ff fade 	bl	80058fc <_ai_platform_acquire_crc>
 8006340:	4b90      	ldr	r3, [pc, #576]	; (8006584 <ai_platform_api_get_network_report+0x5bc>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006348:	19da      	adds	r2, r3, r7
 800634a:	2a01      	cmp	r2, #1
 800634c:	f240 80c1 	bls.w	80064d2 <ai_platform_api_get_network_report+0x50a>
 8006350:	f240 4249 	movw	r2, #1097	; 0x449
 8006354:	4293      	cmp	r3, r2
 8006356:	f000 80bc 	beq.w	80064d2 <ai_platform_api_get_network_report+0x50a>
 800635a:	4a8b      	ldr	r2, [pc, #556]	; (8006588 <ai_platform_api_get_network_report+0x5c0>)
 800635c:	6813      	ldr	r3, [r2, #0]
 800635e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006362:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006366:	f000 8195 	beq.w	8006694 <ai_platform_api_get_network_report+0x6cc>
 800636a:	6813      	ldr	r3, [r2, #0]
 800636c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006370:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006374:	f000 817e 	beq.w	8006674 <ai_platform_api_get_network_report+0x6ac>
 8006378:	f7ff fac2 	bl	8005900 <_ai_platform_release_crc>
 800637c:	4a80      	ldr	r2, [pc, #512]	; (8006580 <ai_platform_api_get_network_report+0x5b8>)
 800637e:	4b83      	ldr	r3, [pc, #524]	; (800658c <ai_platform_api_get_network_report+0x5c4>)
 8006380:	f46f 668a 	mvn.w	r6, #1104	; 0x450
 8006384:	6123      	str	r3, [r4, #16]
 8006386:	6813      	ldr	r3, [r2, #0]
 8006388:	f023 0301 	bic.w	r3, r3, #1
 800638c:	6013      	str	r3, [r2, #0]
 800638e:	f7ff fab5 	bl	80058fc <_ai_platform_acquire_crc>
 8006392:	4b7c      	ldr	r3, [pc, #496]	; (8006584 <ai_platform_api_get_network_report+0x5bc>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800639a:	199a      	adds	r2, r3, r6
 800639c:	2a01      	cmp	r2, #1
 800639e:	f240 8159 	bls.w	8006654 <ai_platform_api_get_network_report+0x68c>
 80063a2:	f240 4249 	movw	r2, #1097	; 0x449
 80063a6:	4293      	cmp	r3, r2
 80063a8:	f000 8154 	beq.w	8006654 <ai_platform_api_get_network_report+0x68c>
 80063ac:	4a76      	ldr	r2, [pc, #472]	; (8006588 <ai_platform_api_get_network_report+0x5c0>)
 80063ae:	6813      	ldr	r3, [r2, #0]
 80063b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063b4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80063b8:	f000 813c 	beq.w	8006634 <ai_platform_api_get_network_report+0x66c>
 80063bc:	6813      	ldr	r3, [r2, #0]
 80063be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063c2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80063c6:	f000 8125 	beq.w	8006614 <ai_platform_api_get_network_report+0x64c>
 80063ca:	f7ff fa99 	bl	8005900 <_ai_platform_release_crc>
 80063ce:	4a6c      	ldr	r2, [pc, #432]	; (8006580 <ai_platform_api_get_network_report+0x5b8>)
 80063d0:	2307      	movs	r3, #7
 80063d2:	6163      	str	r3, [r4, #20]
 80063d4:	6813      	ldr	r3, [r2, #0]
 80063d6:	f023 0301 	bic.w	r3, r3, #1
 80063da:	6013      	str	r3, [r2, #0]
 80063dc:	f7ff fa8e 	bl	80058fc <_ai_platform_acquire_crc>
 80063e0:	4b68      	ldr	r3, [pc, #416]	; (8006584 <ai_platform_api_get_network_report+0x5bc>)
 80063e2:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063ec:	185a      	adds	r2, r3, r1
 80063ee:	2a01      	cmp	r2, #1
 80063f0:	f240 8100 	bls.w	80065f4 <ai_platform_api_get_network_report+0x62c>
 80063f4:	f240 4249 	movw	r2, #1097	; 0x449
 80063f8:	4293      	cmp	r3, r2
 80063fa:	f000 80fb 	beq.w	80065f4 <ai_platform_api_get_network_report+0x62c>
 80063fe:	4a62      	ldr	r2, [pc, #392]	; (8006588 <ai_platform_api_get_network_report+0x5c0>)
 8006400:	6813      	ldr	r3, [r2, #0]
 8006402:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006406:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800640a:	f000 80e3 	beq.w	80065d4 <ai_platform_api_get_network_report+0x60c>
 800640e:	6813      	ldr	r3, [r2, #0]
 8006410:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006414:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006418:	f000 80cc 	beq.w	80065b4 <ai_platform_api_get_network_report+0x5ec>
 800641c:	f7ff fa70 	bl	8005900 <_ai_platform_release_crc>
 8006420:	4a57      	ldr	r2, [pc, #348]	; (8006580 <ai_platform_api_get_network_report+0x5b8>)
 8006422:	f240 1301 	movw	r3, #257	; 0x101
 8006426:	6263      	str	r3, [r4, #36]	; 0x24
 8006428:	6813      	ldr	r3, [r2, #0]
 800642a:	f023 0301 	bic.w	r3, r3, #1
 800642e:	6013      	str	r3, [r2, #0]
 8006430:	f7ff fa64 	bl	80058fc <_ai_platform_acquire_crc>
 8006434:	4b53      	ldr	r3, [pc, #332]	; (8006584 <ai_platform_api_get_network_report+0x5bc>)
 8006436:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006440:	189a      	adds	r2, r3, r2
 8006442:	2a01      	cmp	r2, #1
 8006444:	f240 80a6 	bls.w	8006594 <ai_platform_api_get_network_report+0x5cc>
 8006448:	f240 4249 	movw	r2, #1097	; 0x449
 800644c:	4293      	cmp	r3, r2
 800644e:	f000 80a1 	beq.w	8006594 <ai_platform_api_get_network_report+0x5cc>
 8006452:	4a4d      	ldr	r2, [pc, #308]	; (8006588 <ai_platform_api_get_network_report+0x5c0>)
 8006454:	6813      	ldr	r3, [r2, #0]
 8006456:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800645a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800645e:	d073      	beq.n	8006548 <ai_platform_api_get_network_report+0x580>
 8006460:	6813      	ldr	r3, [r2, #0]
 8006462:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006466:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800646a:	d05e      	beq.n	800652a <ai_platform_api_get_network_report+0x562>
 800646c:	f7ff fa48 	bl	8005900 <_ai_platform_release_crc>
 8006470:	f240 4301 	movw	r3, #1025	; 0x401
 8006474:	2100      	movs	r1, #0
 8006476:	4a46      	ldr	r2, [pc, #280]	; (8006590 <ai_platform_api_get_network_report+0x5c8>)
 8006478:	62a3      	str	r3, [r4, #40]	; 0x28
 800647a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800647c:	f884 1023 	strb.w	r1, [r4, #35]	; 0x23
 8006480:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006482:	0e1e      	lsrs	r6, r3, #24
 8006484:	0c18      	lsrs	r0, r3, #16
 8006486:	4291      	cmp	r1, r2
 8006488:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800648c:	f884 6020 	strb.w	r6, [r4, #32]
 8006490:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
 8006494:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8006498:	d037      	beq.n	800650a <ai_platform_api_get_network_report+0x542>
 800649a:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800649c:	2e00      	cmp	r6, #0
 800649e:	d031      	beq.n	8006504 <ai_platform_api_get_network_report+0x53c>
 80064a0:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d02e      	beq.n	8006504 <ai_platform_api_get_network_report+0x53c>
 80064a6:	f104 0754 	add.w	r7, r4, #84	; 0x54
 80064aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80064ac:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80064ae:	e896 0003 	ldmia.w	r6, {r0, r1}
 80064b2:	e887 0003 	stmia.w	r7, {r0, r1}
 80064b6:	6a2b      	ldr	r3, [r5, #32]
 80064b8:	b1db      	cbz	r3, 80064f2 <ai_platform_api_get_network_report+0x52a>
 80064ba:	8bea      	ldrh	r2, [r5, #30]
 80064bc:	b1ca      	cbz	r2, 80064f2 <ai_platform_api_get_network_report+0x52a>
 80064be:	461d      	mov	r5, r3
 80064c0:	343c      	adds	r4, #60	; 0x3c
 80064c2:	2601      	movs	r6, #1
 80064c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80064cc:	e884 0003 	stmia.w	r4, {r0, r1}
 80064d0:	e6fc      	b.n	80062cc <ai_platform_api_get_network_report+0x304>
 80064d2:	4b29      	ldr	r3, [pc, #164]	; (8006578 <ai_platform_api_get_network_report+0x5b0>)
 80064d4:	2201      	movs	r2, #1
 80064d6:	4619      	mov	r1, r3
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	680b      	ldr	r3, [r1, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1fc      	bne.n	80064da <ai_platform_api_get_network_report+0x512>
 80064e0:	4b26      	ldr	r3, [pc, #152]	; (800657c <ai_platform_api_get_network_report+0x5b4>)
 80064e2:	4923      	ldr	r1, [pc, #140]	; (8006570 <ai_platform_api_get_network_report+0x5a8>)
 80064e4:	4a23      	ldr	r2, [pc, #140]	; (8006574 <ai_platform_api_get_network_report+0x5ac>)
 80064e6:	6019      	str	r1, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4293      	cmp	r3, r2
 80064ec:	f43f af44 	beq.w	8006378 <ai_platform_api_get_network_report+0x3b0>
 80064f0:	e7fe      	b.n	80064f0 <ai_platform_api_get_network_report+0x528>
 80064f2:	2500      	movs	r5, #0
 80064f4:	343c      	adds	r4, #60	; 0x3c
 80064f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80064fe:	e884 0003 	stmia.w	r4, {r0, r1}
 8006502:	deff      	udf	#255	; 0xff
 8006504:	2500      	movs	r5, #0
 8006506:	3454      	adds	r4, #84	; 0x54
 8006508:	e7f5      	b.n	80064f6 <ai_platform_api_get_network_report+0x52e>
 800650a:	f105 0224 	add.w	r2, r5, #36	; 0x24
 800650e:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8006512:	351c      	adds	r5, #28
 8006514:	3440      	adds	r4, #64	; 0x40
 8006516:	2601      	movs	r6, #1
 8006518:	e892 0003 	ldmia.w	r2, {r0, r1}
 800651c:	e883 0003 	stmia.w	r3, {r0, r1}
 8006520:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006524:	e884 0003 	stmia.w	r4, {r0, r1}
 8006528:	e6d0      	b.n	80062cc <ai_platform_api_get_network_report+0x304>
 800652a:	4b13      	ldr	r3, [pc, #76]	; (8006578 <ai_platform_api_get_network_report+0x5b0>)
 800652c:	2201      	movs	r2, #1
 800652e:	4619      	mov	r1, r3
 8006530:	601a      	str	r2, [r3, #0]
 8006532:	680b      	ldr	r3, [r1, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1fc      	bne.n	8006532 <ai_platform_api_get_network_report+0x56a>
 8006538:	4b10      	ldr	r3, [pc, #64]	; (800657c <ai_platform_api_get_network_report+0x5b4>)
 800653a:	490d      	ldr	r1, [pc, #52]	; (8006570 <ai_platform_api_get_network_report+0x5a8>)
 800653c:	4a0d      	ldr	r2, [pc, #52]	; (8006574 <ai_platform_api_get_network_report+0x5ac>)
 800653e:	6019      	str	r1, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4293      	cmp	r3, r2
 8006544:	d092      	beq.n	800646c <ai_platform_api_get_network_report+0x4a4>
 8006546:	e7fe      	b.n	8006546 <ai_platform_api_get_network_report+0x57e>
 8006548:	4b07      	ldr	r3, [pc, #28]	; (8006568 <ai_platform_api_get_network_report+0x5a0>)
 800654a:	2201      	movs	r2, #1
 800654c:	4619      	mov	r1, r3
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	680b      	ldr	r3, [r1, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1fc      	bne.n	8006550 <ai_platform_api_get_network_report+0x588>
 8006556:	4b05      	ldr	r3, [pc, #20]	; (800656c <ai_platform_api_get_network_report+0x5a4>)
 8006558:	4905      	ldr	r1, [pc, #20]	; (8006570 <ai_platform_api_get_network_report+0x5a8>)
 800655a:	4a06      	ldr	r2, [pc, #24]	; (8006574 <ai_platform_api_get_network_report+0x5ac>)
 800655c:	6019      	str	r1, [r3, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4293      	cmp	r3, r2
 8006562:	d083      	beq.n	800646c <ai_platform_api_get_network_report+0x4a4>
 8006564:	e7fe      	b.n	8006564 <ai_platform_api_get_network_report+0x59c>
 8006566:	bf00      	nop
 8006568:	58024c08 	.word	0x58024c08
 800656c:	58024c00 	.word	0x58024c00
 8006570:	f407a5c2 	.word	0xf407a5c2
 8006574:	b5e8b5cd 	.word	0xb5e8b5cd
 8006578:	40023008 	.word	0x40023008
 800657c:	40023000 	.word	0x40023000
 8006580:	e0002000 	.word	0xe0002000
 8006584:	e0042000 	.word	0xe0042000
 8006588:	5c001000 	.word	0x5c001000
 800658c:	08069a14 	.word	0x08069a14
 8006590:	a1facade 	.word	0xa1facade
 8006594:	4b47      	ldr	r3, [pc, #284]	; (80066b4 <ai_platform_api_get_network_report+0x6ec>)
 8006596:	2201      	movs	r2, #1
 8006598:	4619      	mov	r1, r3
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	680b      	ldr	r3, [r1, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1fc      	bne.n	800659c <ai_platform_api_get_network_report+0x5d4>
 80065a2:	4b45      	ldr	r3, [pc, #276]	; (80066b8 <ai_platform_api_get_network_report+0x6f0>)
 80065a4:	4945      	ldr	r1, [pc, #276]	; (80066bc <ai_platform_api_get_network_report+0x6f4>)
 80065a6:	4a46      	ldr	r2, [pc, #280]	; (80066c0 <ai_platform_api_get_network_report+0x6f8>)
 80065a8:	6019      	str	r1, [r3, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4293      	cmp	r3, r2
 80065ae:	f43f af5d 	beq.w	800646c <ai_platform_api_get_network_report+0x4a4>
 80065b2:	e7fe      	b.n	80065b2 <ai_platform_api_get_network_report+0x5ea>
 80065b4:	4b3f      	ldr	r3, [pc, #252]	; (80066b4 <ai_platform_api_get_network_report+0x6ec>)
 80065b6:	2201      	movs	r2, #1
 80065b8:	4619      	mov	r1, r3
 80065ba:	601a      	str	r2, [r3, #0]
 80065bc:	680b      	ldr	r3, [r1, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1fc      	bne.n	80065bc <ai_platform_api_get_network_report+0x5f4>
 80065c2:	4b3d      	ldr	r3, [pc, #244]	; (80066b8 <ai_platform_api_get_network_report+0x6f0>)
 80065c4:	493d      	ldr	r1, [pc, #244]	; (80066bc <ai_platform_api_get_network_report+0x6f4>)
 80065c6:	4a3e      	ldr	r2, [pc, #248]	; (80066c0 <ai_platform_api_get_network_report+0x6f8>)
 80065c8:	6019      	str	r1, [r3, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4293      	cmp	r3, r2
 80065ce:	f43f af25 	beq.w	800641c <ai_platform_api_get_network_report+0x454>
 80065d2:	e7fe      	b.n	80065d2 <ai_platform_api_get_network_report+0x60a>
 80065d4:	4b3b      	ldr	r3, [pc, #236]	; (80066c4 <ai_platform_api_get_network_report+0x6fc>)
 80065d6:	2201      	movs	r2, #1
 80065d8:	4619      	mov	r1, r3
 80065da:	601a      	str	r2, [r3, #0]
 80065dc:	680b      	ldr	r3, [r1, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1fc      	bne.n	80065dc <ai_platform_api_get_network_report+0x614>
 80065e2:	4b39      	ldr	r3, [pc, #228]	; (80066c8 <ai_platform_api_get_network_report+0x700>)
 80065e4:	4935      	ldr	r1, [pc, #212]	; (80066bc <ai_platform_api_get_network_report+0x6f4>)
 80065e6:	4a36      	ldr	r2, [pc, #216]	; (80066c0 <ai_platform_api_get_network_report+0x6f8>)
 80065e8:	6019      	str	r1, [r3, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4293      	cmp	r3, r2
 80065ee:	f43f af15 	beq.w	800641c <ai_platform_api_get_network_report+0x454>
 80065f2:	e7fe      	b.n	80065f2 <ai_platform_api_get_network_report+0x62a>
 80065f4:	4b2f      	ldr	r3, [pc, #188]	; (80066b4 <ai_platform_api_get_network_report+0x6ec>)
 80065f6:	2201      	movs	r2, #1
 80065f8:	4619      	mov	r1, r3
 80065fa:	601a      	str	r2, [r3, #0]
 80065fc:	680b      	ldr	r3, [r1, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1fc      	bne.n	80065fc <ai_platform_api_get_network_report+0x634>
 8006602:	4b2d      	ldr	r3, [pc, #180]	; (80066b8 <ai_platform_api_get_network_report+0x6f0>)
 8006604:	492d      	ldr	r1, [pc, #180]	; (80066bc <ai_platform_api_get_network_report+0x6f4>)
 8006606:	4a2e      	ldr	r2, [pc, #184]	; (80066c0 <ai_platform_api_get_network_report+0x6f8>)
 8006608:	6019      	str	r1, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4293      	cmp	r3, r2
 800660e:	f43f af05 	beq.w	800641c <ai_platform_api_get_network_report+0x454>
 8006612:	e7fe      	b.n	8006612 <ai_platform_api_get_network_report+0x64a>
 8006614:	4b27      	ldr	r3, [pc, #156]	; (80066b4 <ai_platform_api_get_network_report+0x6ec>)
 8006616:	2201      	movs	r2, #1
 8006618:	4619      	mov	r1, r3
 800661a:	601a      	str	r2, [r3, #0]
 800661c:	680b      	ldr	r3, [r1, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1fc      	bne.n	800661c <ai_platform_api_get_network_report+0x654>
 8006622:	4b25      	ldr	r3, [pc, #148]	; (80066b8 <ai_platform_api_get_network_report+0x6f0>)
 8006624:	4925      	ldr	r1, [pc, #148]	; (80066bc <ai_platform_api_get_network_report+0x6f4>)
 8006626:	4a26      	ldr	r2, [pc, #152]	; (80066c0 <ai_platform_api_get_network_report+0x6f8>)
 8006628:	6019      	str	r1, [r3, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4293      	cmp	r3, r2
 800662e:	f43f aecc 	beq.w	80063ca <ai_platform_api_get_network_report+0x402>
 8006632:	e7fe      	b.n	8006632 <ai_platform_api_get_network_report+0x66a>
 8006634:	4b23      	ldr	r3, [pc, #140]	; (80066c4 <ai_platform_api_get_network_report+0x6fc>)
 8006636:	2201      	movs	r2, #1
 8006638:	4619      	mov	r1, r3
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	680b      	ldr	r3, [r1, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1fc      	bne.n	800663c <ai_platform_api_get_network_report+0x674>
 8006642:	4b21      	ldr	r3, [pc, #132]	; (80066c8 <ai_platform_api_get_network_report+0x700>)
 8006644:	491d      	ldr	r1, [pc, #116]	; (80066bc <ai_platform_api_get_network_report+0x6f4>)
 8006646:	4a1e      	ldr	r2, [pc, #120]	; (80066c0 <ai_platform_api_get_network_report+0x6f8>)
 8006648:	6019      	str	r1, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4293      	cmp	r3, r2
 800664e:	f43f aebc 	beq.w	80063ca <ai_platform_api_get_network_report+0x402>
 8006652:	e7fe      	b.n	8006652 <ai_platform_api_get_network_report+0x68a>
 8006654:	4b17      	ldr	r3, [pc, #92]	; (80066b4 <ai_platform_api_get_network_report+0x6ec>)
 8006656:	2201      	movs	r2, #1
 8006658:	4619      	mov	r1, r3
 800665a:	601a      	str	r2, [r3, #0]
 800665c:	680b      	ldr	r3, [r1, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1fc      	bne.n	800665c <ai_platform_api_get_network_report+0x694>
 8006662:	4b15      	ldr	r3, [pc, #84]	; (80066b8 <ai_platform_api_get_network_report+0x6f0>)
 8006664:	4915      	ldr	r1, [pc, #84]	; (80066bc <ai_platform_api_get_network_report+0x6f4>)
 8006666:	4a16      	ldr	r2, [pc, #88]	; (80066c0 <ai_platform_api_get_network_report+0x6f8>)
 8006668:	6019      	str	r1, [r3, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4293      	cmp	r3, r2
 800666e:	f43f aeac 	beq.w	80063ca <ai_platform_api_get_network_report+0x402>
 8006672:	e7fe      	b.n	8006672 <ai_platform_api_get_network_report+0x6aa>
 8006674:	4b0f      	ldr	r3, [pc, #60]	; (80066b4 <ai_platform_api_get_network_report+0x6ec>)
 8006676:	2201      	movs	r2, #1
 8006678:	4619      	mov	r1, r3
 800667a:	601a      	str	r2, [r3, #0]
 800667c:	680b      	ldr	r3, [r1, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1fc      	bne.n	800667c <ai_platform_api_get_network_report+0x6b4>
 8006682:	4b0d      	ldr	r3, [pc, #52]	; (80066b8 <ai_platform_api_get_network_report+0x6f0>)
 8006684:	490d      	ldr	r1, [pc, #52]	; (80066bc <ai_platform_api_get_network_report+0x6f4>)
 8006686:	4a0e      	ldr	r2, [pc, #56]	; (80066c0 <ai_platform_api_get_network_report+0x6f8>)
 8006688:	6019      	str	r1, [r3, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4293      	cmp	r3, r2
 800668e:	f43f ae73 	beq.w	8006378 <ai_platform_api_get_network_report+0x3b0>
 8006692:	e7fe      	b.n	8006692 <ai_platform_api_get_network_report+0x6ca>
 8006694:	4b0b      	ldr	r3, [pc, #44]	; (80066c4 <ai_platform_api_get_network_report+0x6fc>)
 8006696:	2201      	movs	r2, #1
 8006698:	4619      	mov	r1, r3
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	680b      	ldr	r3, [r1, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1fc      	bne.n	800669c <ai_platform_api_get_network_report+0x6d4>
 80066a2:	4b09      	ldr	r3, [pc, #36]	; (80066c8 <ai_platform_api_get_network_report+0x700>)
 80066a4:	4905      	ldr	r1, [pc, #20]	; (80066bc <ai_platform_api_get_network_report+0x6f4>)
 80066a6:	4a06      	ldr	r2, [pc, #24]	; (80066c0 <ai_platform_api_get_network_report+0x6f8>)
 80066a8:	6019      	str	r1, [r3, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4293      	cmp	r3, r2
 80066ae:	f43f ae63 	beq.w	8006378 <ai_platform_api_get_network_report+0x3b0>
 80066b2:	e7fe      	b.n	80066b2 <ai_platform_api_get_network_report+0x6ea>
 80066b4:	40023008 	.word	0x40023008
 80066b8:	40023000 	.word	0x40023000
 80066bc:	f407a5c2 	.word	0xf407a5c2
 80066c0:	b5e8b5cd 	.word	0xb5e8b5cd
 80066c4:	58024c08 	.word	0x58024c08
 80066c8:	58024c00 	.word	0x58024c00

080066cc <ai_platform_network_create>:
 80066cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066d0:	b082      	sub	sp, #8
 80066d2:	4680      	mov	r8, r0
 80066d4:	4616      	mov	r6, r2
 80066d6:	461d      	mov	r5, r3
 80066d8:	f89d 4020 	ldrb.w	r4, [sp, #32]
 80066dc:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 80066e0:	f7ff f90c 	bl	80058fc <_ai_platform_acquire_crc>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	d069      	beq.n	80067bc <ai_platform_network_create+0xf0>
 80066e8:	4b95      	ldr	r3, [pc, #596]	; (8006940 <ai_platform_network_create+0x274>)
 80066ea:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 80066ee:	4602      	mov	r2, r0
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066f6:	eb03 010c 	add.w	r1, r3, ip
 80066fa:	2901      	cmp	r1, #1
 80066fc:	d955      	bls.n	80067aa <ai_platform_network_create+0xde>
 80066fe:	f240 4149 	movw	r1, #1097	; 0x449
 8006702:	428b      	cmp	r3, r1
 8006704:	d051      	beq.n	80067aa <ai_platform_network_create+0xde>
 8006706:	498f      	ldr	r1, [pc, #572]	; (8006944 <ai_platform_network_create+0x278>)
 8006708:	680b      	ldr	r3, [r1, #0]
 800670a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800670e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006712:	d067      	beq.n	80067e4 <ai_platform_network_create+0x118>
 8006714:	680b      	ldr	r3, [r1, #0]
 8006716:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800671a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800671e:	d07c      	beq.n	800681a <ai_platform_network_create+0x14e>
 8006720:	f7ff f8ee 	bl	8005900 <_ai_platform_release_crc>
 8006724:	4a88      	ldr	r2, [pc, #544]	; (8006948 <ai_platform_network_create+0x27c>)
 8006726:	6813      	ldr	r3, [r2, #0]
 8006728:	f023 0301 	bic.w	r3, r3, #1
 800672c:	6013      	str	r3, [r2, #0]
 800672e:	f7ff f8e5 	bl	80058fc <_ai_platform_acquire_crc>
 8006732:	4b83      	ldr	r3, [pc, #524]	; (8006940 <ai_platform_network_create+0x274>)
 8006734:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800673e:	185a      	adds	r2, r3, r1
 8006740:	2a01      	cmp	r2, #1
 8006742:	d940      	bls.n	80067c6 <ai_platform_network_create+0xfa>
 8006744:	f240 4249 	movw	r2, #1097	; 0x449
 8006748:	4293      	cmp	r3, r2
 800674a:	d03c      	beq.n	80067c6 <ai_platform_network_create+0xfa>
 800674c:	4a7d      	ldr	r2, [pc, #500]	; (8006944 <ai_platform_network_create+0x278>)
 800674e:	6813      	ldr	r3, [r2, #0]
 8006750:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006754:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006758:	f000 80a8 	beq.w	80068ac <ai_platform_network_create+0x1e0>
 800675c:	6813      	ldr	r3, [r2, #0]
 800675e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006762:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006766:	f000 8091 	beq.w	800688c <ai_platform_network_create+0x1c0>
 800676a:	f7ff f8c9 	bl	8005900 <_ai_platform_release_crc>
 800676e:	f1b8 0f00 	cmp.w	r8, #0
 8006772:	d045      	beq.n	8006800 <ai_platform_network_create+0x134>
 8006774:	4b75      	ldr	r3, [pc, #468]	; (800694c <ai_platform_network_create+0x280>)
 8006776:	6033      	str	r3, [r6, #0]
 8006778:	f8c8 6000 	str.w	r6, [r8]
 800677c:	f000 fe0c 	bl	8007398 <core_init>
 8006780:	2800      	cmp	r0, #0
 8006782:	d157      	bne.n	8006834 <ai_platform_network_create+0x168>
 8006784:	062d      	lsls	r5, r5, #24
 8006786:	2230      	movs	r2, #48	; 0x30
 8006788:	0424      	lsls	r4, r4, #16
 800678a:	2300      	movs	r3, #0
 800678c:	2110      	movs	r1, #16
 800678e:	f8c8 3000 	str.w	r3, [r8]
 8006792:	2000      	movs	r0, #0
 8006794:	ea44 2307 	orr.w	r3, r4, r7, lsl #8
 8006798:	f362 0007 	bfi	r0, r2, #0, #8
 800679c:	432b      	orrs	r3, r5
 800679e:	f361 201f 	bfi	r0, r1, #8, #24
 80067a2:	6473      	str	r3, [r6, #68]	; 0x44
 80067a4:	b002      	add	sp, #8
 80067a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067aa:	4b69      	ldr	r3, [pc, #420]	; (8006950 <ai_platform_network_create+0x284>)
 80067ac:	2118      	movs	r1, #24
 80067ae:	6019      	str	r1, [r3, #0]
 80067b0:	6819      	ldr	r1, [r3, #0]
 80067b2:	2918      	cmp	r1, #24
 80067b4:	d029      	beq.n	800680a <ai_platform_network_create+0x13e>
 80067b6:	4610      	mov	r0, r2
 80067b8:	f7ff f8a2 	bl	8005900 <_ai_platform_release_crc>
 80067bc:	f241 0033 	movw	r0, #4147	; 0x1033
 80067c0:	b002      	add	sp, #8
 80067c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067c6:	4b62      	ldr	r3, [pc, #392]	; (8006950 <ai_platform_network_create+0x284>)
 80067c8:	2201      	movs	r2, #1
 80067ca:	4619      	mov	r1, r3
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	680b      	ldr	r3, [r1, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1fc      	bne.n	80067ce <ai_platform_network_create+0x102>
 80067d4:	4b5f      	ldr	r3, [pc, #380]	; (8006954 <ai_platform_network_create+0x288>)
 80067d6:	4960      	ldr	r1, [pc, #384]	; (8006958 <ai_platform_network_create+0x28c>)
 80067d8:	4a60      	ldr	r2, [pc, #384]	; (800695c <ai_platform_network_create+0x290>)
 80067da:	6019      	str	r1, [r3, #0]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4293      	cmp	r3, r2
 80067e0:	d0c3      	beq.n	800676a <ai_platform_network_create+0x9e>
 80067e2:	e7fe      	b.n	80067e2 <ai_platform_network_create+0x116>
 80067e4:	4b5e      	ldr	r3, [pc, #376]	; (8006960 <ai_platform_network_create+0x294>)
 80067e6:	2118      	movs	r1, #24
 80067e8:	6019      	str	r1, [r3, #0]
 80067ea:	6819      	ldr	r1, [r3, #0]
 80067ec:	2918      	cmp	r1, #24
 80067ee:	d1e3      	bne.n	80067b8 <ai_platform_network_create+0xec>
 80067f0:	2101      	movs	r1, #1
 80067f2:	4618      	mov	r0, r3
 80067f4:	6019      	str	r1, [r3, #0]
 80067f6:	6803      	ldr	r3, [r0, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1fc      	bne.n	80067f6 <ai_platform_network_create+0x12a>
 80067fc:	4610      	mov	r0, r2
 80067fe:	e78f      	b.n	8006720 <ai_platform_network_create+0x54>
 8006800:	f241 0010 	movw	r0, #4112	; 0x1010
 8006804:	b002      	add	sp, #8
 8006806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800680a:	2101      	movs	r1, #1
 800680c:	4618      	mov	r0, r3
 800680e:	6019      	str	r1, [r3, #0]
 8006810:	6803      	ldr	r3, [r0, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1fc      	bne.n	8006810 <ai_platform_network_create+0x144>
 8006816:	4610      	mov	r0, r2
 8006818:	e782      	b.n	8006720 <ai_platform_network_create+0x54>
 800681a:	4b4d      	ldr	r3, [pc, #308]	; (8006950 <ai_platform_network_create+0x284>)
 800681c:	2118      	movs	r1, #24
 800681e:	6019      	str	r1, [r3, #0]
 8006820:	6819      	ldr	r1, [r3, #0]
 8006822:	2918      	cmp	r1, #24
 8006824:	d1c8      	bne.n	80067b8 <ai_platform_network_create+0xec>
 8006826:	2101      	movs	r1, #1
 8006828:	4618      	mov	r0, r3
 800682a:	6019      	str	r1, [r3, #0]
 800682c:	6803      	ldr	r3, [r0, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1fc      	bne.n	800682c <ai_platform_network_create+0x160>
 8006832:	e7e3      	b.n	80067fc <ai_platform_network_create+0x130>
 8006834:	4a44      	ldr	r2, [pc, #272]	; (8006948 <ai_platform_network_create+0x27c>)
 8006836:	6813      	ldr	r3, [r2, #0]
 8006838:	f023 0301 	bic.w	r3, r3, #1
 800683c:	6013      	str	r3, [r2, #0]
 800683e:	f7ff f85d 	bl	80058fc <_ai_platform_acquire_crc>
 8006842:	4b3f      	ldr	r3, [pc, #252]	; (8006940 <ai_platform_network_create+0x274>)
 8006844:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800684e:	189a      	adds	r2, r3, r2
 8006850:	2a01      	cmp	r2, #1
 8006852:	d965      	bls.n	8006920 <ai_platform_network_create+0x254>
 8006854:	f240 4249 	movw	r2, #1097	; 0x449
 8006858:	4293      	cmp	r3, r2
 800685a:	d061      	beq.n	8006920 <ai_platform_network_create+0x254>
 800685c:	4a39      	ldr	r2, [pc, #228]	; (8006944 <ai_platform_network_create+0x278>)
 800685e:	6813      	ldr	r3, [r2, #0]
 8006860:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006864:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006868:	d04b      	beq.n	8006902 <ai_platform_network_create+0x236>
 800686a:	6813      	ldr	r3, [r2, #0]
 800686c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006870:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006874:	d034      	beq.n	80068e0 <ai_platform_network_create+0x214>
 8006876:	062d      	lsls	r5, r5, #24
 8006878:	0424      	lsls	r4, r4, #16
 800687a:	f7ff f841 	bl	8005900 <_ai_platform_release_crc>
 800687e:	ea45 0304 	orr.w	r3, r5, r4
 8006882:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8006886:	d021      	beq.n	80068cc <ai_platform_network_create+0x200>
 8006888:	2201      	movs	r2, #1
 800688a:	e77e      	b.n	800678a <ai_platform_network_create+0xbe>
 800688c:	4b30      	ldr	r3, [pc, #192]	; (8006950 <ai_platform_network_create+0x284>)
 800688e:	2201      	movs	r2, #1
 8006890:	4619      	mov	r1, r3
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	680b      	ldr	r3, [r1, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1fc      	bne.n	8006894 <ai_platform_network_create+0x1c8>
 800689a:	4b2e      	ldr	r3, [pc, #184]	; (8006954 <ai_platform_network_create+0x288>)
 800689c:	492e      	ldr	r1, [pc, #184]	; (8006958 <ai_platform_network_create+0x28c>)
 800689e:	4a2f      	ldr	r2, [pc, #188]	; (800695c <ai_platform_network_create+0x290>)
 80068a0:	6019      	str	r1, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4293      	cmp	r3, r2
 80068a6:	f43f af60 	beq.w	800676a <ai_platform_network_create+0x9e>
 80068aa:	e7fe      	b.n	80068aa <ai_platform_network_create+0x1de>
 80068ac:	4b2c      	ldr	r3, [pc, #176]	; (8006960 <ai_platform_network_create+0x294>)
 80068ae:	2201      	movs	r2, #1
 80068b0:	4619      	mov	r1, r3
 80068b2:	601a      	str	r2, [r3, #0]
 80068b4:	680b      	ldr	r3, [r1, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1fc      	bne.n	80068b4 <ai_platform_network_create+0x1e8>
 80068ba:	4b2a      	ldr	r3, [pc, #168]	; (8006964 <ai_platform_network_create+0x298>)
 80068bc:	4926      	ldr	r1, [pc, #152]	; (8006958 <ai_platform_network_create+0x28c>)
 80068be:	4a27      	ldr	r2, [pc, #156]	; (800695c <ai_platform_network_create+0x290>)
 80068c0:	6019      	str	r1, [r3, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4293      	cmp	r3, r2
 80068c6:	f43f af50 	beq.w	800676a <ai_platform_network_create+0x9e>
 80068ca:	e7fe      	b.n	80068ca <ai_platform_network_create+0x1fe>
 80068cc:	4b26      	ldr	r3, [pc, #152]	; (8006968 <ai_platform_network_create+0x29c>)
 80068ce:	a802      	add	r0, sp, #8
 80068d0:	f840 3d04 	str.w	r3, [r0, #-4]!
 80068d4:	f003 ff32 	bl	800a73c <ai_check_custom_types>
 80068d8:	b188      	cbz	r0, 80068fe <ai_platform_network_create+0x232>
 80068da:	2100      	movs	r1, #0
 80068dc:	460a      	mov	r2, r1
 80068de:	e758      	b.n	8006792 <ai_platform_network_create+0xc6>
 80068e0:	4b1b      	ldr	r3, [pc, #108]	; (8006950 <ai_platform_network_create+0x284>)
 80068e2:	2201      	movs	r2, #1
 80068e4:	4619      	mov	r1, r3
 80068e6:	601a      	str	r2, [r3, #0]
 80068e8:	680b      	ldr	r3, [r1, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1fc      	bne.n	80068e8 <ai_platform_network_create+0x21c>
 80068ee:	4b19      	ldr	r3, [pc, #100]	; (8006954 <ai_platform_network_create+0x288>)
 80068f0:	4919      	ldr	r1, [pc, #100]	; (8006958 <ai_platform_network_create+0x28c>)
 80068f2:	4a1a      	ldr	r2, [pc, #104]	; (800695c <ai_platform_network_create+0x290>)
 80068f4:	6019      	str	r1, [r3, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d0bc      	beq.n	8006876 <ai_platform_network_create+0x1aa>
 80068fc:	e7fe      	b.n	80068fc <ai_platform_network_create+0x230>
 80068fe:	2202      	movs	r2, #2
 8006900:	e743      	b.n	800678a <ai_platform_network_create+0xbe>
 8006902:	4b17      	ldr	r3, [pc, #92]	; (8006960 <ai_platform_network_create+0x294>)
 8006904:	2201      	movs	r2, #1
 8006906:	4619      	mov	r1, r3
 8006908:	601a      	str	r2, [r3, #0]
 800690a:	680b      	ldr	r3, [r1, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1fc      	bne.n	800690a <ai_platform_network_create+0x23e>
 8006910:	4b14      	ldr	r3, [pc, #80]	; (8006964 <ai_platform_network_create+0x298>)
 8006912:	4911      	ldr	r1, [pc, #68]	; (8006958 <ai_platform_network_create+0x28c>)
 8006914:	4a11      	ldr	r2, [pc, #68]	; (800695c <ai_platform_network_create+0x290>)
 8006916:	6019      	str	r1, [r3, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4293      	cmp	r3, r2
 800691c:	d0ab      	beq.n	8006876 <ai_platform_network_create+0x1aa>
 800691e:	e7fe      	b.n	800691e <ai_platform_network_create+0x252>
 8006920:	4b0b      	ldr	r3, [pc, #44]	; (8006950 <ai_platform_network_create+0x284>)
 8006922:	2201      	movs	r2, #1
 8006924:	4619      	mov	r1, r3
 8006926:	601a      	str	r2, [r3, #0]
 8006928:	680b      	ldr	r3, [r1, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1fc      	bne.n	8006928 <ai_platform_network_create+0x25c>
 800692e:	4b09      	ldr	r3, [pc, #36]	; (8006954 <ai_platform_network_create+0x288>)
 8006930:	4909      	ldr	r1, [pc, #36]	; (8006958 <ai_platform_network_create+0x28c>)
 8006932:	4a0a      	ldr	r2, [pc, #40]	; (800695c <ai_platform_network_create+0x290>)
 8006934:	6019      	str	r1, [r3, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4293      	cmp	r3, r2
 800693a:	d09c      	beq.n	8006876 <ai_platform_network_create+0x1aa>
 800693c:	e7fe      	b.n	800693c <ai_platform_network_create+0x270>
 800693e:	bf00      	nop
 8006940:	e0042000 	.word	0xe0042000
 8006944:	5c001000 	.word	0x5c001000
 8006948:	e0002000 	.word	0xe0002000
 800694c:	a1c00100 	.word	0xa1c00100
 8006950:	40023008 	.word	0x40023008
 8006954:	40023000 	.word	0x40023000
 8006958:	f407a5c2 	.word	0xf407a5c2
 800695c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006960:	58024c08 	.word	0x58024c08
 8006964:	58024c00 	.word	0x58024c00
 8006968:	84048403 	.word	0x84048403

0800696c <ai_platform_network_init>:
 800696c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006970:	2800      	cmp	r0, #0
 8006972:	f000 8092 	beq.w	8006a9a <ai_platform_network_init+0x12e>
 8006976:	4ba8      	ldr	r3, [pc, #672]	; (8006c18 <ai_platform_network_init+0x2ac>)
 8006978:	4604      	mov	r4, r0
 800697a:	6802      	ldr	r2, [r0, #0]
 800697c:	429a      	cmp	r2, r3
 800697e:	f040 808c 	bne.w	8006a9a <ai_platform_network_init+0x12e>
 8006982:	4aa6      	ldr	r2, [pc, #664]	; (8006c1c <ai_platform_network_init+0x2b0>)
 8006984:	460d      	mov	r5, r1
 8006986:	6813      	ldr	r3, [r2, #0]
 8006988:	f023 0301 	bic.w	r3, r3, #1
 800698c:	6013      	str	r3, [r2, #0]
 800698e:	f7fe ffb5 	bl	80058fc <_ai_platform_acquire_crc>
 8006992:	4ba3      	ldr	r3, [pc, #652]	; (8006c20 <ai_platform_network_init+0x2b4>)
 8006994:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800699e:	189a      	adds	r2, r3, r2
 80069a0:	2a01      	cmp	r2, #1
 80069a2:	d96b      	bls.n	8006a7c <ai_platform_network_init+0x110>
 80069a4:	f240 4249 	movw	r2, #1097	; 0x449
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d067      	beq.n	8006a7c <ai_platform_network_init+0x110>
 80069ac:	4a9d      	ldr	r2, [pc, #628]	; (8006c24 <ai_platform_network_init+0x2b8>)
 80069ae:	6813      	ldr	r3, [r2, #0]
 80069b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069b4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80069b8:	f000 80e2 	beq.w	8006b80 <ai_platform_network_init+0x214>
 80069bc:	6813      	ldr	r3, [r2, #0]
 80069be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069c2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80069c6:	f000 80cb 	beq.w	8006b60 <ai_platform_network_init+0x1f4>
 80069ca:	f7fe ff99 	bl	8005900 <_ai_platform_release_crc>
 80069ce:	2d00      	cmp	r5, #0
 80069d0:	f000 80be 	beq.w	8006b50 <ai_platform_network_init+0x1e4>
 80069d4:	4b94      	ldr	r3, [pc, #592]	; (8006c28 <ai_platform_network_init+0x2bc>)
 80069d6:	682a      	ldr	r2, [r5, #0]
 80069d8:	692f      	ldr	r7, [r5, #16]
 80069da:	429a      	cmp	r2, r3
 80069dc:	f000 810c 	beq.w	8006bf8 <ai_platform_network_init+0x28c>
 80069e0:	6aae      	ldr	r6, [r5, #40]	; 0x28
 80069e2:	46a9      	mov	r9, r5
 80069e4:	f105 0118 	add.w	r1, r5, #24
 80069e8:	2e00      	cmp	r6, #0
 80069ea:	f000 80f3 	beq.w	8006bd4 <ai_platform_network_init+0x268>
 80069ee:	2f00      	cmp	r7, #0
 80069f0:	f000 80de 	beq.w	8006bb0 <ai_platform_network_init+0x244>
 80069f4:	f8b4 801e 	ldrh.w	r8, [r4, #30]
 80069f8:	f1b8 0f01 	cmp.w	r8, #1
 80069fc:	f040 80d0 	bne.w	8006ba0 <ai_platform_network_init+0x234>
 8006a00:	f04f 0c00 	mov.w	ip, #0
 8006a04:	460f      	mov	r7, r1
 8006a06:	f8a4 c01c 	strh.w	ip, [r4, #28]
 8006a0a:	f04f 0e00 	mov.w	lr, #0
 8006a0e:	46f2      	mov	sl, lr
 8006a10:	6a25      	ldr	r5, [r4, #32]
 8006a12:	eb09 060e 	add.w	r6, r9, lr
 8006a16:	f10a 0a01 	add.w	sl, sl, #1
 8006a1a:	4475      	add	r5, lr
 8006a1c:	f10e 0e18 	add.w	lr, lr, #24
 8006a20:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a24:	e896 0003 	ldmia.w	r6, {r0, r1}
 8006a28:	e885 0003 	stmia.w	r5, {r0, r1}
 8006a2c:	8be3      	ldrh	r3, [r4, #30]
 8006a2e:	459a      	cmp	sl, r3
 8006a30:	d3ee      	bcc.n	8006a10 <ai_platform_network_init+0xa4>
 8006a32:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006a34:	4598      	cmp	r8, r3
 8006a36:	f040 8083 	bne.w	8006b40 <ai_platform_network_init+0x1d4>
 8006a3a:	f8a4 c024 	strh.w	ip, [r4, #36]	; 0x24
 8006a3e:	f1b8 0f00 	cmp.w	r8, #0
 8006a42:	d013      	beq.n	8006a6c <ai_platform_network_init+0x100>
 8006a44:	f04f 0c00 	mov.w	ip, #0
 8006a48:	46e6      	mov	lr, ip
 8006a4a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006a4c:	eb07 060c 	add.w	r6, r7, ip
 8006a50:	f10e 0e01 	add.w	lr, lr, #1
 8006a54:	4465      	add	r5, ip
 8006a56:	f10c 0c18 	add.w	ip, ip, #24
 8006a5a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006a5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a5e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8006a62:	e885 0003 	stmia.w	r5, {r0, r1}
 8006a66:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006a68:	459e      	cmp	lr, r3
 8006a6a:	d3ee      	bcc.n	8006a4a <ai_platform_network_init+0xde>
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	4620      	mov	r0, r4
 8006a70:	60e3      	str	r3, [r4, #12]
 8006a72:	f003 fe8d 	bl	800a790 <ai_layers_init_all>
 8006a76:	4620      	mov	r0, r4
 8006a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a7c:	4b6b      	ldr	r3, [pc, #428]	; (8006c2c <ai_platform_network_init+0x2c0>)
 8006a7e:	2201      	movs	r2, #1
 8006a80:	4619      	mov	r1, r3
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	680b      	ldr	r3, [r1, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1fc      	bne.n	8006a84 <ai_platform_network_init+0x118>
 8006a8a:	4b69      	ldr	r3, [pc, #420]	; (8006c30 <ai_platform_network_init+0x2c4>)
 8006a8c:	4969      	ldr	r1, [pc, #420]	; (8006c34 <ai_platform_network_init+0x2c8>)
 8006a8e:	4a6a      	ldr	r2, [pc, #424]	; (8006c38 <ai_platform_network_init+0x2cc>)
 8006a90:	6019      	str	r1, [r3, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d098      	beq.n	80069ca <ai_platform_network_init+0x5e>
 8006a98:	e7fe      	b.n	8006a98 <ai_platform_network_init+0x12c>
 8006a9a:	4a60      	ldr	r2, [pc, #384]	; (8006c1c <ai_platform_network_init+0x2b0>)
 8006a9c:	6813      	ldr	r3, [r2, #0]
 8006a9e:	f023 0301 	bic.w	r3, r3, #1
 8006aa2:	6013      	str	r3, [r2, #0]
 8006aa4:	f7fe ff2a 	bl	80058fc <_ai_platform_acquire_crc>
 8006aa8:	4b5d      	ldr	r3, [pc, #372]	; (8006c20 <ai_platform_network_init+0x2b4>)
 8006aaa:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ab4:	185a      	adds	r2, r3, r1
 8006ab6:	2a01      	cmp	r2, #1
 8006ab8:	d915      	bls.n	8006ae6 <ai_platform_network_init+0x17a>
 8006aba:	f240 4249 	movw	r2, #1097	; 0x449
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d011      	beq.n	8006ae6 <ai_platform_network_init+0x17a>
 8006ac2:	4a58      	ldr	r2, [pc, #352]	; (8006c24 <ai_platform_network_init+0x2b8>)
 8006ac4:	6813      	ldr	r3, [r2, #0]
 8006ac6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006aca:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006ace:	d028      	beq.n	8006b22 <ai_platform_network_init+0x1b6>
 8006ad0:	6813      	ldr	r3, [r2, #0]
 8006ad2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ad6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006ada:	d013      	beq.n	8006b04 <ai_platform_network_init+0x198>
 8006adc:	f7fe ff10 	bl	8005900 <_ai_platform_release_crc>
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ae6:	4b51      	ldr	r3, [pc, #324]	; (8006c2c <ai_platform_network_init+0x2c0>)
 8006ae8:	2201      	movs	r2, #1
 8006aea:	4619      	mov	r1, r3
 8006aec:	601a      	str	r2, [r3, #0]
 8006aee:	680b      	ldr	r3, [r1, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1fc      	bne.n	8006aee <ai_platform_network_init+0x182>
 8006af4:	4b4e      	ldr	r3, [pc, #312]	; (8006c30 <ai_platform_network_init+0x2c4>)
 8006af6:	494f      	ldr	r1, [pc, #316]	; (8006c34 <ai_platform_network_init+0x2c8>)
 8006af8:	4a4f      	ldr	r2, [pc, #316]	; (8006c38 <ai_platform_network_init+0x2cc>)
 8006afa:	6019      	str	r1, [r3, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d0ec      	beq.n	8006adc <ai_platform_network_init+0x170>
 8006b02:	e7fe      	b.n	8006b02 <ai_platform_network_init+0x196>
 8006b04:	4b49      	ldr	r3, [pc, #292]	; (8006c2c <ai_platform_network_init+0x2c0>)
 8006b06:	2201      	movs	r2, #1
 8006b08:	4619      	mov	r1, r3
 8006b0a:	601a      	str	r2, [r3, #0]
 8006b0c:	680b      	ldr	r3, [r1, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1fc      	bne.n	8006b0c <ai_platform_network_init+0x1a0>
 8006b12:	4b47      	ldr	r3, [pc, #284]	; (8006c30 <ai_platform_network_init+0x2c4>)
 8006b14:	4947      	ldr	r1, [pc, #284]	; (8006c34 <ai_platform_network_init+0x2c8>)
 8006b16:	4a48      	ldr	r2, [pc, #288]	; (8006c38 <ai_platform_network_init+0x2cc>)
 8006b18:	6019      	str	r1, [r3, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d0dd      	beq.n	8006adc <ai_platform_network_init+0x170>
 8006b20:	e7fe      	b.n	8006b20 <ai_platform_network_init+0x1b4>
 8006b22:	4b46      	ldr	r3, [pc, #280]	; (8006c3c <ai_platform_network_init+0x2d0>)
 8006b24:	2201      	movs	r2, #1
 8006b26:	4619      	mov	r1, r3
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	680b      	ldr	r3, [r1, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1fc      	bne.n	8006b2a <ai_platform_network_init+0x1be>
 8006b30:	4b43      	ldr	r3, [pc, #268]	; (8006c40 <ai_platform_network_init+0x2d4>)
 8006b32:	4940      	ldr	r1, [pc, #256]	; (8006c34 <ai_platform_network_init+0x2c8>)
 8006b34:	4a40      	ldr	r2, [pc, #256]	; (8006c38 <ai_platform_network_init+0x2cc>)
 8006b36:	6019      	str	r1, [r3, #0]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d0ce      	beq.n	8006adc <ai_platform_network_init+0x170>
 8006b3e:	e7fe      	b.n	8006b3e <ai_platform_network_init+0x1d2>
 8006b40:	f104 0010 	add.w	r0, r4, #16
 8006b44:	2213      	movs	r2, #19
 8006b46:	2116      	movs	r1, #22
 8006b48:	f000 fc2e 	bl	80073a8 <core_set_error>
 8006b4c:	2000      	movs	r0, #0
 8006b4e:	e793      	b.n	8006a78 <ai_platform_network_init+0x10c>
 8006b50:	f104 0010 	add.w	r0, r4, #16
 8006b54:	2211      	movs	r2, #17
 8006b56:	2110      	movs	r1, #16
 8006b58:	f000 fc26 	bl	80073a8 <core_set_error>
 8006b5c:	4628      	mov	r0, r5
 8006b5e:	e78b      	b.n	8006a78 <ai_platform_network_init+0x10c>
 8006b60:	4b32      	ldr	r3, [pc, #200]	; (8006c2c <ai_platform_network_init+0x2c0>)
 8006b62:	2201      	movs	r2, #1
 8006b64:	4619      	mov	r1, r3
 8006b66:	601a      	str	r2, [r3, #0]
 8006b68:	680b      	ldr	r3, [r1, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1fc      	bne.n	8006b68 <ai_platform_network_init+0x1fc>
 8006b6e:	4b30      	ldr	r3, [pc, #192]	; (8006c30 <ai_platform_network_init+0x2c4>)
 8006b70:	4930      	ldr	r1, [pc, #192]	; (8006c34 <ai_platform_network_init+0x2c8>)
 8006b72:	4a31      	ldr	r2, [pc, #196]	; (8006c38 <ai_platform_network_init+0x2cc>)
 8006b74:	6019      	str	r1, [r3, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	f43f af26 	beq.w	80069ca <ai_platform_network_init+0x5e>
 8006b7e:	e7fe      	b.n	8006b7e <ai_platform_network_init+0x212>
 8006b80:	4b2e      	ldr	r3, [pc, #184]	; (8006c3c <ai_platform_network_init+0x2d0>)
 8006b82:	2201      	movs	r2, #1
 8006b84:	4619      	mov	r1, r3
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	680b      	ldr	r3, [r1, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1fc      	bne.n	8006b88 <ai_platform_network_init+0x21c>
 8006b8e:	4b2c      	ldr	r3, [pc, #176]	; (8006c40 <ai_platform_network_init+0x2d4>)
 8006b90:	4928      	ldr	r1, [pc, #160]	; (8006c34 <ai_platform_network_init+0x2c8>)
 8006b92:	4a29      	ldr	r2, [pc, #164]	; (8006c38 <ai_platform_network_init+0x2cc>)
 8006b94:	6019      	str	r1, [r3, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	f43f af16 	beq.w	80069ca <ai_platform_network_init+0x5e>
 8006b9e:	e7fe      	b.n	8006b9e <ai_platform_network_init+0x232>
 8006ba0:	f104 0010 	add.w	r0, r4, #16
 8006ba4:	2212      	movs	r2, #18
 8006ba6:	2116      	movs	r1, #22
 8006ba8:	f000 fbfe 	bl	80073a8 <core_set_error>
 8006bac:	2000      	movs	r0, #0
 8006bae:	e763      	b.n	8006a78 <ai_platform_network_init+0x10c>
 8006bb0:	8928      	ldrh	r0, [r5, #8]
 8006bb2:	88ea      	ldrh	r2, [r5, #6]
 8006bb4:	68eb      	ldr	r3, [r5, #12]
 8006bb6:	fb02 f200 	mul.w	r2, r2, r0
 8006bba:	fb03 f302 	mul.w	r3, r3, r2
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f43f af18 	beq.w	80069f4 <ai_platform_network_init+0x88>
 8006bc4:	f104 0010 	add.w	r0, r4, #16
 8006bc8:	2212      	movs	r2, #18
 8006bca:	2110      	movs	r1, #16
 8006bcc:	f000 fbec 	bl	80073a8 <core_set_error>
 8006bd0:	4638      	mov	r0, r7
 8006bd2:	e751      	b.n	8006a78 <ai_platform_network_init+0x10c>
 8006bd4:	8c28      	ldrh	r0, [r5, #32]
 8006bd6:	8bea      	ldrh	r2, [r5, #30]
 8006bd8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006bda:	fb02 f200 	mul.w	r2, r2, r0
 8006bde:	fb03 f302 	mul.w	r3, r3, r2
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f43f af03 	beq.w	80069ee <ai_platform_network_init+0x82>
 8006be8:	f104 0010 	add.w	r0, r4, #16
 8006bec:	2213      	movs	r2, #19
 8006bee:	2110      	movs	r1, #16
 8006bf0:	f000 fbda 	bl	80073a8 <core_set_error>
 8006bf4:	4630      	mov	r0, r6
 8006bf6:	e73f      	b.n	8006a78 <ai_platform_network_init+0x10c>
 8006bf8:	8be1      	ldrh	r1, [r4, #30]
 8006bfa:	88eb      	ldrh	r3, [r5, #6]
 8006bfc:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
 8006c00:	428b      	cmp	r3, r1
 8006c02:	f8b5 800e 	ldrh.w	r8, [r5, #14]
 8006c06:	88aa      	ldrh	r2, [r5, #4]
 8006c08:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8006c0c:	d1c8      	bne.n	8006ba0 <ai_platform_network_init+0x234>
 8006c0e:	83a2      	strh	r2, [r4, #28]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f47f aefa 	bne.w	8006a0a <ai_platform_network_init+0x9e>
 8006c16:	e70c      	b.n	8006a32 <ai_platform_network_init+0xc6>
 8006c18:	a1c00100 	.word	0xa1c00100
 8006c1c:	e0002000 	.word	0xe0002000
 8006c20:	e0042000 	.word	0xe0042000
 8006c24:	5c001000 	.word	0x5c001000
 8006c28:	a1facade 	.word	0xa1facade
 8006c2c:	40023008 	.word	0x40023008
 8006c30:	40023000 	.word	0x40023000
 8006c34:	f407a5c2 	.word	0xf407a5c2
 8006c38:	b5e8b5cd 	.word	0xb5e8b5cd
 8006c3c:	58024c08 	.word	0x58024c08
 8006c40:	58024c00 	.word	0x58024c00

08006c44 <ai_platform_network_post_init>:
 8006c44:	b538      	push	{r3, r4, r5, lr}
 8006c46:	b120      	cbz	r0, 8006c52 <ai_platform_network_post_init+0xe>
 8006c48:	4b65      	ldr	r3, [pc, #404]	; (8006de0 <ai_platform_network_post_init+0x19c>)
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	6802      	ldr	r2, [r0, #0]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d033      	beq.n	8006cba <ai_platform_network_post_init+0x76>
 8006c52:	4a64      	ldr	r2, [pc, #400]	; (8006de4 <ai_platform_network_post_init+0x1a0>)
 8006c54:	6813      	ldr	r3, [r2, #0]
 8006c56:	f023 0301 	bic.w	r3, r3, #1
 8006c5a:	6013      	str	r3, [r2, #0]
 8006c5c:	f7fe fe4e 	bl	80058fc <_ai_platform_acquire_crc>
 8006c60:	4b61      	ldr	r3, [pc, #388]	; (8006de8 <ai_platform_network_post_init+0x1a4>)
 8006c62:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c6c:	185a      	adds	r2, r3, r1
 8006c6e:	2a01      	cmp	r2, #1
 8006c70:	d914      	bls.n	8006c9c <ai_platform_network_post_init+0x58>
 8006c72:	f240 4249 	movw	r2, #1097	; 0x449
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d010      	beq.n	8006c9c <ai_platform_network_post_init+0x58>
 8006c7a:	4a5c      	ldr	r2, [pc, #368]	; (8006dec <ai_platform_network_post_init+0x1a8>)
 8006c7c:	6813      	ldr	r3, [r2, #0]
 8006c7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c82:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006c86:	d067      	beq.n	8006d58 <ai_platform_network_post_init+0x114>
 8006c88:	6813      	ldr	r3, [r2, #0]
 8006c8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c8e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006c92:	d052      	beq.n	8006d3a <ai_platform_network_post_init+0xf6>
 8006c94:	f7fe fe34 	bl	8005900 <_ai_platform_release_crc>
 8006c98:	2000      	movs	r0, #0
 8006c9a:	bd38      	pop	{r3, r4, r5, pc}
 8006c9c:	4b54      	ldr	r3, [pc, #336]	; (8006df0 <ai_platform_network_post_init+0x1ac>)
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	680b      	ldr	r3, [r1, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1fc      	bne.n	8006ca4 <ai_platform_network_post_init+0x60>
 8006caa:	4b52      	ldr	r3, [pc, #328]	; (8006df4 <ai_platform_network_post_init+0x1b0>)
 8006cac:	4952      	ldr	r1, [pc, #328]	; (8006df8 <ai_platform_network_post_init+0x1b4>)
 8006cae:	4a53      	ldr	r2, [pc, #332]	; (8006dfc <ai_platform_network_post_init+0x1b8>)
 8006cb0:	6019      	str	r1, [r3, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d0ed      	beq.n	8006c94 <ai_platform_network_post_init+0x50>
 8006cb8:	e7fe      	b.n	8006cb8 <ai_platform_network_post_init+0x74>
 8006cba:	4a4a      	ldr	r2, [pc, #296]	; (8006de4 <ai_platform_network_post_init+0x1a0>)
 8006cbc:	6813      	ldr	r3, [r2, #0]
 8006cbe:	f023 0301 	bic.w	r3, r3, #1
 8006cc2:	6013      	str	r3, [r2, #0]
 8006cc4:	f7fe fe1a 	bl	80058fc <_ai_platform_acquire_crc>
 8006cc8:	4b47      	ldr	r3, [pc, #284]	; (8006de8 <ai_platform_network_post_init+0x1a4>)
 8006cca:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cd4:	189a      	adds	r2, r3, r2
 8006cd6:	2a01      	cmp	r2, #1
 8006cd8:	d973      	bls.n	8006dc2 <ai_platform_network_post_init+0x17e>
 8006cda:	f240 4249 	movw	r2, #1097	; 0x449
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d06f      	beq.n	8006dc2 <ai_platform_network_post_init+0x17e>
 8006ce2:	4a42      	ldr	r2, [pc, #264]	; (8006dec <ai_platform_network_post_init+0x1a8>)
 8006ce4:	6813      	ldr	r3, [r2, #0]
 8006ce6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cea:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006cee:	d059      	beq.n	8006da4 <ai_platform_network_post_init+0x160>
 8006cf0:	6813      	ldr	r3, [r2, #0]
 8006cf2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cf6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006cfa:	d044      	beq.n	8006d86 <ai_platform_network_post_init+0x142>
 8006cfc:	f7fe fe00 	bl	8005900 <_ai_platform_release_crc>
 8006d00:	68e3      	ldr	r3, [r4, #12]
 8006d02:	f013 0502 	ands.w	r5, r3, #2
 8006d06:	d036      	beq.n	8006d76 <ai_platform_network_post_init+0x132>
 8006d08:	4620      	mov	r0, r4
 8006d0a:	f003 fd55 	bl	800a7b8 <ai_layers_post_init_all>
 8006d0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006d10:	b18b      	cbz	r3, 8006d36 <ai_platform_network_post_init+0xf2>
 8006d12:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8006d14:	b90d      	cbnz	r5, 8006d1a <ai_platform_network_post_init+0xd6>
 8006d16:	e00e      	b.n	8006d36 <ai_platform_network_post_init+0xf2>
 8006d18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006d1a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006d1c:	4629      	mov	r1, r5
 8006d1e:	2000      	movs	r0, #0
 8006d20:	4798      	blx	r3
 8006d22:	692a      	ldr	r2, [r5, #16]
 8006d24:	1b53      	subs	r3, r2, r5
 8006d26:	4615      	mov	r5, r2
 8006d28:	bf18      	it	ne
 8006d2a:	2301      	movne	r3, #1
 8006d2c:	2a00      	cmp	r2, #0
 8006d2e:	bf08      	it	eq
 8006d30:	2300      	moveq	r3, #0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1f0      	bne.n	8006d18 <ai_platform_network_post_init+0xd4>
 8006d36:	2001      	movs	r0, #1
 8006d38:	bd38      	pop	{r3, r4, r5, pc}
 8006d3a:	4b2d      	ldr	r3, [pc, #180]	; (8006df0 <ai_platform_network_post_init+0x1ac>)
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	4619      	mov	r1, r3
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	680b      	ldr	r3, [r1, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1fc      	bne.n	8006d42 <ai_platform_network_post_init+0xfe>
 8006d48:	4b2a      	ldr	r3, [pc, #168]	; (8006df4 <ai_platform_network_post_init+0x1b0>)
 8006d4a:	492b      	ldr	r1, [pc, #172]	; (8006df8 <ai_platform_network_post_init+0x1b4>)
 8006d4c:	4a2b      	ldr	r2, [pc, #172]	; (8006dfc <ai_platform_network_post_init+0x1b8>)
 8006d4e:	6019      	str	r1, [r3, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d09e      	beq.n	8006c94 <ai_platform_network_post_init+0x50>
 8006d56:	e7fe      	b.n	8006d56 <ai_platform_network_post_init+0x112>
 8006d58:	4b29      	ldr	r3, [pc, #164]	; (8006e00 <ai_platform_network_post_init+0x1bc>)
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	601a      	str	r2, [r3, #0]
 8006d60:	680b      	ldr	r3, [r1, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1fc      	bne.n	8006d60 <ai_platform_network_post_init+0x11c>
 8006d66:	4b27      	ldr	r3, [pc, #156]	; (8006e04 <ai_platform_network_post_init+0x1c0>)
 8006d68:	4923      	ldr	r1, [pc, #140]	; (8006df8 <ai_platform_network_post_init+0x1b4>)
 8006d6a:	4a24      	ldr	r2, [pc, #144]	; (8006dfc <ai_platform_network_post_init+0x1b8>)
 8006d6c:	6019      	str	r1, [r3, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d08f      	beq.n	8006c94 <ai_platform_network_post_init+0x50>
 8006d74:	e7fe      	b.n	8006d74 <ai_platform_network_post_init+0x130>
 8006d76:	f104 0010 	add.w	r0, r4, #16
 8006d7a:	2210      	movs	r2, #16
 8006d7c:	2111      	movs	r1, #17
 8006d7e:	f000 fb13 	bl	80073a8 <core_set_error>
 8006d82:	4628      	mov	r0, r5
 8006d84:	bd38      	pop	{r3, r4, r5, pc}
 8006d86:	4b1a      	ldr	r3, [pc, #104]	; (8006df0 <ai_platform_network_post_init+0x1ac>)
 8006d88:	2201      	movs	r2, #1
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	680b      	ldr	r3, [r1, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1fc      	bne.n	8006d8e <ai_platform_network_post_init+0x14a>
 8006d94:	4b17      	ldr	r3, [pc, #92]	; (8006df4 <ai_platform_network_post_init+0x1b0>)
 8006d96:	4918      	ldr	r1, [pc, #96]	; (8006df8 <ai_platform_network_post_init+0x1b4>)
 8006d98:	4a18      	ldr	r2, [pc, #96]	; (8006dfc <ai_platform_network_post_init+0x1b8>)
 8006d9a:	6019      	str	r1, [r3, #0]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d0ac      	beq.n	8006cfc <ai_platform_network_post_init+0xb8>
 8006da2:	e7fe      	b.n	8006da2 <ai_platform_network_post_init+0x15e>
 8006da4:	4b16      	ldr	r3, [pc, #88]	; (8006e00 <ai_platform_network_post_init+0x1bc>)
 8006da6:	2201      	movs	r2, #1
 8006da8:	4619      	mov	r1, r3
 8006daa:	601a      	str	r2, [r3, #0]
 8006dac:	680b      	ldr	r3, [r1, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1fc      	bne.n	8006dac <ai_platform_network_post_init+0x168>
 8006db2:	4b14      	ldr	r3, [pc, #80]	; (8006e04 <ai_platform_network_post_init+0x1c0>)
 8006db4:	4910      	ldr	r1, [pc, #64]	; (8006df8 <ai_platform_network_post_init+0x1b4>)
 8006db6:	4a11      	ldr	r2, [pc, #68]	; (8006dfc <ai_platform_network_post_init+0x1b8>)
 8006db8:	6019      	str	r1, [r3, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d09d      	beq.n	8006cfc <ai_platform_network_post_init+0xb8>
 8006dc0:	e7fe      	b.n	8006dc0 <ai_platform_network_post_init+0x17c>
 8006dc2:	4b0b      	ldr	r3, [pc, #44]	; (8006df0 <ai_platform_network_post_init+0x1ac>)
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	601a      	str	r2, [r3, #0]
 8006dca:	680b      	ldr	r3, [r1, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1fc      	bne.n	8006dca <ai_platform_network_post_init+0x186>
 8006dd0:	4b08      	ldr	r3, [pc, #32]	; (8006df4 <ai_platform_network_post_init+0x1b0>)
 8006dd2:	4909      	ldr	r1, [pc, #36]	; (8006df8 <ai_platform_network_post_init+0x1b4>)
 8006dd4:	4a09      	ldr	r2, [pc, #36]	; (8006dfc <ai_platform_network_post_init+0x1b8>)
 8006dd6:	6019      	str	r1, [r3, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d08e      	beq.n	8006cfc <ai_platform_network_post_init+0xb8>
 8006dde:	e7fe      	b.n	8006dde <ai_platform_network_post_init+0x19a>
 8006de0:	a1c00100 	.word	0xa1c00100
 8006de4:	e0002000 	.word	0xe0002000
 8006de8:	e0042000 	.word	0xe0042000
 8006dec:	5c001000 	.word	0x5c001000
 8006df0:	40023008 	.word	0x40023008
 8006df4:	40023000 	.word	0x40023000
 8006df8:	f407a5c2 	.word	0xf407a5c2
 8006dfc:	b5e8b5cd 	.word	0xb5e8b5cd
 8006e00:	58024c08 	.word	0x58024c08
 8006e04:	58024c00 	.word	0x58024c00

08006e08 <ai_platform_network_process>:
 8006e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e0c:	460d      	mov	r5, r1
 8006e0e:	b083      	sub	sp, #12
 8006e10:	4617      	mov	r7, r2
 8006e12:	4604      	mov	r4, r0
 8006e14:	b120      	cbz	r0, 8006e20 <ai_platform_network_process+0x18>
 8006e16:	4b88      	ldr	r3, [pc, #544]	; (8007038 <ai_platform_network_process+0x230>)
 8006e18:	6802      	ldr	r2, [r0, #0]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	bf18      	it	ne
 8006e1e:	2400      	movne	r4, #0
 8006e20:	4a86      	ldr	r2, [pc, #536]	; (800703c <ai_platform_network_process+0x234>)
 8006e22:	6813      	ldr	r3, [r2, #0]
 8006e24:	f023 0301 	bic.w	r3, r3, #1
 8006e28:	6013      	str	r3, [r2, #0]
 8006e2a:	f7fe fd67 	bl	80058fc <_ai_platform_acquire_crc>
 8006e2e:	4b84      	ldr	r3, [pc, #528]	; (8007040 <ai_platform_network_process+0x238>)
 8006e30:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e3a:	185a      	adds	r2, r3, r1
 8006e3c:	2a01      	cmp	r2, #1
 8006e3e:	f240 80c2 	bls.w	8006fc6 <ai_platform_network_process+0x1be>
 8006e42:	f240 4249 	movw	r2, #1097	; 0x449
 8006e46:	4293      	cmp	r3, r2
 8006e48:	f000 80bd 	beq.w	8006fc6 <ai_platform_network_process+0x1be>
 8006e4c:	4a7d      	ldr	r2, [pc, #500]	; (8007044 <ai_platform_network_process+0x23c>)
 8006e4e:	6813      	ldr	r3, [r2, #0]
 8006e50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e54:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006e58:	f000 80d5 	beq.w	8007006 <ai_platform_network_process+0x1fe>
 8006e5c:	6813      	ldr	r3, [r2, #0]
 8006e5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e62:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006e66:	f000 827f 	beq.w	8007368 <ai_platform_network_process+0x560>
 8006e6a:	f7fe fd49 	bl	8005900 <_ai_platform_release_crc>
 8006e6e:	2c00      	cmp	r4, #0
 8006e70:	f000 8277 	beq.w	8007362 <ai_platform_network_process+0x55a>
 8006e74:	68e2      	ldr	r2, [r4, #12]
 8006e76:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8006e78:	f002 0203 	and.w	r2, r2, #3
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 80b2 	beq.w	8006fe6 <ai_platform_network_process+0x1de>
 8006e82:	2100      	movs	r1, #0
 8006e84:	2a03      	cmp	r2, #3
 8006e86:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8006e8a:	6161      	str	r1, [r4, #20]
 8006e8c:	f040 8263 	bne.w	8007356 <ai_platform_network_process+0x54e>
 8006e90:	2d00      	cmp	r5, #0
 8006e92:	f000 80ac 	beq.w	8006fee <ai_platform_network_process+0x1e6>
 8006e96:	faba f28a 	clz	r2, sl
 8006e9a:	0952      	lsrs	r2, r2, #5
 8006e9c:	2a00      	cmp	r2, #0
 8006e9e:	f040 80a6 	bne.w	8006fee <ai_platform_network_process+0x1e6>
 8006ea2:	f8ba 1000 	ldrh.w	r1, [sl]
 8006ea6:	2900      	cmp	r1, #0
 8006ea8:	f000 80a1 	beq.w	8006fee <ai_platform_network_process+0x1e6>
 8006eac:	88a8      	ldrh	r0, [r5, #4]
 8006eae:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006eb2:	9001      	str	r0, [sp, #4]
 8006eb4:	2900      	cmp	r1, #0
 8006eb6:	f000 80d4 	beq.w	8007062 <ai_platform_network_process+0x25a>
 8006eba:	680e      	ldr	r6, [r1, #0]
 8006ebc:	2e00      	cmp	r6, #0
 8006ebe:	f000 80d0 	beq.w	8007062 <ai_platform_network_process+0x25a>
 8006ec2:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006ec6:	4690      	mov	r8, r2
 8006ec8:	f8d3 9000 	ldr.w	r9, [r3]
 8006ecc:	f1b9 0f00 	cmp.w	r9, #0
 8006ed0:	d162      	bne.n	8006f98 <ai_platform_network_process+0x190>
 8006ed2:	e08c      	b.n	8006fee <ai_platform_network_process+0x1e6>
 8006ed4:	68f3      	ldr	r3, [r6, #12]
 8006ed6:	68da      	ldr	r2, [r3, #12]
 8006ed8:	455a      	cmp	r2, fp
 8006eda:	d16b      	bne.n	8006fb4 <ai_platform_network_process+0x1ac>
 8006edc:	689a      	ldr	r2, [r3, #8]
 8006ede:	4572      	cmp	r2, lr
 8006ee0:	d168      	bne.n	8006fb4 <ai_platform_network_process+0x1ac>
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	459c      	cmp	ip, r3
 8006ee6:	d165      	bne.n	8006fb4 <ai_platform_network_process+0x1ac>
 8006ee8:	6800      	ldr	r0, [r0, #0]
 8006eea:	f003 fd1f 	bl	800a92c <ai_array_get_byte_size>
 8006eee:	68f2      	ldr	r2, [r6, #12]
 8006ef0:	6973      	ldr	r3, [r6, #20]
 8006ef2:	68d2      	ldr	r2, [r2, #12]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	fb03 f302 	mul.w	r3, r3, r2
 8006efa:	4298      	cmp	r0, r3
 8006efc:	d35a      	bcc.n	8006fb4 <ai_platform_network_process+0x1ac>
 8006efe:	69b3      	ldr	r3, [r6, #24]
 8006f00:	6818      	ldr	r0, [r3, #0]
 8006f02:	f003 fcbb 	bl	800a87c <ai_array_to_buffer_fmt>
 8006f06:	682b      	ldr	r3, [r5, #0]
 8006f08:	4043      	eors	r3, r0
 8006f0a:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8006f0e:	f040 8219 	bne.w	8007344 <ai_platform_network_process+0x53c>
 8006f12:	692b      	ldr	r3, [r5, #16]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f000 820d 	beq.w	8007334 <ai_platform_network_process+0x52c>
 8006f1a:	88ab      	ldrh	r3, [r5, #4]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 8082 	beq.w	8007026 <ai_platform_network_process+0x21e>
 8006f22:	9a01      	ldr	r2, [sp, #4]
 8006f24:	68f1      	ldr	r1, [r6, #12]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	68c9      	ldr	r1, [r1, #12]
 8006f2a:	bf38      	it	cc
 8006f2c:	461a      	movcc	r2, r3
 8006f2e:	9201      	str	r2, [sp, #4]
 8006f30:	6972      	ldr	r2, [r6, #20]
 8006f32:	68d3      	ldr	r3, [r2, #12]
 8006f34:	fb03 f301 	mul.w	r3, r3, r1
 8006f38:	f8c9 3008 	str.w	r3, [r9, #8]
 8006f3c:	88aa      	ldrh	r2, [r5, #4]
 8006f3e:	fb03 f302 	mul.w	r3, r3, r2
 8006f42:	f8c9 300c 	str.w	r3, [r9, #12]
 8006f46:	6929      	ldr	r1, [r5, #16]
 8006f48:	f8c9 1004 	str.w	r1, [r9, #4]
 8006f4c:	692a      	ldr	r2, [r5, #16]
 8006f4e:	4413      	add	r3, r2
 8006f50:	f8c9 3000 	str.w	r3, [r9]
 8006f54:	69b0      	ldr	r0, [r6, #24]
 8006f56:	6803      	ldr	r3, [r0, #0]
 8006f58:	009a      	lsls	r2, r3, #2
 8006f5a:	d408      	bmi.n	8006f6e <ai_platform_network_process+0x166>
 8006f5c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006f60:	1a9b      	subs	r3, r3, r2
 8006f62:	4419      	add	r1, r3
 8006f64:	6081      	str	r1, [r0, #8]
 8006f66:	69b3      	ldr	r3, [r6, #24]
 8006f68:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8006f6c:	60da      	str	r2, [r3, #12]
 8006f6e:	f108 0801 	add.w	r8, r8, #1
 8006f72:	f8ba 3000 	ldrh.w	r3, [sl]
 8006f76:	4598      	cmp	r8, r3
 8006f78:	d272      	bcs.n	8007060 <ai_platform_network_process+0x258>
 8006f7a:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d06e      	beq.n	8007060 <ai_platform_network_process+0x258>
 8006f82:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8006f86:	2e00      	cmp	r6, #0
 8006f88:	d06a      	beq.n	8007060 <ai_platform_network_process+0x258>
 8006f8a:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006f8e:	3518      	adds	r5, #24
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	eb13 1908 	adds.w	r9, r3, r8, lsl #4
 8006f96:	d02a      	beq.n	8006fee <ai_platform_network_process+0x1e6>
 8006f98:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8006f9c:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 8006fa0:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8006fa4:	fb0b f30e 	mul.w	r3, fp, lr
 8006fa8:	69b0      	ldr	r0, [r6, #24]
 8006faa:	fb0c f303 	mul.w	r3, ip, r3
 8006fae:	6841      	ldr	r1, [r0, #4]
 8006fb0:	4299      	cmp	r1, r3
 8006fb2:	d28f      	bcs.n	8006ed4 <ai_platform_network_process+0xcc>
 8006fb4:	f104 0010 	add.w	r0, r4, #16
 8006fb8:	2218      	movs	r2, #24
 8006fba:	2112      	movs	r1, #18
 8006fbc:	f04f 0b00 	mov.w	fp, #0
 8006fc0:	f000 f9f2 	bl	80073a8 <core_set_error>
 8006fc4:	e01b      	b.n	8006ffe <ai_platform_network_process+0x1f6>
 8006fc6:	4b20      	ldr	r3, [pc, #128]	; (8007048 <ai_platform_network_process+0x240>)
 8006fc8:	2201      	movs	r2, #1
 8006fca:	4619      	mov	r1, r3
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	680b      	ldr	r3, [r1, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1fc      	bne.n	8006fce <ai_platform_network_process+0x1c6>
 8006fd4:	4b1d      	ldr	r3, [pc, #116]	; (800704c <ai_platform_network_process+0x244>)
 8006fd6:	491e      	ldr	r1, [pc, #120]	; (8007050 <ai_platform_network_process+0x248>)
 8006fd8:	4a1e      	ldr	r2, [pc, #120]	; (8007054 <ai_platform_network_process+0x24c>)
 8006fda:	6019      	str	r1, [r3, #0]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	f43f af43 	beq.w	8006e6a <ai_platform_network_process+0x62>
 8006fe4:	e7fe      	b.n	8006fe4 <ai_platform_network_process+0x1dc>
 8006fe6:	2a03      	cmp	r2, #3
 8006fe8:	6163      	str	r3, [r4, #20]
 8006fea:	f040 81b4 	bne.w	8007356 <ai_platform_network_process+0x54e>
 8006fee:	f04f 0b00 	mov.w	fp, #0
 8006ff2:	f104 0010 	add.w	r0, r4, #16
 8006ff6:	2217      	movs	r2, #23
 8006ff8:	2112      	movs	r1, #18
 8006ffa:	f000 f9d5 	bl	80073a8 <core_set_error>
 8006ffe:	4658      	mov	r0, fp
 8007000:	b003      	add	sp, #12
 8007002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007006:	4b14      	ldr	r3, [pc, #80]	; (8007058 <ai_platform_network_process+0x250>)
 8007008:	2201      	movs	r2, #1
 800700a:	4619      	mov	r1, r3
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	680b      	ldr	r3, [r1, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1fc      	bne.n	800700e <ai_platform_network_process+0x206>
 8007014:	4b11      	ldr	r3, [pc, #68]	; (800705c <ai_platform_network_process+0x254>)
 8007016:	490e      	ldr	r1, [pc, #56]	; (8007050 <ai_platform_network_process+0x248>)
 8007018:	4a0e      	ldr	r2, [pc, #56]	; (8007054 <ai_platform_network_process+0x24c>)
 800701a:	6019      	str	r1, [r3, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4293      	cmp	r3, r2
 8007020:	f43f af23 	beq.w	8006e6a <ai_platform_network_process+0x62>
 8007024:	e7fe      	b.n	8007024 <ai_platform_network_process+0x21c>
 8007026:	f104 0010 	add.w	r0, r4, #16
 800702a:	2221      	movs	r2, #33	; 0x21
 800702c:	2112      	movs	r1, #18
 800702e:	469b      	mov	fp, r3
 8007030:	f000 f9ba 	bl	80073a8 <core_set_error>
 8007034:	e7e3      	b.n	8006ffe <ai_platform_network_process+0x1f6>
 8007036:	bf00      	nop
 8007038:	a1c00100 	.word	0xa1c00100
 800703c:	e0002000 	.word	0xe0002000
 8007040:	e0042000 	.word	0xe0042000
 8007044:	5c001000 	.word	0x5c001000
 8007048:	40023008 	.word	0x40023008
 800704c:	40023000 	.word	0x40023000
 8007050:	f407a5c2 	.word	0xf407a5c2
 8007054:	b5e8b5cd 	.word	0xb5e8b5cd
 8007058:	58024c08 	.word	0x58024c08
 800705c:	58024c00 	.word	0x58024c00
 8007060:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8007062:	2f00      	cmp	r7, #0
 8007064:	f000 80aa 	beq.w	80071bc <ai_platform_network_process+0x3b4>
 8007068:	2b01      	cmp	r3, #1
 800706a:	f240 809c 	bls.w	80071a6 <ai_platform_network_process+0x39e>
 800706e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8007072:	f11a 0f0c 	cmn.w	sl, #12
 8007076:	f000 8096 	beq.w	80071a6 <ai_platform_network_process+0x39e>
 800707a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800707e:	2b00      	cmp	r3, #0
 8007080:	f000 8091 	beq.w	80071a6 <ai_platform_network_process+0x39e>
 8007084:	463d      	mov	r5, r7
 8007086:	f04f 0900 	mov.w	r9, #0
 800708a:	9400      	str	r4, [sp, #0]
 800708c:	4599      	cmp	r9, r3
 800708e:	f080 8093 	bcs.w	80071b8 <ai_platform_network_process+0x3b0>
 8007092:	f8da 3010 	ldr.w	r3, [sl, #16]
 8007096:	2b00      	cmp	r3, #0
 8007098:	f000 808e 	beq.w	80071b8 <ai_platform_network_process+0x3b0>
 800709c:	f853 6029 	ldr.w	r6, [r3, r9, lsl #2]
 80070a0:	2e00      	cmp	r6, #0
 80070a2:	f000 8089 	beq.w	80071b8 <ai_platform_network_process+0x3b0>
 80070a6:	f8da 3014 	ldr.w	r3, [sl, #20]
 80070aa:	ea4f 1409 	mov.w	r4, r9, lsl #4
 80070ae:	f8d3 8000 	ldr.w	r8, [r3]
 80070b2:	eb18 0704 	adds.w	r7, r8, r4
 80070b6:	f000 8134 	beq.w	8007322 <ai_platform_network_process+0x51a>
 80070ba:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 80070be:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 80070c2:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 80070c6:	fb0b f30e 	mul.w	r3, fp, lr
 80070ca:	69b0      	ldr	r0, [r6, #24]
 80070cc:	fb0c f303 	mul.w	r3, ip, r3
 80070d0:	6841      	ldr	r1, [r0, #4]
 80070d2:	4299      	cmp	r1, r3
 80070d4:	d366      	bcc.n	80071a4 <ai_platform_network_process+0x39c>
 80070d6:	68f3      	ldr	r3, [r6, #12]
 80070d8:	68da      	ldr	r2, [r3, #12]
 80070da:	455a      	cmp	r2, fp
 80070dc:	d162      	bne.n	80071a4 <ai_platform_network_process+0x39c>
 80070de:	689a      	ldr	r2, [r3, #8]
 80070e0:	4572      	cmp	r2, lr
 80070e2:	d15f      	bne.n	80071a4 <ai_platform_network_process+0x39c>
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	459c      	cmp	ip, r3
 80070e8:	d15c      	bne.n	80071a4 <ai_platform_network_process+0x39c>
 80070ea:	6800      	ldr	r0, [r0, #0]
 80070ec:	f003 fc1e 	bl	800a92c <ai_array_get_byte_size>
 80070f0:	68f2      	ldr	r2, [r6, #12]
 80070f2:	6973      	ldr	r3, [r6, #20]
 80070f4:	68d2      	ldr	r2, [r2, #12]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	fb03 f302 	mul.w	r3, r3, r2
 80070fc:	4298      	cmp	r0, r3
 80070fe:	d351      	bcc.n	80071a4 <ai_platform_network_process+0x39c>
 8007100:	69b3      	ldr	r3, [r6, #24]
 8007102:	6818      	ldr	r0, [r3, #0]
 8007104:	f003 fbba 	bl	800a87c <ai_array_to_buffer_fmt>
 8007108:	682b      	ldr	r3, [r5, #0]
 800710a:	4043      	eors	r3, r0
 800710c:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8007110:	d13e      	bne.n	8007190 <ai_platform_network_process+0x388>
 8007112:	692b      	ldr	r3, [r5, #16]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d032      	beq.n	800717e <ai_platform_network_process+0x376>
 8007118:	88ab      	ldrh	r3, [r5, #4]
 800711a:	b33b      	cbz	r3, 800716c <ai_platform_network_process+0x364>
 800711c:	9a01      	ldr	r2, [sp, #4]
 800711e:	68f1      	ldr	r1, [r6, #12]
 8007120:	429a      	cmp	r2, r3
 8007122:	68c9      	ldr	r1, [r1, #12]
 8007124:	bf38      	it	cc
 8007126:	461a      	movcc	r2, r3
 8007128:	9201      	str	r2, [sp, #4]
 800712a:	6972      	ldr	r2, [r6, #20]
 800712c:	68d3      	ldr	r3, [r2, #12]
 800712e:	fb03 f301 	mul.w	r3, r3, r1
 8007132:	60bb      	str	r3, [r7, #8]
 8007134:	88aa      	ldrh	r2, [r5, #4]
 8007136:	fb03 f302 	mul.w	r3, r3, r2
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	6929      	ldr	r1, [r5, #16]
 800713e:	6079      	str	r1, [r7, #4]
 8007140:	692a      	ldr	r2, [r5, #16]
 8007142:	4413      	add	r3, r2
 8007144:	f848 3004 	str.w	r3, [r8, r4]
 8007148:	69b0      	ldr	r0, [r6, #24]
 800714a:	6803      	ldr	r3, [r0, #0]
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	d407      	bmi.n	8007160 <ai_platform_network_process+0x358>
 8007150:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007154:	1a9b      	subs	r3, r3, r2
 8007156:	4419      	add	r1, r3
 8007158:	6081      	str	r1, [r0, #8]
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	69b3      	ldr	r3, [r6, #24]
 800715e:	60da      	str	r2, [r3, #12]
 8007160:	f109 0901 	add.w	r9, r9, #1
 8007164:	3518      	adds	r5, #24
 8007166:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800716a:	e78f      	b.n	800708c <ai_platform_network_process+0x284>
 800716c:	9c00      	ldr	r4, [sp, #0]
 800716e:	2221      	movs	r2, #33	; 0x21
 8007170:	2113      	movs	r1, #19
 8007172:	469b      	mov	fp, r3
 8007174:	f104 0010 	add.w	r0, r4, #16
 8007178:	f000 f916 	bl	80073a8 <core_set_error>
 800717c:	e73f      	b.n	8006ffe <ai_platform_network_process+0x1f6>
 800717e:	9c00      	ldr	r4, [sp, #0]
 8007180:	2217      	movs	r2, #23
 8007182:	2113      	movs	r1, #19
 8007184:	469b      	mov	fp, r3
 8007186:	f104 0010 	add.w	r0, r4, #16
 800718a:	f000 f90d 	bl	80073a8 <core_set_error>
 800718e:	e736      	b.n	8006ffe <ai_platform_network_process+0x1f6>
 8007190:	9c00      	ldr	r4, [sp, #0]
 8007192:	2219      	movs	r2, #25
 8007194:	2113      	movs	r1, #19
 8007196:	f04f 0b00 	mov.w	fp, #0
 800719a:	f104 0010 	add.w	r0, r4, #16
 800719e:	f000 f903 	bl	80073a8 <core_set_error>
 80071a2:	e72c      	b.n	8006ffe <ai_platform_network_process+0x1f6>
 80071a4:	9c00      	ldr	r4, [sp, #0]
 80071a6:	f104 0010 	add.w	r0, r4, #16
 80071aa:	2218      	movs	r2, #24
 80071ac:	2113      	movs	r1, #19
 80071ae:	f04f 0b00 	mov.w	fp, #0
 80071b2:	f000 f8f9 	bl	80073a8 <core_set_error>
 80071b6:	e722      	b.n	8006ffe <ai_platform_network_process+0x1f6>
 80071b8:	9c00      	ldr	r4, [sp, #0]
 80071ba:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80071bc:	9a01      	ldr	r2, [sp, #4]
 80071be:	82a2      	strh	r2, [r4, #20]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 80a9 	beq.w	8007318 <ai_platform_network_process+0x510>
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80071ca:	f240 80a8 	bls.w	800731e <ai_platform_network_process+0x516>
 80071ce:	f105 060c 	add.w	r6, r5, #12
 80071d2:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 80071d6:	8aa3      	ldrh	r3, [r4, #20]
 80071d8:	455b      	cmp	r3, fp
 80071da:	f67f af10 	bls.w	8006ffe <ai_platform_network_process+0x1f6>
 80071de:	9400      	str	r4, [sp, #0]
 80071e0:	2d00      	cmp	r5, #0
 80071e2:	d037      	beq.n	8007254 <ai_platform_network_process+0x44c>
 80071e4:	882b      	ldrh	r3, [r5, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d034      	beq.n	8007254 <ai_platform_network_process+0x44c>
 80071ea:	686b      	ldr	r3, [r5, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d031      	beq.n	8007254 <ai_platform_network_process+0x44c>
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d02e      	beq.n	8007254 <ai_platform_network_process+0x44c>
 80071f6:	f04f 0800 	mov.w	r8, #0
 80071fa:	e01a      	b.n	8007232 <ai_platform_network_process+0x42a>
 80071fc:	68d4      	ldr	r4, [r2, #12]
 80071fe:	1b00      	subs	r0, r0, r4
 8007200:	4401      	add	r1, r0
 8007202:	6091      	str	r1, [r2, #8]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	60da      	str	r2, [r3, #12]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f108 0801 	add.w	r8, r8, #1
 8007210:	68b9      	ldr	r1, [r7, #8]
 8007212:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007216:	440b      	add	r3, r1
 8007218:	4293      	cmp	r3, r2
 800721a:	d301      	bcc.n	8007220 <ai_platform_network_process+0x418>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	607b      	str	r3, [r7, #4]
 8007222:	882b      	ldrh	r3, [r5, #0]
 8007224:	4598      	cmp	r8, r3
 8007226:	d215      	bcs.n	8007254 <ai_platform_network_process+0x44c>
 8007228:	686b      	ldr	r3, [r5, #4]
 800722a:	b19b      	cbz	r3, 8007254 <ai_platform_network_process+0x44c>
 800722c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8007230:	b183      	cbz	r3, 8007254 <ai_platform_network_process+0x44c>
 8007232:	68a9      	ldr	r1, [r5, #8]
 8007234:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8007238:	699a      	ldr	r2, [r3, #24]
 800723a:	f8d1 a000 	ldr.w	sl, [r1]
 800723e:	6814      	ldr	r4, [r2, #0]
 8007240:	eb0a 0709 	add.w	r7, sl, r9
 8007244:	6890      	ldr	r0, [r2, #8]
 8007246:	00a4      	lsls	r4, r4, #2
 8007248:	6879      	ldr	r1, [r7, #4]
 800724a:	d5d7      	bpl.n	80071fc <ai_platform_network_process+0x3f4>
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	f003 fbbf 	bl	800a9d0 <memcpy>
 8007252:	e7da      	b.n	800720a <ai_platform_network_process+0x402>
 8007254:	9800      	ldr	r0, [sp, #0]
 8007256:	f003 fac5 	bl	800a7e4 <ai_layers_forward_all>
 800725a:	2e00      	cmp	r6, #0
 800725c:	d04a      	beq.n	80072f4 <ai_platform_network_process+0x4ec>
 800725e:	8833      	ldrh	r3, [r6, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d047      	beq.n	80072f4 <ai_platform_network_process+0x4ec>
 8007264:	6873      	ldr	r3, [r6, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d044      	beq.n	80072f4 <ai_platform_network_process+0x4ec>
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d041      	beq.n	80072f4 <ai_platform_network_process+0x4ec>
 8007270:	f04f 0800 	mov.w	r8, #0
 8007274:	e019      	b.n	80072aa <ai_platform_network_process+0x4a2>
 8007276:	f85a 2009 	ldr.w	r2, [sl, r9]
 800727a:	4291      	cmp	r1, r2
 800727c:	d301      	bcc.n	8007282 <ai_platform_network_process+0x47a>
 800727e:	68f9      	ldr	r1, [r7, #12]
 8007280:	1a51      	subs	r1, r2, r1
 8007282:	6079      	str	r1, [r7, #4]
 8007284:	f108 0801 	add.w	r8, r8, #1
 8007288:	6998      	ldr	r0, [r3, #24]
 800728a:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
 800728e:	1b12      	subs	r2, r2, r4
 8007290:	440a      	add	r2, r1
 8007292:	6082      	str	r2, [r0, #8]
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	60da      	str	r2, [r3, #12]
 800729a:	8833      	ldrh	r3, [r6, #0]
 800729c:	4598      	cmp	r8, r3
 800729e:	d229      	bcs.n	80072f4 <ai_platform_network_process+0x4ec>
 80072a0:	6873      	ldr	r3, [r6, #4]
 80072a2:	b33b      	cbz	r3, 80072f4 <ai_platform_network_process+0x4ec>
 80072a4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80072a8:	b323      	cbz	r3, 80072f4 <ai_platform_network_process+0x4ec>
 80072aa:	68b2      	ldr	r2, [r6, #8]
 80072ac:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80072b0:	f8d3 e018 	ldr.w	lr, [r3, #24]
 80072b4:	f8d2 a000 	ldr.w	sl, [r2]
 80072b8:	f8de 1000 	ldr.w	r1, [lr]
 80072bc:	eb0a 0709 	add.w	r7, sl, r9
 80072c0:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 80072c4:	e9d7 0201 	ldrd	r0, r2, [r7, #4]
 80072c8:	eb00 0102 	add.w	r1, r0, r2
 80072cc:	d0d3      	beq.n	8007276 <ai_platform_network_process+0x46e>
 80072ce:	f8de 1008 	ldr.w	r1, [lr, #8]
 80072d2:	f003 fb7d 	bl	800a9d0 <memcpy>
 80072d6:	f85a 2009 	ldr.w	r2, [sl, r9]
 80072da:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 80072de:	440b      	add	r3, r1
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d301      	bcc.n	80072e8 <ai_platform_network_process+0x4e0>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	607b      	str	r3, [r7, #4]
 80072ea:	f108 0801 	add.w	r8, r8, #1
 80072ee:	8833      	ldrh	r3, [r6, #0]
 80072f0:	4598      	cmp	r8, r3
 80072f2:	d3d5      	bcc.n	80072a0 <ai_platform_network_process+0x498>
 80072f4:	9b00      	ldr	r3, [sp, #0]
 80072f6:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 80072fa:	461a      	mov	r2, r3
 80072fc:	8a9b      	ldrh	r3, [r3, #20]
 80072fe:	f10b 0b01 	add.w	fp, fp, #1
 8007302:	fa1f fb8b 	uxth.w	fp, fp
 8007306:	455b      	cmp	r3, fp
 8007308:	f8a2 b016 	strh.w	fp, [r2, #22]
 800730c:	f63f af68 	bhi.w	80071e0 <ai_platform_network_process+0x3d8>
 8007310:	4658      	mov	r0, fp
 8007312:	b003      	add	sp, #12
 8007314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007318:	461d      	mov	r5, r3
 800731a:	461e      	mov	r6, r3
 800731c:	e759      	b.n	80071d2 <ai_platform_network_process+0x3ca>
 800731e:	2600      	movs	r6, #0
 8007320:	e757      	b.n	80071d2 <ai_platform_network_process+0x3ca>
 8007322:	9c00      	ldr	r4, [sp, #0]
 8007324:	2217      	movs	r2, #23
 8007326:	2113      	movs	r1, #19
 8007328:	46bb      	mov	fp, r7
 800732a:	f104 0010 	add.w	r0, r4, #16
 800732e:	f000 f83b 	bl	80073a8 <core_set_error>
 8007332:	e664      	b.n	8006ffe <ai_platform_network_process+0x1f6>
 8007334:	f104 0010 	add.w	r0, r4, #16
 8007338:	2217      	movs	r2, #23
 800733a:	2112      	movs	r1, #18
 800733c:	469b      	mov	fp, r3
 800733e:	f000 f833 	bl	80073a8 <core_set_error>
 8007342:	e65c      	b.n	8006ffe <ai_platform_network_process+0x1f6>
 8007344:	f104 0010 	add.w	r0, r4, #16
 8007348:	2219      	movs	r2, #25
 800734a:	2112      	movs	r1, #18
 800734c:	f04f 0b00 	mov.w	fp, #0
 8007350:	f000 f82a 	bl	80073a8 <core_set_error>
 8007354:	e653      	b.n	8006ffe <ai_platform_network_process+0x1f6>
 8007356:	f104 0010 	add.w	r0, r4, #16
 800735a:	2230      	movs	r2, #48	; 0x30
 800735c:	2111      	movs	r1, #17
 800735e:	f000 f823 	bl	80073a8 <core_set_error>
 8007362:	f04f 0b00 	mov.w	fp, #0
 8007366:	e64a      	b.n	8006ffe <ai_platform_network_process+0x1f6>
 8007368:	4b07      	ldr	r3, [pc, #28]	; (8007388 <ai_platform_network_process+0x580>)
 800736a:	2201      	movs	r2, #1
 800736c:	4619      	mov	r1, r3
 800736e:	601a      	str	r2, [r3, #0]
 8007370:	680b      	ldr	r3, [r1, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1fc      	bne.n	8007370 <ai_platform_network_process+0x568>
 8007376:	4b05      	ldr	r3, [pc, #20]	; (800738c <ai_platform_network_process+0x584>)
 8007378:	4905      	ldr	r1, [pc, #20]	; (8007390 <ai_platform_network_process+0x588>)
 800737a:	4a06      	ldr	r2, [pc, #24]	; (8007394 <ai_platform_network_process+0x58c>)
 800737c:	6019      	str	r1, [r3, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4293      	cmp	r3, r2
 8007382:	f43f ad72 	beq.w	8006e6a <ai_platform_network_process+0x62>
 8007386:	e7fe      	b.n	8007386 <ai_platform_network_process+0x57e>
 8007388:	40023008 	.word	0x40023008
 800738c:	40023000 	.word	0x40023000
 8007390:	f407a5c2 	.word	0xf407a5c2
 8007394:	b5e8b5cd 	.word	0xb5e8b5cd

08007398 <core_init>:
 8007398:	2001      	movs	r0, #1
 800739a:	4770      	bx	lr

0800739c <core_get_error>:
 800739c:	4603      	mov	r3, r0
 800739e:	2200      	movs	r2, #0
 80073a0:	6800      	ldr	r0, [r0, #0]
 80073a2:	601a      	str	r2, [r3, #0]
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop

080073a8 <core_set_error>:
 80073a8:	4603      	mov	r3, r0
 80073aa:	7800      	ldrb	r0, [r0, #0]
 80073ac:	b930      	cbnz	r0, 80073bc <core_set_error+0x14>
 80073ae:	7019      	strb	r1, [r3, #0]
 80073b0:	2001      	movs	r0, #1
 80073b2:	6819      	ldr	r1, [r3, #0]
 80073b4:	f362 211f 	bfi	r1, r2, #8, #24
 80073b8:	6019      	str	r1, [r3, #0]
 80073ba:	4770      	bx	lr
 80073bc:	2000      	movs	r0, #0
 80073be:	4770      	bx	lr

080073c0 <func_dummy>:
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop

080073c4 <ai_dict8_dot_array_f32>:
 80073c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073c8:	9d06      	ldr	r5, [sp, #24]
 80073ca:	4c88      	ldr	r4, [pc, #544]	; (80075ec <ai_dict8_dot_array_f32+0x228>)
 80073cc:	2d07      	cmp	r5, #7
 80073ce:	442c      	add	r4, r5
 80073d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80073d4:	f104 0620 	add.w	r6, r4, #32
 80073d8:	d817      	bhi.n	800740a <ai_dict8_dot_array_f32+0x46>
 80073da:	42b3      	cmp	r3, r6
 80073dc:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80075f0 <ai_dict8_dot_array_f32+0x22c>
 80073e0:	d20b      	bcs.n	80073fa <ai_dict8_dot_array_f32+0x36>
 80073e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073e6:	ecf3 7a01 	vldmia	r3!, {s15}
 80073ea:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80073ee:	42b3      	cmp	r3, r6
 80073f0:	edd4 6a00 	vldr	s13, [r4]
 80073f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80073f8:	d3f3      	bcc.n	80073e2 <ai_dict8_dot_array_f32+0x1e>
 80073fa:	edd0 7a00 	vldr	s15, [r0]
 80073fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007402:	ed80 7a00 	vstr	s14, [r0]
 8007406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800740a:	f001 0503 	and.w	r5, r1, #3
 800740e:	2d02      	cmp	r5, #2
 8007410:	f000 80f0 	beq.w	80075f4 <ai_dict8_dot_array_f32+0x230>
 8007414:	2d03      	cmp	r5, #3
 8007416:	f000 81ff 	beq.w	8007818 <ai_dict8_dot_array_f32+0x454>
 800741a:	2d01      	cmp	r5, #1
 800741c:	f000 81f0 	beq.w	8007800 <ai_dict8_dot_array_f32+0x43c>
 8007420:	42a3      	cmp	r3, r4
 8007422:	f200 81fc 	bhi.w	800781e <ai_dict8_dot_array_f32+0x45a>
 8007426:	1ae4      	subs	r4, r4, r3
 8007428:	f101 0810 	add.w	r8, r1, #16
 800742c:	f101 0508 	add.w	r5, r1, #8
 8007430:	f103 0720 	add.w	r7, r3, #32
 8007434:	0964      	lsrs	r4, r4, #5
 8007436:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80075f0 <ai_dict8_dot_array_f32+0x22c>
 800743a:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
 800743e:	f815 ec07 	ldrb.w	lr, [r5, #-7]
 8007442:	3508      	adds	r5, #8
 8007444:	f815 cc10 	ldrb.w	ip, [r5, #-16]
 8007448:	3720      	adds	r7, #32
 800744a:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 800744e:	ed57 5a0f 	vldr	s11, [r7, #-60]	; 0xffffffc4
 8007452:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8007456:	ed17 6a10 	vldr	s12, [r7, #-64]	; 0xffffffc0
 800745a:	edde 7a00 	vldr	s15, [lr]
 800745e:	ed57 6a0e 	vldr	s13, [r7, #-56]	; 0xffffffc8
 8007462:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007466:	eddc 5a00 	vldr	s11, [ip]
 800746a:	f815 cc0e 	ldrb.w	ip, [r5, #-14]
 800746e:	ed17 5a0d 	vldr	s10, [r7, #-52]	; 0xffffffcc
 8007472:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007476:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800747a:	f815 ec0c 	ldrb.w	lr, [r5, #-12]
 800747e:	ed9c 4a00 	vldr	s8, [ip]
 8007482:	f815 cc0d 	ldrb.w	ip, [r5, #-13]
 8007486:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 800748a:	ed17 6a0c 	vldr	s12, [r7, #-48]	; 0xffffffd0
 800748e:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8007492:	ed57 4a0b 	vldr	s9, [r7, #-44]	; 0xffffffd4
 8007496:	eee4 7a26 	vfma.f32	s15, s8, s13
 800749a:	ed57 5a0a 	vldr	s11, [r7, #-40]	; 0xffffffd8
 800749e:	ed9c 4a00 	vldr	s8, [ip]
 80074a2:	f815 cc0b 	ldrb.w	ip, [r5, #-11]
 80074a6:	ed57 6a09 	vldr	s13, [r7, #-36]	; 0xffffffdc
 80074aa:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80074ae:	eee4 7a05 	vfma.f32	s15, s8, s10
 80074b2:	ed9e 5a00 	vldr	s10, [lr]
 80074b6:	ed9c 4a00 	vldr	s8, [ip]
 80074ba:	f815 ec0a 	ldrb.w	lr, [r5, #-10]
 80074be:	f815 cc09 	ldrb.w	ip, [r5, #-9]
 80074c2:	4545      	cmp	r5, r8
 80074c4:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 80074c8:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80074cc:	eee5 7a06 	vfma.f32	s15, s10, s12
 80074d0:	ed9e 5a00 	vldr	s10, [lr]
 80074d4:	ed9c 6a00 	vldr	s12, [ip]
 80074d8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80074dc:	eee5 7a25 	vfma.f32	s15, s10, s11
 80074e0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80074e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80074e8:	d1a9      	bne.n	800743e <ai_dict8_dot_array_f32+0x7a>
 80074ea:	3401      	adds	r4, #1
 80074ec:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80074f0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80074f4:	42b3      	cmp	r3, r6
 80074f6:	d280      	bcs.n	80073fa <ai_dict8_dot_array_f32+0x36>
 80074f8:	461c      	mov	r4, r3
 80074fa:	780d      	ldrb	r5, [r1, #0]
 80074fc:	ecf4 6a01 	vldmia	r4!, {s13}
 8007500:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007504:	42a6      	cmp	r6, r4
 8007506:	edd5 7a00 	vldr	s15, [r5]
 800750a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800750e:	f67f af74 	bls.w	80073fa <ai_dict8_dot_array_f32+0x36>
 8007512:	784d      	ldrb	r5, [r1, #1]
 8007514:	f103 0408 	add.w	r4, r3, #8
 8007518:	edd3 6a01 	vldr	s13, [r3, #4]
 800751c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007520:	42a6      	cmp	r6, r4
 8007522:	edd5 7a00 	vldr	s15, [r5]
 8007526:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800752a:	f67f af66 	bls.w	80073fa <ai_dict8_dot_array_f32+0x36>
 800752e:	788d      	ldrb	r5, [r1, #2]
 8007530:	f103 040c 	add.w	r4, r3, #12
 8007534:	edd3 6a02 	vldr	s13, [r3, #8]
 8007538:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800753c:	42a6      	cmp	r6, r4
 800753e:	edd5 7a00 	vldr	s15, [r5]
 8007542:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007546:	f67f af58 	bls.w	80073fa <ai_dict8_dot_array_f32+0x36>
 800754a:	78cd      	ldrb	r5, [r1, #3]
 800754c:	f103 0410 	add.w	r4, r3, #16
 8007550:	edd3 6a03 	vldr	s13, [r3, #12]
 8007554:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007558:	42a6      	cmp	r6, r4
 800755a:	edd5 7a00 	vldr	s15, [r5]
 800755e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007562:	f67f af4a 	bls.w	80073fa <ai_dict8_dot_array_f32+0x36>
 8007566:	790d      	ldrb	r5, [r1, #4]
 8007568:	f103 0414 	add.w	r4, r3, #20
 800756c:	edd3 6a04 	vldr	s13, [r3, #16]
 8007570:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007574:	42a6      	cmp	r6, r4
 8007576:	edd5 7a00 	vldr	s15, [r5]
 800757a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800757e:	f67f af3c 	bls.w	80073fa <ai_dict8_dot_array_f32+0x36>
 8007582:	794d      	ldrb	r5, [r1, #5]
 8007584:	f103 0418 	add.w	r4, r3, #24
 8007588:	edd3 6a05 	vldr	s13, [r3, #20]
 800758c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007590:	42a6      	cmp	r6, r4
 8007592:	edd5 7a00 	vldr	s15, [r5]
 8007596:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800759a:	f67f af2e 	bls.w	80073fa <ai_dict8_dot_array_f32+0x36>
 800759e:	798d      	ldrb	r5, [r1, #6]
 80075a0:	f103 041c 	add.w	r4, r3, #28
 80075a4:	edd3 6a06 	vldr	s13, [r3, #24]
 80075a8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80075ac:	42a6      	cmp	r6, r4
 80075ae:	edd5 7a00 	vldr	s15, [r5]
 80075b2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80075b6:	f67f af20 	bls.w	80073fa <ai_dict8_dot_array_f32+0x36>
 80075ba:	79cd      	ldrb	r5, [r1, #7]
 80075bc:	f103 0420 	add.w	r4, r3, #32
 80075c0:	edd3 6a07 	vldr	s13, [r3, #28]
 80075c4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80075c8:	42a6      	cmp	r6, r4
 80075ca:	edd5 7a00 	vldr	s15, [r5]
 80075ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80075d2:	f67f af12 	bls.w	80073fa <ai_dict8_dot_array_f32+0x36>
 80075d6:	7a09      	ldrb	r1, [r1, #8]
 80075d8:	edd3 7a08 	vldr	s15, [r3, #32]
 80075dc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80075e0:	edd2 6a00 	vldr	s13, [r2]
 80075e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80075e8:	e707      	b.n	80073fa <ai_dict8_dot_array_f32+0x36>
 80075ea:	bf00      	nop
 80075ec:	3ffffff8 	.word	0x3ffffff8
 80075f0:	00000000 	.word	0x00000000
 80075f4:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 80075f0 <ai_dict8_dot_array_f32+0x22c>
 80075f8:	780d      	ldrb	r5, [r1, #0]
 80075fa:	3304      	adds	r3, #4
 80075fc:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007600:	3101      	adds	r1, #1
 8007602:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007606:	edd5 6a00 	vldr	s13, [r5]
 800760a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800760e:	780d      	ldrb	r5, [r1, #0]
 8007610:	1d1f      	adds	r7, r3, #4
 8007612:	edd3 7a00 	vldr	s15, [r3]
 8007616:	f101 0c01 	add.w	ip, r1, #1
 800761a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800761e:	42bc      	cmp	r4, r7
 8007620:	edd5 6a00 	vldr	s13, [r5]
 8007624:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007628:	d365      	bcc.n	80076f6 <ai_dict8_dot_array_f32+0x332>
 800762a:	3324      	adds	r3, #36	; 0x24
 800762c:	f101 0e11 	add.w	lr, r1, #17
 8007630:	3109      	adds	r1, #9
 8007632:	eba6 0803 	sub.w	r8, r6, r3
 8007636:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800763a:	eb0e 0ec8 	add.w	lr, lr, r8, lsl #3
 800763e:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8007642:	3108      	adds	r1, #8
 8007644:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 8007648:	3320      	adds	r3, #32
 800764a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800764e:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8007652:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007656:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 800765a:	edd5 7a00 	vldr	s15, [r5]
 800765e:	ed53 6a0e 	vldr	s13, [r3, #-56]	; 0xffffffc8
 8007662:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007666:	edd4 5a00 	vldr	s11, [r4]
 800766a:	f811 4c0e 	ldrb.w	r4, [r1, #-14]
 800766e:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 8007672:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007676:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800767a:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800767e:	ed94 4a00 	vldr	s8, [r4]
 8007682:	f811 4c0d 	ldrb.w	r4, [r1, #-13]
 8007686:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800768a:	ed13 6a0c 	vldr	s12, [r3, #-48]	; 0xffffffd0
 800768e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007692:	ed53 4a0b 	vldr	s9, [r3, #-44]	; 0xffffffd4
 8007696:	eee4 7a26 	vfma.f32	s15, s8, s13
 800769a:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 800769e:	ed94 4a00 	vldr	s8, [r4]
 80076a2:	f811 4c0b 	ldrb.w	r4, [r1, #-11]
 80076a6:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 80076aa:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80076ae:	eee4 7a05 	vfma.f32	s15, s8, s10
 80076b2:	ed95 5a00 	vldr	s10, [r5]
 80076b6:	ed94 4a00 	vldr	s8, [r4]
 80076ba:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 80076be:	f811 4c09 	ldrb.w	r4, [r1, #-9]
 80076c2:	458e      	cmp	lr, r1
 80076c4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80076c8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80076cc:	eee5 7a06 	vfma.f32	s15, s10, s12
 80076d0:	ed95 5a00 	vldr	s10, [r5]
 80076d4:	ed94 6a00 	vldr	s12, [r4]
 80076d8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80076dc:	eee5 7a25 	vfma.f32	s15, s10, s11
 80076e0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80076e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80076e8:	d1a9      	bne.n	800763e <ai_dict8_dot_array_f32+0x27a>
 80076ea:	f108 0801 	add.w	r8, r8, #1
 80076ee:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 80076f2:	eb07 1748 	add.w	r7, r7, r8, lsl #5
 80076f6:	42b7      	cmp	r7, r6
 80076f8:	f4bf ae7f 	bcs.w	80073fa <ai_dict8_dot_array_f32+0x36>
 80076fc:	463b      	mov	r3, r7
 80076fe:	f89c 1000 	ldrb.w	r1, [ip]
 8007702:	ecf3 6a01 	vldmia	r3!, {s13}
 8007706:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800770a:	429e      	cmp	r6, r3
 800770c:	edd1 7a00 	vldr	s15, [r1]
 8007710:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007714:	f67f ae71 	bls.w	80073fa <ai_dict8_dot_array_f32+0x36>
 8007718:	f89c 1001 	ldrb.w	r1, [ip, #1]
 800771c:	f107 0308 	add.w	r3, r7, #8
 8007720:	edd7 6a01 	vldr	s13, [r7, #4]
 8007724:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8007728:	429e      	cmp	r6, r3
 800772a:	edd1 7a00 	vldr	s15, [r1]
 800772e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007732:	f67f ae62 	bls.w	80073fa <ai_dict8_dot_array_f32+0x36>
 8007736:	f89c 1002 	ldrb.w	r1, [ip, #2]
 800773a:	f107 030c 	add.w	r3, r7, #12
 800773e:	edd7 6a02 	vldr	s13, [r7, #8]
 8007742:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8007746:	429e      	cmp	r6, r3
 8007748:	edd1 7a00 	vldr	s15, [r1]
 800774c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007750:	f67f ae53 	bls.w	80073fa <ai_dict8_dot_array_f32+0x36>
 8007754:	f89c 1003 	ldrb.w	r1, [ip, #3]
 8007758:	f107 0310 	add.w	r3, r7, #16
 800775c:	edd7 6a03 	vldr	s13, [r7, #12]
 8007760:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8007764:	429e      	cmp	r6, r3
 8007766:	edd1 7a00 	vldr	s15, [r1]
 800776a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800776e:	f67f ae44 	bls.w	80073fa <ai_dict8_dot_array_f32+0x36>
 8007772:	f89c 1004 	ldrb.w	r1, [ip, #4]
 8007776:	f107 0314 	add.w	r3, r7, #20
 800777a:	edd7 6a04 	vldr	s13, [r7, #16]
 800777e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8007782:	429e      	cmp	r6, r3
 8007784:	edd1 7a00 	vldr	s15, [r1]
 8007788:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800778c:	f67f ae35 	bls.w	80073fa <ai_dict8_dot_array_f32+0x36>
 8007790:	f89c 1005 	ldrb.w	r1, [ip, #5]
 8007794:	f107 0318 	add.w	r3, r7, #24
 8007798:	edd7 6a05 	vldr	s13, [r7, #20]
 800779c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80077a0:	429e      	cmp	r6, r3
 80077a2:	edd1 7a00 	vldr	s15, [r1]
 80077a6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80077aa:	f67f ae26 	bls.w	80073fa <ai_dict8_dot_array_f32+0x36>
 80077ae:	f89c 1006 	ldrb.w	r1, [ip, #6]
 80077b2:	f107 031c 	add.w	r3, r7, #28
 80077b6:	edd7 6a06 	vldr	s13, [r7, #24]
 80077ba:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80077be:	429e      	cmp	r6, r3
 80077c0:	edd1 7a00 	vldr	s15, [r1]
 80077c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80077c8:	f67f ae17 	bls.w	80073fa <ai_dict8_dot_array_f32+0x36>
 80077cc:	f89c 1007 	ldrb.w	r1, [ip, #7]
 80077d0:	f107 0320 	add.w	r3, r7, #32
 80077d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80077d8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80077dc:	429e      	cmp	r6, r3
 80077de:	edd1 7a00 	vldr	s15, [r1]
 80077e2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80077e6:	f67f ae08 	bls.w	80073fa <ai_dict8_dot_array_f32+0x36>
 80077ea:	f89c 3008 	ldrb.w	r3, [ip, #8]
 80077ee:	edd7 7a08 	vldr	s15, [r7, #32]
 80077f2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80077f6:	edd2 6a00 	vldr	s13, [r2]
 80077fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80077fe:	e5fc      	b.n	80073fa <ai_dict8_dot_array_f32+0x36>
 8007800:	780d      	ldrb	r5, [r1, #0]
 8007802:	3304      	adds	r3, #4
 8007804:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007808:	3101      	adds	r1, #1
 800780a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800780e:	ed95 7a00 	vldr	s14, [r5]
 8007812:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007816:	e6ef      	b.n	80075f8 <ai_dict8_dot_array_f32+0x234>
 8007818:	ed1f 7a8b 	vldr	s14, [pc, #-556]	; 80075f0 <ai_dict8_dot_array_f32+0x22c>
 800781c:	e6f7      	b.n	800760e <ai_dict8_dot_array_f32+0x24a>
 800781e:	ed1f 7a8c 	vldr	s14, [pc, #-560]	; 80075f0 <ai_dict8_dot_array_f32+0x22c>
 8007822:	e667      	b.n	80074f4 <ai_dict8_dot_array_f32+0x130>

08007824 <ai_dict4_dot_array_f32>:
 8007824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007828:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800782a:	f027 0c01 	bic.w	ip, r7, #1
 800782e:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8007832:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8007836:	f000 80ad 	beq.w	8007994 <ai_dict4_dot_array_f32+0x170>
 800783a:	1d0d      	adds	r5, r1, #4
 800783c:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8007840:	f103 0420 	add.w	r4, r3, #32
 8007844:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800799c <ai_dict4_dot_array_f32+0x178>
 8007848:	eb05 0e09 	add.w	lr, r5, r9
 800784c:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8007850:	3504      	adds	r5, #4
 8007852:	ed14 5a07 	vldr	s10, [r4, #-28]	; 0xffffffe4
 8007856:	3420      	adds	r4, #32
 8007858:	f006 0a0f 	and.w	sl, r6, #15
 800785c:	0936      	lsrs	r6, r6, #4
 800785e:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8007862:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007866:	ed14 4a0e 	vldr	s8, [r4, #-56]	; 0xffffffc8
 800786a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800786e:	ed14 6a0d 	vldr	s12, [r4, #-52]	; 0xffffffcc
 8007872:	edda 7a00 	vldr	s15, [sl]
 8007876:	edd6 5a00 	vldr	s11, [r6]
 800787a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800787e:	f815 6c07 	ldrb.w	r6, [r5, #-7]
 8007882:	ed54 3a0c 	vldr	s7, [r4, #-48]	; 0xffffffd0
 8007886:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800788a:	f006 060f 	and.w	r6, r6, #15
 800788e:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8007892:	ed54 4a0b 	vldr	s9, [r4, #-44]	; 0xffffffd4
 8007896:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800789a:	ed54 5a0a 	vldr	s11, [r4, #-40]	; 0xffffffd8
 800789e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80078a2:	ed54 6a09 	vldr	s13, [r4, #-36]	; 0xffffffdc
 80078a6:	ed9a 3a00 	vldr	s6, [sl]
 80078aa:	ed96 5a00 	vldr	s10, [r6]
 80078ae:	f815 ac06 	ldrb.w	sl, [r5, #-6]
 80078b2:	eee3 7a04 	vfma.f32	s15, s6, s8
 80078b6:	f815 6c05 	ldrb.w	r6, [r5, #-5]
 80078ba:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 80078be:	f00a 0a0f 	and.w	sl, sl, #15
 80078c2:	45ae      	cmp	lr, r5
 80078c4:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80078c8:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80078cc:	ed9b 3a00 	vldr	s6, [fp]
 80078d0:	ea4f 1b16 	mov.w	fp, r6, lsr #4
 80078d4:	eee5 7a06 	vfma.f32	s15, s10, s12
 80078d8:	ed9a 4a00 	vldr	s8, [sl]
 80078dc:	eb02 0a8b 	add.w	sl, r2, fp, lsl #2
 80078e0:	f006 060f 	and.w	r6, r6, #15
 80078e4:	ed9a 5a00 	vldr	s10, [sl]
 80078e8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80078ec:	ed96 6a00 	vldr	s12, [r6]
 80078f0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80078f4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80078f8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80078fc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007900:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007904:	d1a2      	bne.n	800784c <ai_dict4_dot_array_f32+0x28>
 8007906:	4449      	add	r1, r9
 8007908:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800790c:	459c      	cmp	ip, r3
 800790e:	d92d      	bls.n	800796c <ai_dict4_dot_array_f32+0x148>
 8007910:	f10c 0c07 	add.w	ip, ip, #7
 8007914:	f103 0508 	add.w	r5, r3, #8
 8007918:	f103 0810 	add.w	r8, r3, #16
 800791c:	f101 3eff 	add.w	lr, r1, #4294967295
 8007920:	ebac 0c05 	sub.w	ip, ip, r5
 8007924:	f02c 0407 	bic.w	r4, ip, #7
 8007928:	44a0      	add	r8, r4
 800792a:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800792e:	3508      	adds	r5, #8
 8007930:	ed55 5a03 	vldr	s11, [r5, #-12]
 8007934:	f004 060f 	and.w	r6, r4, #15
 8007938:	0924      	lsrs	r4, r4, #4
 800793a:	ed55 6a04 	vldr	s13, [r5, #-16]
 800793e:	45a8      	cmp	r8, r5
 8007940:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007944:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007948:	edd6 7a00 	vldr	s15, [r6]
 800794c:	ed94 6a00 	vldr	s12, [r4]
 8007950:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007954:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007958:	ee37 7a27 	vadd.f32	s14, s14, s15
 800795c:	d1e5      	bne.n	800792a <ai_dict4_dot_array_f32+0x106>
 800795e:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8007962:	f10c 0c01 	add.w	ip, ip, #1
 8007966:	4461      	add	r1, ip
 8007968:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800796c:	07fc      	lsls	r4, r7, #31
 800796e:	d509      	bpl.n	8007984 <ai_dict4_dot_array_f32+0x160>
 8007970:	7809      	ldrb	r1, [r1, #0]
 8007972:	edd3 7a00 	vldr	s15, [r3]
 8007976:	090b      	lsrs	r3, r1, #4
 8007978:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800797c:	edd2 6a00 	vldr	s13, [r2]
 8007980:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007984:	edd0 7a00 	vldr	s15, [r0]
 8007988:	ee37 7a87 	vadd.f32	s14, s15, s14
 800798c:	ed80 7a00 	vstr	s14, [r0]
 8007990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007994:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800799c <ai_dict4_dot_array_f32+0x178>
 8007998:	e7b8      	b.n	800790c <ai_dict4_dot_array_f32+0xe8>
 800799a:	bf00      	nop
 800799c:	00000000 	.word	0x00000000

080079a0 <ai_dict_decompress_f32>:
 80079a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079a4:	9f08      	ldr	r7, [sp, #32]
 80079a6:	2b04      	cmp	r3, #4
 80079a8:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80079ac:	d00e      	beq.n	80079cc <ai_dict_decompress_f32+0x2c>
 80079ae:	2b08      	cmp	r3, #8
 80079b0:	d10a      	bne.n	80079c8 <ai_dict_decompress_f32+0x28>
 80079b2:	42b8      	cmp	r0, r7
 80079b4:	d208      	bcs.n	80079c8 <ai_dict_decompress_f32+0x28>
 80079b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f840 3b04 	str.w	r3, [r0], #4
 80079c4:	4287      	cmp	r7, r0
 80079c6:	d8f6      	bhi.n	80079b6 <ai_dict_decompress_f32+0x16>
 80079c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079cc:	9b07      	ldr	r3, [sp, #28]
 80079ce:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80079d2:	f003 0e01 	and.w	lr, r3, #1
 80079d6:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 80079da:	f10c 38ff 	add.w	r8, ip, #4294967295
 80079de:	42b8      	cmp	r0, r7
 80079e0:	d2f2      	bcs.n	80079c8 <ai_dict_decompress_f32+0x28>
 80079e2:	f1bc 0f00 	cmp.w	ip, #0
 80079e6:	d019      	beq.n	8007a1c <ai_dict_decompress_f32+0x7c>
 80079e8:	f100 0508 	add.w	r5, r0, #8
 80079ec:	1e4c      	subs	r4, r1, #1
 80079ee:	eb01 0608 	add.w	r6, r1, r8
 80079f2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80079f6:	3508      	adds	r5, #8
 80079f8:	091b      	lsrs	r3, r3, #4
 80079fa:	42a6      	cmp	r6, r4
 80079fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f845 3c10 	str.w	r3, [r5, #-16]
 8007a06:	7823      	ldrb	r3, [r4, #0]
 8007a08:	f003 030f 	and.w	r3, r3, #15
 8007a0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f845 3c0c 	str.w	r3, [r5, #-12]
 8007a16:	d1ec      	bne.n	80079f2 <ai_dict_decompress_f32+0x52>
 8007a18:	4461      	add	r1, ip
 8007a1a:	4448      	add	r0, r9
 8007a1c:	f1be 0f00 	cmp.w	lr, #0
 8007a20:	d103      	bne.n	8007a2a <ai_dict_decompress_f32+0x8a>
 8007a22:	4287      	cmp	r7, r0
 8007a24:	d8dd      	bhi.n	80079e2 <ai_dict_decompress_f32+0x42>
 8007a26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a2a:	780b      	ldrb	r3, [r1, #0]
 8007a2c:	3004      	adds	r0, #4
 8007a2e:	3101      	adds	r1, #1
 8007a30:	091b      	lsrs	r3, r3, #4
 8007a32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f840 3c04 	str.w	r3, [r0, #-4]
 8007a3c:	e7cf      	b.n	80079de <ai_dict_decompress_f32+0x3e>
 8007a3e:	bf00      	nop

08007a40 <forward_conv2d>:
 8007a40:	6983      	ldr	r3, [r0, #24]
 8007a42:	881a      	ldrh	r2, [r3, #0]
 8007a44:	2a00      	cmp	r2, #0
 8007a46:	f000 87c4 	beq.w	80089d2 <forward_conv2d+0xf92>
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	6859      	ldr	r1, [r3, #4]
 8007a4e:	b101      	cbz	r1, 8007a52 <forward_conv2d+0x12>
 8007a50:	6809      	ldr	r1, [r1, #0]
 8007a52:	2a01      	cmp	r2, #1
 8007a54:	f240 87ba 	bls.w	80089cc <forward_conv2d+0xf8c>
 8007a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5c:	ed2d 8b08 	vpush	{d8-d11}
 8007a60:	b0cb      	sub	sp, #300	; 0x12c
 8007a62:	691c      	ldr	r4, [r3, #16]
 8007a64:	af02      	add	r7, sp, #8
 8007a66:	2c00      	cmp	r4, #0
 8007a68:	f000 87ac 	beq.w	80089c4 <forward_conv2d+0xf84>
 8007a6c:	6824      	ldr	r4, [r4, #0]
 8007a6e:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8007a72:	2a02      	cmp	r2, #2
 8007a74:	f000 87a1 	beq.w	80089ba <forward_conv2d+0xf7a>
 8007a78:	69dd      	ldr	r5, [r3, #28]
 8007a7a:	2d00      	cmp	r5, #0
 8007a7c:	f000 8796 	beq.w	80089ac <forward_conv2d+0xf6c>
 8007a80:	f113 0218 	adds.w	r2, r3, #24
 8007a84:	682c      	ldr	r4, [r5, #0]
 8007a86:	d004      	beq.n	8007a92 <forward_conv2d+0x52>
 8007a88:	8b1b      	ldrh	r3, [r3, #24]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	f240 87a3 	bls.w	80089d6 <forward_conv2d+0xf96>
 8007a90:	686a      	ldr	r2, [r5, #4]
 8007a92:	68ab      	ldr	r3, [r5, #8]
 8007a94:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8007a98:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8007a9c:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8007aa0:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8007aa4:	68ce      	ldr	r6, [r1, #12]
 8007aa6:	69a1      	ldr	r1, [r4, #24]
 8007aa8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8007aaa:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8007aae:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8007ab2:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 8007ab6:	f8de 1004 	ldr.w	r1, [lr, #4]
 8007aba:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8007abe:	f8de 100c 	ldr.w	r1, [lr, #12]
 8007ac2:	6479      	str	r1, [r7, #68]	; 0x44
 8007ac4:	f8de 1008 	ldr.w	r1, [lr, #8]
 8007ac8:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 8007acc:	6871      	ldr	r1, [r6, #4]
 8007ace:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8007ad2:	68f1      	ldr	r1, [r6, #12]
 8007ad4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8007ad8:	68b1      	ldr	r1, [r6, #8]
 8007ada:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8007ade:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8007ae2:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8007ae6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007aea:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8007aee:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8007af2:	6889      	ldr	r1, [r1, #8]
 8007af4:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8007af8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8007afa:	e9d5 ba00 	ldrd	fp, sl, [r5]
 8007afe:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8007b02:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007b04:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8007b08:	69c1      	ldr	r1, [r0, #28]
 8007b0a:	e9d0 980c 	ldrd	r9, r8, [r0, #48]	; 0x30
 8007b0e:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8007b12:	2a00      	cmp	r2, #0
 8007b14:	f000 873d 	beq.w	8008992 <forward_conv2d+0xf52>
 8007b18:	6992      	ldr	r2, [r2, #24]
 8007b1a:	6892      	ldr	r2, [r2, #8]
 8007b1c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8007b20:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007b24:	4606      	mov	r6, r0
 8007b26:	6a00      	ldr	r0, [r0, #32]
 8007b28:	6992      	ldr	r2, [r2, #24]
 8007b2a:	6892      	ldr	r2, [r2, #8]
 8007b2c:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f000 8721 	beq.w	8008978 <forward_conv2d+0xf38>
 8007b36:	699a      	ldr	r2, [r3, #24]
 8007b38:	2a00      	cmp	r2, #0
 8007b3a:	f000 8592 	beq.w	8008662 <forward_conv2d+0xc22>
 8007b3e:	695b      	ldr	r3, [r3, #20]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b46:	6893      	ldr	r3, [r2, #8]
 8007b48:	e9d2 0100 	ldrd	r0, r1, [r2]
 8007b4c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b50:	f002 feec 	bl	800a92c <ai_array_get_byte_size>
 8007b54:	69a3      	ldr	r3, [r4, #24]
 8007b56:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8007b5a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007b5e:	681c      	ldr	r4, [r3, #0]
 8007b60:	fa1f f288 	uxth.w	r2, r8
 8007b64:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8007b68:	fa1f f389 	uxth.w	r3, r9
 8007b6c:	f3c4 15c6 	ubfx	r5, r4, #7, #7
 8007b70:	f3c4 5041 	ubfx	r0, r4, #21, #2
 8007b74:	f101 3eff 	add.w	lr, r1, #4294967295
 8007b78:	f3c4 4c43 	ubfx	ip, r4, #17, #4
 8007b7c:	3a01      	subs	r2, #1
 8007b7e:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 8007b82:	fa45 f000 	asr.w	r0, r5, r0
 8007b86:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8007b88:	fb0e 1202 	mla	r2, lr, r2, r1
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	3c01      	subs	r4, #1
 8007b90:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8007b94:	f8c7 50ac 	str.w	r5, [r7, #172]	; 0xac
 8007b98:	b285      	uxth	r5, r0
 8007b9a:	fb04 1103 	mla	r1, r4, r3, r1
 8007b9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ba2:	643a      	str	r2, [r7, #64]	; 0x40
 8007ba4:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 8007ba8:	4619      	mov	r1, r3
 8007baa:	4adf      	ldr	r2, [pc, #892]	; (8007f28 <forward_conv2d+0x4e8>)
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	bf08      	it	eq
 8007bb0:	4611      	moveq	r1, r2
 8007bb2:	f1bc 0f04 	cmp.w	ip, #4
 8007bb6:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8007bba:	f000 852e 	beq.w	800861a <forward_conv2d+0xbda>
 8007bbe:	f1bc 0f08 	cmp.w	ip, #8
 8007bc2:	f000 852a 	beq.w	800861a <forward_conv2d+0xbda>
 8007bc6:	fa1f f38b 	uxth.w	r3, fp
 8007bca:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007bce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007bd2:	425b      	negs	r3, r3
 8007bd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007bd8:	2a00      	cmp	r2, #0
 8007bda:	f000 8241 	beq.w	8008060 <forward_conv2d+0x620>
 8007bde:	fa1f f28a 	uxth.w	r2, sl
 8007be2:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8007be6:	f8d7 50c4 	ldr.w	r5, [r7, #196]	; 0xc4
 8007bea:	fa0f f688 	sxth.w	r6, r8
 8007bee:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007bf2:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8007bf6:	fb01 f305 	mul.w	r3, r1, r5
 8007bfa:	f8b7 c0f0 	ldrh.w	ip, [r7, #240]	; 0xf0
 8007bfe:	fa0f f589 	sxth.w	r5, r9
 8007c02:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8007c06:	f8c7 c064 	str.w	ip, [r7, #100]	; 0x64
 8007c0a:	4264      	negs	r4, r4
 8007c0c:	fb03 fc00 	mul.w	ip, r3, r0
 8007c10:	f8c7 6090 	str.w	r6, [r7, #144]	; 0x90
 8007c14:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 8007c18:	4634      	mov	r4, r6
 8007c1a:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 8007c1e:	462e      	mov	r6, r5
 8007c20:	f8b7 c100 	ldrh.w	ip, [r7, #256]	; 0x100
 8007c24:	f8c7 50a8 	str.w	r5, [r7, #168]	; 0xa8
 8007c28:	f8c7 c0c8 	str.w	ip, [r7, #200]	; 0xc8
 8007c2c:	fb04 fc05 	mul.w	ip, r4, r5
 8007c30:	4605      	mov	r5, r0
 8007c32:	0084      	lsls	r4, r0, #2
 8007c34:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8007c38:	fb06 f605 	mul.w	r6, r6, r5
 8007c3c:	f8d7 50d0 	ldr.w	r5, [r7, #208]	; 0xd0
 8007c40:	fb01 f200 	mul.w	r2, r1, r0
 8007c44:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8007c48:	627e      	str	r6, [r7, #36]	; 0x24
 8007c4a:	4626      	mov	r6, r4
 8007c4c:	fb01 f000 	mul.w	r0, r1, r0
 8007c50:	ed9f 8ab6 	vldr	s16, [pc, #728]	; 8007f2c <forward_conv2d+0x4ec>
 8007c54:	fb06 f605 	mul.w	r6, r6, r5
 8007c58:	6ffd      	ldr	r5, [r7, #124]	; 0x7c
 8007c5a:	62b8      	str	r0, [r7, #40]	; 0x28
 8007c5c:	00ad      	lsls	r5, r5, #2
 8007c5e:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8007c62:	f8c7 409c 	str.w	r4, [r7, #156]	; 0x9c
 8007c66:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
 8007c6a:	4625      	mov	r5, r4
 8007c6c:	0080      	lsls	r0, r0, #2
 8007c6e:	f8c7 c074 	str.w	ip, [r7, #116]	; 0x74
 8007c72:	fb05 f503 	mul.w	r5, r5, r3
 8007c76:	460b      	mov	r3, r1
 8007c78:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8007c7c:	0089      	lsls	r1, r1, #2
 8007c7e:	4620      	mov	r0, r4
 8007c80:	63bd      	str	r5, [r7, #56]	; 0x38
 8007c82:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 8007c86:	0095      	lsls	r5, r2, #2
 8007c88:	61f9      	str	r1, [r7, #28]
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	64bd      	str	r5, [r7, #72]	; 0x48
 8007c8e:	4625      	mov	r5, r4
 8007c90:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8007c92:	fb00 f505 	mul.w	r5, r0, r5
 8007c96:	fb04 f101 	mul.w	r1, r4, r1
 8007c9a:	65fe      	str	r6, [r7, #92]	; 0x5c
 8007c9c:	66bd      	str	r5, [r7, #104]	; 0x68
 8007c9e:	6179      	str	r1, [r7, #20]
 8007ca0:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8007ca4:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
 8007ca8:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8007cac:	ea4f 0b81 	mov.w	fp, r1, lsl #2
 8007cb0:	fb04 f400 	mul.w	r4, r4, r0
 8007cb4:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8007cb8:	65bc      	str	r4, [r7, #88]	; 0x58
 8007cba:	f8d7 4108 	ldr.w	r4, [r7, #264]	; 0x108
 8007cbe:	f104 4478 	add.w	r4, r4, #4160749568	; 0xf8000000
 8007cc2:	63fc      	str	r4, [r7, #60]	; 0x3c
 8007cc4:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8007cc8:	fb02 f204 	mul.w	r2, r2, r4
 8007ccc:	61ba      	str	r2, [r7, #24]
 8007cce:	460a      	mov	r2, r1
 8007cd0:	0109      	lsls	r1, r1, #4
 8007cd2:	6079      	str	r1, [r7, #4]
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	fb01 f303 	mul.w	r3, r1, r3
 8007cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ce0:	00d3      	lsls	r3, r2, #3
 8007ce2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007ce6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007cea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007cee:	2300      	movs	r3, #0
 8007cf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007cf4:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8007cf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cfe:	2900      	cmp	r1, #0
 8007d00:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007d02:	441a      	add	r2, r3
 8007d04:	bfb4      	ite	lt
 8007d06:	2100      	movlt	r1, #0
 8007d08:	2300      	movge	r3, #0
 8007d0a:	4282      	cmp	r2, r0
 8007d0c:	bf28      	it	cs
 8007d0e:	4602      	movcs	r2, r0
 8007d10:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8007d14:	2801      	cmp	r0, #1
 8007d16:	f000 8319 	beq.w	800834c <forward_conv2d+0x90c>
 8007d1a:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8007d1e:	4281      	cmp	r1, r0
 8007d20:	f000 81bc 	beq.w	800809c <forward_conv2d+0x65c>
 8007d24:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8007d28:	2900      	cmp	r1, #0
 8007d2a:	f000 8178 	beq.w	800801e <forward_conv2d+0x5de>
 8007d2e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8007d32:	1ad2      	subs	r2, r2, r3
 8007d34:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8007d38:	181d      	adds	r5, r3, r0
 8007d3a:	f8c7 b020 	str.w	fp, [r7, #32]
 8007d3e:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
 8007d42:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 8007d46:	3d01      	subs	r5, #1
 8007d48:	fb93 f1f0 	sdiv	r1, r3, r0
 8007d4c:	fb00 3111 	mls	r1, r0, r1, r3
 8007d50:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 8007d54:	2400      	movs	r4, #0
 8007d56:	1a41      	subs	r1, r0, r1
 8007d58:	67bc      	str	r4, [r7, #120]	; 0x78
 8007d5a:	4604      	mov	r4, r0
 8007d5c:	fb91 f0f0 	sdiv	r0, r1, r0
 8007d60:	fb04 1110 	mls	r1, r4, r0, r1
 8007d64:	4620      	mov	r0, r4
 8007d66:	1a52      	subs	r2, r2, r1
 8007d68:	4419      	add	r1, r3
 8007d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d6e:	4422      	add	r2, r4
 8007d70:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 8007d74:	fb03 f301 	mul.w	r3, r3, r1
 8007d78:	3a01      	subs	r2, #1
 8007d7a:	673b      	str	r3, [r7, #112]	; 0x70
 8007d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d80:	fb92 f8f0 	sdiv	r8, r2, r0
 8007d84:	4619      	mov	r1, r3
 8007d86:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8007d8a:	46c2      	mov	sl, r8
 8007d8c:	fbb1 f3f4 	udiv	r3, r1, r4
 8007d90:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8007d94:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8007d98:	fb95 f5f0 	sdiv	r5, r5, r0
 8007d9c:	eba1 0008 	sub.w	r0, r1, r8
 8007da0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007da2:	eba1 0c03 	sub.w	ip, r1, r3
 8007da6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007daa:	fbb2 f2f4 	udiv	r2, r2, r4
 8007dae:	fb0e f403 	mul.w	r4, lr, r3
 8007db2:	0096      	lsls	r6, r2, #2
 8007db4:	fb03 f305 	mul.w	r3, r3, r5
 8007db8:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 8007dbc:	657a      	str	r2, [r7, #84]	; 0x54
 8007dbe:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 8007dc2:	653b      	str	r3, [r7, #80]	; 0x50
 8007dc4:	ea4f 098c 	mov.w	r9, ip, lsl #2
 8007dc8:	fb04 f300 	mul.w	r3, r4, r0
 8007dcc:	663e      	str	r6, [r7, #96]	; 0x60
 8007dce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007dd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007dd6:	1b9b      	subs	r3, r3, r6
 8007dd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ddc:	008b      	lsls	r3, r1, #2
 8007dde:	637b      	str	r3, [r7, #52]	; 0x34
 8007de0:	00d3      	lsls	r3, r2, #3
 8007de2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007de4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007de6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007dea:	189e      	adds	r6, r3, r2
 8007dec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f2c0 813e 	blt.w	8008072 <forward_conv2d+0x632>
 8007df6:	2100      	movs	r1, #0
 8007df8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8007dfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007dfe:	4688      	mov	r8, r1
 8007e00:	460d      	mov	r5, r1
 8007e02:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 8007e06:	f103 3cff 	add.w	ip, r3, #4294967295
 8007e0a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007e0e:	0080      	lsls	r0, r0, #2
 8007e10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007e14:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007e18:	4422      	add	r2, r4
 8007e1a:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 8007e1e:	4423      	add	r3, r4
 8007e20:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8007e24:	42a2      	cmp	r2, r4
 8007e26:	bf94      	ite	ls
 8007e28:	ebc5 0202 	rsbls	r2, r5, r2
 8007e2c:	ebc5 0204 	rsbhi	r2, r5, r4
 8007e30:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 8007e34:	eb08 0403 	add.w	r4, r8, r3
 8007e38:	1a52      	subs	r2, r2, r1
 8007e3a:	462b      	mov	r3, r5
 8007e3c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8007e40:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8007e44:	2d00      	cmp	r5, #0
 8007e46:	bf08      	it	eq
 8007e48:	4633      	moveq	r3, r6
 8007e4a:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8007e4e:	440a      	add	r2, r1
 8007e50:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
 8007e54:	42b3      	cmp	r3, r6
 8007e56:	f102 36ff 	add.w	r6, r2, #4294967295
 8007e5a:	fb00 5004 	mla	r0, r0, r4, r5
 8007e5e:	460a      	mov	r2, r1
 8007e60:	fe08 6a06 	vseleq.f32	s12, s16, s12
 8007e64:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 8007e68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e6a:	fb96 f6f1 	sdiv	r6, r6, r1
 8007e6e:	fb9c f5f1 	sdiv	r5, ip, r1
 8007e72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007e74:	440d      	add	r5, r1
 8007e76:	fb06 0112 	mls	r1, r6, r2, r0
 8007e7a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8007e7e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8007e82:	fb0e 0505 	mla	r5, lr, r5, r0
 8007e86:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8007e8a:	1b92      	subs	r2, r2, r6
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	d075      	beq.n	8007f7c <forward_conv2d+0x53c>
 8007e90:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8007e94:	fb0e f802 	mul.w	r8, lr, r2
 8007e98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e9a:	fb00 fb01 	mul.w	fp, r0, r1
 8007e9e:	2a00      	cmp	r2, #0
 8007ea0:	d06c      	beq.n	8007f7c <forward_conv2d+0x53c>
 8007ea2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ea4:	189a      	adds	r2, r3, r2
 8007ea6:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8007eaa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	633b      	str	r3, [r7, #48]	; 0x30
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007eb6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ebc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ebe:	4413      	add	r3, r2
 8007ec0:	188a      	adds	r2, r1, r2
 8007ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ec4:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8007ec8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007ecc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007ed0:	f1ba 0f00 	cmp.w	sl, #0
 8007ed4:	ecf3 7a01 	vldmia	r3!, {s15}
 8007ed8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007edc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007ee0:	f340 80c5 	ble.w	800806e <forward_conv2d+0x62e>
 8007ee4:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8007ee8:	f04f 0c00 	mov.w	ip, #0
 8007eec:	2e00      	cmp	r6, #0
 8007eee:	dd1f      	ble.n	8007f30 <forward_conv2d+0x4f0>
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	eb00 040e 	add.w	r4, r0, lr
 8007ef6:	4284      	cmp	r4, r0
 8007ef8:	d910      	bls.n	8007f1c <forward_conv2d+0x4dc>
 8007efa:	4603      	mov	r3, r0
 8007efc:	462a      	mov	r2, r5
 8007efe:	ecb3 7a01 	vldmia	r3!, {s14}
 8007f02:	ecf2 6a01 	vldmia	r2!, {s13}
 8007f06:	429c      	cmp	r4, r3
 8007f08:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007f0c:	d8f7      	bhi.n	8007efe <forward_conv2d+0x4be>
 8007f0e:	43c3      	mvns	r3, r0
 8007f10:	441c      	add	r4, r3
 8007f12:	f024 0403 	bic.w	r4, r4, #3
 8007f16:	3404      	adds	r4, #4
 8007f18:	4425      	add	r5, r4
 8007f1a:	4420      	add	r0, r4
 8007f1c:	3101      	adds	r1, #1
 8007f1e:	4448      	add	r0, r9
 8007f20:	428e      	cmp	r6, r1
 8007f22:	d1e6      	bne.n	8007ef2 <forward_conv2d+0x4b2>
 8007f24:	e004      	b.n	8007f30 <forward_conv2d+0x4f0>
 8007f26:	bf00      	nop
 8007f28:	080073c1 	.word	0x080073c1
 8007f2c:	00000000 	.word	0x00000000
 8007f30:	f10c 0c01 	add.w	ip, ip, #1
 8007f34:	4458      	add	r0, fp
 8007f36:	4445      	add	r5, r8
 8007f38:	45e2      	cmp	sl, ip
 8007f3a:	d1d7      	bne.n	8007eec <forward_conv2d+0x4ac>
 8007f3c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8007f40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f44:	441d      	add	r5, r3
 8007f46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007f4a:	ece3 7a01 	vstmia	r3!, {s15}
 8007f4e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d1b8      	bne.n	8007ecc <forward_conv2d+0x48c>
 8007f5a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8007f5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f60:	4472      	add	r2, lr
 8007f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f64:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007f68:	3301      	adds	r3, #1
 8007f6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f6e:	1a52      	subs	r2, r2, r1
 8007f70:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8007f74:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d19c      	bne.n	8007eb6 <forward_conv2d+0x476>
 8007f7c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8007f80:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007f84:	4608      	mov	r0, r1
 8007f86:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8007f8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f8c:	4410      	add	r0, r2
 8007f8e:	3301      	adds	r3, #1
 8007f90:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
 8007f94:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8007f98:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f9a:	4401      	add	r1, r0
 8007f9c:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8007fa0:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8007fa4:	1a8a      	subs	r2, r1, r2
 8007fa6:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8007faa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	f47f af18 	bne.w	8007de4 <forward_conv2d+0x3a4>
 8007fb4:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8007fb8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007fbc:	b37b      	cbz	r3, 800801e <forward_conv2d+0x5de>
 8007fbe:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 8007fc2:	2500      	movs	r5, #0
 8007fc4:	f8d7 608c 	ldr.w	r6, [r7, #140]	; 0x8c
 8007fc8:	f8d7 80e0 	ldr.w	r8, [r7, #224]	; 0xe0
 8007fcc:	46a2      	mov	sl, r4
 8007fce:	f8d7 90e8 	ldr.w	r9, [r7, #232]	; 0xe8
 8007fd2:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8007fd6:	4633      	mov	r3, r6
 8007fd8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8007fdc:	4640      	mov	r0, r8
 8007fde:	f8c1 a008 	str.w	sl, [r1, #8]
 8007fe2:	4641      	mov	r1, r8
 8007fe4:	4416      	add	r6, r2
 8007fe6:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8007fea:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8007fee:	3501      	adds	r5, #1
 8007ff0:	47a0      	blx	r4
 8007ff2:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8007ff6:	eba6 0309 	sub.w	r3, r6, r9
 8007ffa:	4492      	add	sl, r2
 8007ffc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008000:	4293      	cmp	r3, r2
 8008002:	bfa8      	it	ge
 8008004:	464e      	movge	r6, r9
 8008006:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800800a:	42ab      	cmp	r3, r5
 800800c:	d1e1      	bne.n	8007fd2 <forward_conv2d+0x592>
 800800e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008012:	69ba      	ldr	r2, [r7, #24]
 8008014:	f8c7 608c 	str.w	r6, [r7, #140]	; 0x8c
 8008018:	4413      	add	r3, r2
 800801a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800801e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8008022:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008024:	4604      	mov	r4, r0
 8008026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800802a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800802e:	699b      	ldr	r3, [r3, #24]
 8008030:	4414      	add	r4, r2
 8008032:	1a82      	subs	r2, r0, r2
 8008034:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8008038:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800803c:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8008040:	3101      	adds	r1, #1
 8008042:	68da      	ldr	r2, [r3, #12]
 8008044:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 8008048:	609a      	str	r2, [r3, #8]
 800804a:	697c      	ldr	r4, [r7, #20]
 800804c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008050:	4420      	add	r0, r4
 8008052:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8008056:	428b      	cmp	r3, r1
 8008058:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
 800805c:	f47f ae4a 	bne.w	8007cf4 <forward_conv2d+0x2b4>
 8008060:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8008064:	46bd      	mov	sp, r7
 8008066:	ecbd 8b08 	vpop	{d8-d11}
 800806a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800806e:	461a      	mov	r2, r3
 8008070:	e766      	b.n	8007f40 <forward_conv2d+0x500>
 8008072:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8008076:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800807a:	460d      	mov	r5, r1
 800807c:	4688      	mov	r8, r1
 800807e:	1853      	adds	r3, r2, r1
 8008080:	4611      	mov	r1, r2
 8008082:	fb95 f2f2 	sdiv	r2, r5, r2
 8008086:	fb01 5212 	mls	r2, r1, r2, r5
 800808a:	460c      	mov	r4, r1
 800808c:	1a8a      	subs	r2, r1, r2
 800808e:	fb92 f1f1 	sdiv	r1, r2, r1
 8008092:	fb04 2111 	mls	r1, r4, r1, r2
 8008096:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008098:	1888      	adds	r0, r1, r2
 800809a:	e6b2      	b.n	8007e02 <forward_conv2d+0x3c2>
 800809c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800809e:	2901      	cmp	r1, #1
 80080a0:	f47f ae40 	bne.w	8007d24 <forward_conv2d+0x2e4>
 80080a4:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80080a8:	2900      	cmp	r1, #0
 80080aa:	d0b8      	beq.n	800801e <forward_conv2d+0x5de>
 80080ac:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80080b0:	1ad1      	subs	r1, r2, r3
 80080b2:	f8d7 a004 	ldr.w	sl, [r7, #4]
 80080b6:	0082      	lsls	r2, r0, #2
 80080b8:	fb03 f000 	mul.w	r0, r3, r0
 80080bc:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 80080c0:	6738      	str	r0, [r7, #112]	; 0x70
 80080c2:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80080c6:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
 80080ca:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80080ce:	1a41      	subs	r1, r0, r1
 80080d0:	69f8      	ldr	r0, [r7, #28]
 80080d2:	fb00 f303 	mul.w	r3, r0, r3
 80080d6:	637b      	str	r3, [r7, #52]	; 0x34
 80080d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80080e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80080e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80080e8:	fb02 f301 	mul.w	r3, r2, r1
 80080ec:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80080f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080f2:	2300      	movs	r3, #0
 80080f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80080f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80080fe:	4619      	mov	r1, r3
 8008100:	ebc3 7283 	rsb	r2, r3, r3, lsl #30
 8008104:	633b      	str	r3, [r7, #48]	; 0x30
 8008106:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
 800810a:	0092      	lsls	r2, r2, #2
 800810c:	00db      	lsls	r3, r3, #3
 800810e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008110:	603b      	str	r3, [r7, #0]
 8008112:	008b      	lsls	r3, r1, #2
 8008114:	60bb      	str	r3, [r7, #8]
 8008116:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800811a:	2b00      	cmp	r3, #0
 800811c:	f2c0 810e 	blt.w	800833c <forward_conv2d+0x8fc>
 8008120:	2400      	movs	r4, #0
 8008122:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008124:	4621      	mov	r1, r4
 8008126:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800812a:	f8d7 6114 	ldr.w	r6, [r7, #276]	; 0x114
 800812e:	1818      	adds	r0, r3, r0
 8008130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008134:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 8008138:	18f3      	adds	r3, r6, r3
 800813a:	4420      	add	r0, r4
 800813c:	461c      	mov	r4, r3
 800813e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008142:	0080      	lsls	r0, r0, #2
 8008144:	429c      	cmp	r4, r3
 8008146:	bf28      	it	cs
 8008148:	461c      	movcs	r4, r3
 800814a:	1a64      	subs	r4, r4, r1
 800814c:	2d00      	cmp	r5, #0
 800814e:	f000 80e6 	beq.w	800831e <forward_conv2d+0x8de>
 8008152:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008156:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 800815a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800815e:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 8008162:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008166:	428d      	cmp	r5, r1
 8008168:	462a      	mov	r2, r5
 800816a:	eba6 0104 	sub.w	r1, r6, r4
 800816e:	eba3 0304 	sub.w	r3, r3, r4
 8008172:	fe48 3a23 	vseleq.f32	s7, s16, s7
 8008176:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 8008178:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 800817c:	4428      	add	r0, r5
 800817e:	f8d7 510c 	ldr.w	r5, [r7, #268]	; 0x10c
 8008182:	fb05 6e00 	mla	lr, r5, r0, r6
 8008186:	eb0e 000b 	add.w	r0, lr, fp
 800818a:	4586      	cmp	lr, r0
 800818c:	6238      	str	r0, [r7, #32]
 800818e:	f080 80a7 	bcs.w	80082e0 <forward_conv2d+0x8a0>
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	fb0b f101 	mul.w	r1, fp, r1
 8008198:	f024 0803 	bic.w	r8, r4, #3
 800819c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80081a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a2:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f000 809a 	beq.w	80082e0 <forward_conv2d+0x8a0>
 80081ac:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80081ae:	f108 33ff 	add.w	r3, r8, #4294967295
 80081b2:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80081b6:	089b      	lsrs	r3, r3, #2
 80081b8:	4401      	add	r1, r0
 80081ba:	68b8      	ldr	r0, [r7, #8]
 80081bc:	3301      	adds	r3, #1
 80081be:	1810      	adds	r0, r2, r0
 80081c0:	1a8a      	subs	r2, r1, r2
 80081c2:	613a      	str	r2, [r7, #16]
 80081c4:	fb03 f20a 	mul.w	r2, r3, sl
 80081c8:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 80081cc:	657a      	str	r2, [r7, #84]	; 0x54
 80081ce:	011a      	lsls	r2, r3, #4
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	663a      	str	r2, [r7, #96]	; 0x60
 80081d4:	653b      	str	r3, [r7, #80]	; 0x50
 80081d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80081da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081dc:	6939      	ldr	r1, [r7, #16]
 80081de:	4413      	add	r3, r2
 80081e0:	188a      	adds	r2, r1, r2
 80081e2:	60fb      	str	r3, [r7, #12]
 80081e4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80081e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80081ee:	ecf3 6a01 	vldmia	r3!, {s13}
 80081f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081f6:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80081fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80081fe:	2b00      	cmp	r3, #0
 8008200:	dd57      	ble.n	80082b2 <forward_conv2d+0x872>
 8008202:	4676      	mov	r6, lr
 8008204:	f04f 0c00 	mov.w	ip, #0
 8008208:	f1b8 0f00 	cmp.w	r8, #0
 800820c:	f340 8085 	ble.w	800831a <forward_conv2d+0x8da>
 8008210:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008214:	f109 0310 	add.w	r3, r9, #16
 8008218:	2000      	movs	r0, #0
 800821a:	18b1      	adds	r1, r6, r2
 800821c:	4632      	mov	r2, r6
 800821e:	eb02 050b 	add.w	r5, r2, fp
 8008222:	ed53 7a03 	vldr	s15, [r3, #-12]
 8008226:	ed92 4a00 	vldr	s8, [r2]
 800822a:	3004      	adds	r0, #4
 800822c:	ed95 7a00 	vldr	s14, [r5]
 8008230:	eb01 050b 	add.w	r5, r1, fp
 8008234:	ed53 4a04 	vldr	s9, [r3, #-16]
 8008238:	4540      	cmp	r0, r8
 800823a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800823e:	ed91 5a00 	vldr	s10, [r1]
 8008242:	ed53 5a02 	vldr	s11, [r3, #-8]
 8008246:	4452      	add	r2, sl
 8008248:	ed13 7a01 	vldr	s14, [r3, #-4]
 800824c:	4451      	add	r1, sl
 800824e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008252:	ed95 6a00 	vldr	s12, [r5]
 8008256:	f103 0310 	add.w	r3, r3, #16
 800825a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800825e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008262:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008266:	dbda      	blt.n	800821e <forward_conv2d+0x7de>
 8008268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800826a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800826c:	441e      	add	r6, r3
 800826e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008270:	4499      	add	r9, r3
 8008272:	42a0      	cmp	r0, r4
 8008274:	da11      	bge.n	800829a <forward_conv2d+0x85a>
 8008276:	4602      	mov	r2, r0
 8008278:	4633      	mov	r3, r6
 800827a:	4649      	mov	r1, r9
 800827c:	3201      	adds	r2, #1
 800827e:	edd3 7a00 	vldr	s15, [r3]
 8008282:	ecb1 7a01 	vldmia	r1!, {s14}
 8008286:	445b      	add	r3, fp
 8008288:	42a2      	cmp	r2, r4
 800828a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800828e:	d1f5      	bne.n	800827c <forward_conv2d+0x83c>
 8008290:	1a20      	subs	r0, r4, r0
 8008292:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 8008296:	fb00 660b 	mla	r6, r0, fp, r6
 800829a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800829e:	f10c 0c01 	add.w	ip, ip, #1
 80082a2:	441e      	add	r6, r3
 80082a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80082a8:	4499      	add	r9, r3
 80082aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80082ae:	4563      	cmp	r3, ip
 80082b0:	d1aa      	bne.n	8008208 <forward_conv2d+0x7c8>
 80082b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80082b8:	4499      	add	r9, r3
 80082ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082bc:	ece3 6a01 	vstmia	r3!, {s13}
 80082c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d18f      	bne.n	80081ea <forward_conv2d+0x7aa>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f10e 0e04 	add.w	lr, lr, #4
 80082d0:	683a      	ldr	r2, [r7, #0]
 80082d2:	1a9b      	subs	r3, r3, r2
 80082d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082d8:	6a3b      	ldr	r3, [r7, #32]
 80082da:	459e      	cmp	lr, r3
 80082dc:	f4ff af7b 	bcc.w	80081d6 <forward_conv2d+0x796>
 80082e0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80082e4:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80082e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082ea:	440a      	add	r2, r1
 80082ec:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80082f0:	3301      	adds	r3, #1
 80082f2:	4608      	mov	r0, r1
 80082f4:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80082f8:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80082fc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008300:	67bb      	str	r3, [r7, #120]	; 0x78
 8008302:	4410      	add	r0, r2
 8008304:	1a8a      	subs	r2, r1, r2
 8008306:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800830a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800830e:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8008312:	429a      	cmp	r2, r3
 8008314:	f47f aeff 	bne.w	8008116 <forward_conv2d+0x6d6>
 8008318:	e64e      	b.n	8007fb8 <forward_conv2d+0x578>
 800831a:	2000      	movs	r0, #0
 800831c:	e7a9      	b.n	8008272 <forward_conv2d+0x832>
 800831e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008322:	eef0 3a48 	vmov.f32	s7, s16
 8008326:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 800832a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800832e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008332:	1b19      	subs	r1, r3, r4
 8008334:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008338:	1b1b      	subs	r3, r3, r4
 800833a:	e71c      	b.n	8008176 <forward_conv2d+0x736>
 800833c:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8008340:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008342:	4621      	mov	r1, r4
 8008344:	191a      	adds	r2, r3, r4
 8008346:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800834a:	e6ec      	b.n	8008126 <forward_conv2d+0x6e6>
 800834c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800834e:	2801      	cmp	r0, #1
 8008350:	f47f ace8 	bne.w	8007d24 <forward_conv2d+0x2e4>
 8008354:	1ad2      	subs	r2, r2, r3
 8008356:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008358:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 800835c:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8008360:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008362:	fb00 4101 	mla	r1, r0, r1, r4
 8008366:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800836a:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800836e:	f080 818a 	bcs.w	8008686 <forward_conv2d+0xc46>
 8008372:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008376:	2a00      	cmp	r2, #0
 8008378:	f43f ae1e 	beq.w	8007fb8 <forward_conv2d+0x578>
 800837c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800837e:	f8c7 b034 	str.w	fp, [r7, #52]	; 0x34
 8008382:	fb02 f303 	mul.w	r3, r2, r3
 8008386:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008388:	663b      	str	r3, [r7, #96]	; 0x60
 800838a:	4411      	add	r1, r2
 800838c:	1a9b      	subs	r3, r3, r2
 800838e:	64f9      	str	r1, [r7, #76]	; 0x4c
 8008390:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008392:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8008396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800839a:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 800839e:	67bb      	str	r3, [r7, #120]	; 0x78
 80083a0:	2300      	movs	r3, #0
 80083a2:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80083a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083aa:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 80083ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f000 812e 	beq.w	8008614 <forward_conv2d+0xbd4>
 80083b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083ba:	ed93 6a00 	vldr	s12, [r3]
 80083be:	3304      	adds	r3, #4
 80083c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80083c2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f000 80fe 	beq.w	80085c8 <forward_conv2d+0xb88>
 80083cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083d0:	f04f 0b00 	mov.w	fp, #0
 80083d4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80083d8:	eb03 0802 	add.w	r8, r3, r2
 80083dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80083e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083ec:	673b      	str	r3, [r7, #112]	; 0x70
 80083ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80083f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80083f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f2c0 8101 	blt.w	8008602 <forward_conv2d+0xbc2>
 8008400:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8008404:	2300      	movs	r3, #0
 8008406:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008408:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800840c:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8008410:	4540      	cmp	r0, r8
 8008412:	bf94      	ite	ls
 8008414:	ebc3 0300 	rsbls	r3, r3, r0
 8008418:	ebc3 0308 	rsbhi	r3, r3, r8
 800841c:	4422      	add	r2, r4
 800841e:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8008422:	1ac0      	subs	r0, r0, r3
 8008424:	eba4 0903 	sub.w	r9, r4, r3
 8008428:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 800842c:	fb03 f304 	mul.w	r3, r3, r4
 8008430:	f8d7 411c 	ldr.w	r4, [r7, #284]	; 0x11c
 8008434:	2c00      	cmp	r4, #0
 8008436:	f340 80e1 	ble.w	80085fc <forward_conv2d+0xbbc>
 800843a:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 800843e:	f023 050f 	bic.w	r5, r3, #15
 8008442:	eef0 6a46 	vmov.f32	s13, s12
 8008446:	f04f 0e00 	mov.w	lr, #0
 800844a:	fb04 f000 	mul.w	r0, r4, r0
 800844e:	fb04 f909 	mul.w	r9, r4, r9
 8008452:	6578      	str	r0, [r7, #84]	; 0x54
 8008454:	1e68      	subs	r0, r5, #1
 8008456:	0900      	lsrs	r0, r0, #4
 8008458:	3001      	adds	r0, #1
 800845a:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800845e:	0100      	lsls	r0, r0, #4
 8008460:	6538      	str	r0, [r7, #80]	; 0x50
 8008462:	2d00      	cmp	r5, #0
 8008464:	f340 80c8 	ble.w	80085f8 <forward_conv2d+0xbb8>
 8008468:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800846c:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8008470:	2600      	movs	r6, #0
 8008472:	ed10 7a0f 	vldr	s14, [r0, #-60]	; 0xffffffc4
 8008476:	3610      	adds	r6, #16
 8008478:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 800847c:	3040      	adds	r0, #64	; 0x40
 800847e:	ed50 5a20 	vldr	s11, [r0, #-128]	; 0xffffff80
 8008482:	42ae      	cmp	r6, r5
 8008484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008488:	ed14 7a10 	vldr	s14, [r4, #-64]	; 0xffffffc0
 800848c:	ed50 2a1e 	vldr	s5, [r0, #-120]	; 0xffffff88
 8008490:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8008494:	ed14 3a1e 	vldr	s6, [r4, #-120]	; 0xffffff88
 8008498:	eee5 7a87 	vfma.f32	s15, s11, s14
 800849c:	ed54 3a1d 	vldr	s7, [r4, #-116]	; 0xffffff8c
 80084a0:	ed10 4a1d 	vldr	s8, [r0, #-116]	; 0xffffff8c
 80084a4:	ed50 4a1c 	vldr	s9, [r0, #-112]	; 0xffffff90
 80084a8:	ed14 5a1c 	vldr	s10, [r4, #-112]	; 0xffffff90
 80084ac:	ed50 5a1b 	vldr	s11, [r0, #-108]	; 0xffffff94
 80084b0:	ed14 7a1b 	vldr	s14, [r4, #-108]	; 0xffffff94
 80084b4:	eee2 7a83 	vfma.f32	s15, s5, s6
 80084b8:	ed54 ba1a 	vldr	s23, [r4, #-104]	; 0xffffff98
 80084bc:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 80084c0:	ed54 aa19 	vldr	s21, [r4, #-100]	; 0xffffff9c
 80084c4:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 80084c8:	ed50 9a18 	vldr	s19, [r0, #-96]	; 0xffffffa0
 80084cc:	ed14 9a18 	vldr	s18, [r4, #-96]	; 0xffffffa0
 80084d0:	eee3 7a84 	vfma.f32	s15, s7, s8
 80084d4:	ed50 8a17 	vldr	s17, [r0, #-92]	; 0xffffffa4
 80084d8:	ed14 0a17 	vldr	s0, [r4, #-92]	; 0xffffffa4
 80084dc:	ed54 0a16 	vldr	s1, [r4, #-88]	; 0xffffffa8
 80084e0:	ed10 1a16 	vldr	s2, [r0, #-88]	; 0xffffffa8
 80084e4:	ed54 1a15 	vldr	s3, [r4, #-84]	; 0xffffffac
 80084e8:	ed10 2a15 	vldr	s4, [r0, #-84]	; 0xffffffac
 80084ec:	eee4 7a85 	vfma.f32	s15, s9, s10
 80084f0:	ed50 2a14 	vldr	s5, [r0, #-80]	; 0xffffffb0
 80084f4:	ed14 3a14 	vldr	s6, [r4, #-80]	; 0xffffffb0
 80084f8:	ed50 3a13 	vldr	s7, [r0, #-76]	; 0xffffffb4
 80084fc:	ed14 4a13 	vldr	s8, [r4, #-76]	; 0xffffffb4
 8008500:	ed50 4a12 	vldr	s9, [r0, #-72]	; 0xffffffb8
 8008504:	ed14 5a12 	vldr	s10, [r4, #-72]	; 0xffffffb8
 8008508:	eee5 7a87 	vfma.f32	s15, s11, s14
 800850c:	ed54 5a11 	vldr	s11, [r4, #-68]	; 0xffffffbc
 8008510:	ed10 7a11 	vldr	s14, [r0, #-68]	; 0xffffffbc
 8008514:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8008518:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800851c:	eee9 7a89 	vfma.f32	s15, s19, s18
 8008520:	eee8 7a80 	vfma.f32	s15, s17, s0
 8008524:	eee0 7a81 	vfma.f32	s15, s1, s2
 8008528:	eee1 7a82 	vfma.f32	s15, s3, s4
 800852c:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008530:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008534:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008538:	eee5 7a87 	vfma.f32	s15, s11, s14
 800853c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008540:	db97      	blt.n	8008472 <forward_conv2d+0xa32>
 8008542:	4451      	add	r1, sl
 8008544:	4452      	add	r2, sl
 8008546:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008548:	4283      	cmp	r3, r0
 800854a:	dd0f      	ble.n	800856c <forward_conv2d+0xb2c>
 800854c:	4604      	mov	r4, r0
 800854e:	468c      	mov	ip, r1
 8008550:	4616      	mov	r6, r2
 8008552:	3401      	adds	r4, #1
 8008554:	ecb6 7a01 	vldmia	r6!, {s14}
 8008558:	ecfc 7a01 	vldmia	ip!, {s15}
 800855c:	42a3      	cmp	r3, r4
 800855e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008562:	d1f6      	bne.n	8008552 <forward_conv2d+0xb12>
 8008564:	1a18      	subs	r0, r3, r0
 8008566:	0080      	lsls	r0, r0, #2
 8008568:	4402      	add	r2, r0
 800856a:	4401      	add	r1, r0
 800856c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800856e:	f10e 0e01 	add.w	lr, lr, #1
 8008572:	4449      	add	r1, r9
 8008574:	4402      	add	r2, r0
 8008576:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800857a:	4570      	cmp	r0, lr
 800857c:	f47f af71 	bne.w	8008462 <forward_conv2d+0xa22>
 8008580:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8008584:	f10b 0b01 	add.w	fp, fp, #1
 8008588:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800858a:	4608      	mov	r0, r1
 800858c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008590:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8008594:	4410      	add	r0, r2
 8008596:	edc3 6a00 	vstr	s13, [r3]
 800859a:	440b      	add	r3, r1
 800859c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80085a0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 80085a4:	eba8 0802 	sub.w	r8, r8, r2
 80085a8:	4608      	mov	r0, r1
 80085aa:	673b      	str	r3, [r7, #112]	; 0x70
 80085ac:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80085b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085b2:	4418      	add	r0, r3
 80085b4:	1acb      	subs	r3, r1, r3
 80085b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80085ba:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80085be:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 80085c2:	455b      	cmp	r3, fp
 80085c4:	f47f af17 	bne.w	80083f6 <forward_conv2d+0x9b6>
 80085c8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80085cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80085ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80085d2:	440a      	add	r2, r1
 80085d4:	3301      	adds	r3, #1
 80085d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80085da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80085de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80085e2:	3204      	adds	r2, #4
 80085e4:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80085e8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80085ec:	429a      	cmp	r2, r3
 80085ee:	f47f aede 	bne.w	80083ae <forward_conv2d+0x96e>
 80085f2:	f8d7 b034 	ldr.w	fp, [r7, #52]	; 0x34
 80085f6:	e4df      	b.n	8007fb8 <forward_conv2d+0x578>
 80085f8:	2000      	movs	r0, #0
 80085fa:	e7a5      	b.n	8008548 <forward_conv2d+0xb08>
 80085fc:	eef0 6a46 	vmov.f32	s13, s12
 8008600:	e7be      	b.n	8008580 <forward_conv2d+0xb40>
 8008602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008606:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800860a:	eba8 0303 	sub.w	r3, r8, r3
 800860e:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8008612:	e6f9      	b.n	8008408 <forward_conv2d+0x9c8>
 8008614:	eeb0 6a48 	vmov.f32	s12, s16
 8008618:	e6d3      	b.n	80083c2 <forward_conv2d+0x982>
 800861a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800861e:	68ca      	ldr	r2, [r1, #12]
 8008620:	2a00      	cmp	r2, #0
 8008622:	f43f aad0 	beq.w	8007bc6 <forward_conv2d+0x186>
 8008626:	69b3      	ldr	r3, [r6, #24]
 8008628:	8818      	ldrh	r0, [r3, #0]
 800862a:	2803      	cmp	r0, #3
 800862c:	f240 8196 	bls.w	800895c <forward_conv2d+0xf1c>
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008634:	b323      	cbz	r3, 8008680 <forward_conv2d+0xc40>
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	b313      	cbz	r3, 8008680 <forward_conv2d+0xc40>
 800863a:	699c      	ldr	r4, [r3, #24]
 800863c:	462b      	mov	r3, r5
 800863e:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 8008642:	6889      	ldr	r1, [r1, #8]
 8008644:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8008648:	2800      	cmp	r0, #0
 800864a:	bf18      	it	ne
 800864c:	4605      	movne	r5, r0
 800864e:	f8c7 5108 	str.w	r5, [r7, #264]	; 0x108
 8008652:	f8d7 510c 	ldr.w	r5, [r7, #268]	; 0x10c
 8008656:	e9cd 5400 	strd	r5, r4, [sp]
 800865a:	f7ff f9a1 	bl	80079a0 <ai_dict_decompress_f32>
 800865e:	f7ff bab2 	b.w	8007bc6 <forward_conv2d+0x186>
 8008662:	2800      	cmp	r0, #0
 8008664:	f000 817d 	beq.w	8008962 <forward_conv2d+0xf22>
 8008668:	6883      	ldr	r3, [r0, #8]
 800866a:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800866e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008672:	2301      	movs	r3, #1
 8008674:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008678:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800867c:	f7ff ba6f 	b.w	8007b5e <forward_conv2d+0x11e>
 8008680:	2300      	movs	r3, #0
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	deff      	udf	#255	; 0xff
 8008686:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800868a:	f8c7 d060 	str.w	sp, [r7, #96]	; 0x60
 800868e:	320a      	adds	r2, #10
 8008690:	f022 0207 	bic.w	r2, r2, #7
 8008694:	ebad 0d02 	sub.w	sp, sp, r2
 8008698:	aa02      	add	r2, sp, #8
 800869a:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800869e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80086a2:	2a00      	cmp	r2, #0
 80086a4:	f000 8145 	beq.w	8008932 <forward_conv2d+0xef2>
 80086a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80086aa:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 80086ae:	fb02 f303 	mul.w	r3, r2, r3
 80086b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80086b4:	657b      	str	r3, [r7, #84]	; 0x54
 80086b6:	4411      	add	r1, r2
 80086b8:	1a9b      	subs	r3, r3, r2
 80086ba:	6379      	str	r1, [r7, #52]	; 0x34
 80086bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086be:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80086c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80086c6:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 80086ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80086ce:	2300      	movs	r3, #0
 80086d0:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 80086d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80086d6:	6739      	str	r1, [r7, #112]	; 0x70
 80086d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80086da:	b13b      	cbz	r3, 80086ec <forward_conv2d+0xcac>
 80086dc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80086e0:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80086e4:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80086e8:	f002 f972 	bl	800a9d0 <memcpy>
 80086ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f000 8130 	beq.w	8008956 <forward_conv2d+0xf16>
 80086f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80086f8:	ed93 6a00 	vldr	s12, [r3]
 80086fc:	3304      	adds	r3, #4
 80086fe:	673b      	str	r3, [r7, #112]	; 0x70
 8008700:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008704:	2b00      	cmp	r3, #0
 8008706:	f000 80fe 	beq.w	8008906 <forward_conv2d+0xec6>
 800870a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800870e:	f04f 0b00 	mov.w	fp, #0
 8008712:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8008716:	eb03 0802 	add.w	r8, r3, r2
 800871a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800871c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008722:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800872a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800872c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008730:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008734:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008738:	2b00      	cmp	r3, #0
 800873a:	f2c0 8103 	blt.w	8008944 <forward_conv2d+0xf04>
 800873e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8008742:	2300      	movs	r3, #0
 8008744:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008746:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800874a:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 800874e:	4540      	cmp	r0, r8
 8008750:	bf94      	ite	ls
 8008752:	ebc3 0300 	rsbls	r3, r3, r0
 8008756:	ebc3 0308 	rsbhi	r3, r3, r8
 800875a:	4422      	add	r2, r4
 800875c:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8008760:	1ac0      	subs	r0, r0, r3
 8008762:	eba4 0903 	sub.w	r9, r4, r3
 8008766:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 800876a:	fb03 f304 	mul.w	r3, r3, r4
 800876e:	f8d7 411c 	ldr.w	r4, [r7, #284]	; 0x11c
 8008772:	2c00      	cmp	r4, #0
 8008774:	f340 80e3 	ble.w	800893e <forward_conv2d+0xefe>
 8008778:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 800877c:	f023 050f 	bic.w	r5, r3, #15
 8008780:	eef0 6a46 	vmov.f32	s13, s12
 8008784:	f04f 0e00 	mov.w	lr, #0
 8008788:	fb04 f000 	mul.w	r0, r4, r0
 800878c:	fb04 f909 	mul.w	r9, r4, r9
 8008790:	6538      	str	r0, [r7, #80]	; 0x50
 8008792:	1e68      	subs	r0, r5, #1
 8008794:	0900      	lsrs	r0, r0, #4
 8008796:	3001      	adds	r0, #1
 8008798:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800879c:	0100      	lsls	r0, r0, #4
 800879e:	6338      	str	r0, [r7, #48]	; 0x30
 80087a0:	2d00      	cmp	r5, #0
 80087a2:	f340 80ca 	ble.w	800893a <forward_conv2d+0xefa>
 80087a6:	f101 0440 	add.w	r4, r1, #64	; 0x40
 80087aa:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80087ae:	2600      	movs	r6, #0
 80087b0:	ed14 7a0f 	vldr	s14, [r4, #-60]	; 0xffffffc4
 80087b4:	3610      	adds	r6, #16
 80087b6:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 80087ba:	3440      	adds	r4, #64	; 0x40
 80087bc:	ed50 5a10 	vldr	s11, [r0, #-64]	; 0xffffffc0
 80087c0:	42b5      	cmp	r5, r6
 80087c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087c6:	ed14 7a20 	vldr	s14, [r4, #-128]	; 0xffffff80
 80087ca:	ed54 2a1e 	vldr	s5, [r4, #-120]	; 0xffffff88
 80087ce:	f100 0040 	add.w	r0, r0, #64	; 0x40
 80087d2:	ed10 3a1e 	vldr	s6, [r0, #-120]	; 0xffffff88
 80087d6:	eee5 7a87 	vfma.f32	s15, s11, s14
 80087da:	ed54 3a1d 	vldr	s7, [r4, #-116]	; 0xffffff8c
 80087de:	ed10 4a1d 	vldr	s8, [r0, #-116]	; 0xffffff8c
 80087e2:	ed54 4a1c 	vldr	s9, [r4, #-112]	; 0xffffff90
 80087e6:	ed10 5a1c 	vldr	s10, [r0, #-112]	; 0xffffff90
 80087ea:	ed54 5a1b 	vldr	s11, [r4, #-108]	; 0xffffff94
 80087ee:	ed10 7a1b 	vldr	s14, [r0, #-108]	; 0xffffff94
 80087f2:	eee2 7a83 	vfma.f32	s15, s5, s6
 80087f6:	ed54 ba1a 	vldr	s23, [r4, #-104]	; 0xffffff98
 80087fa:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 80087fe:	ed54 aa19 	vldr	s21, [r4, #-100]	; 0xffffff9c
 8008802:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 8008806:	ed54 9a18 	vldr	s19, [r4, #-96]	; 0xffffffa0
 800880a:	ed10 9a18 	vldr	s18, [r0, #-96]	; 0xffffffa0
 800880e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008812:	ed50 8a17 	vldr	s17, [r0, #-92]	; 0xffffffa4
 8008816:	ed14 0a17 	vldr	s0, [r4, #-92]	; 0xffffffa4
 800881a:	ed50 0a16 	vldr	s1, [r0, #-88]	; 0xffffffa8
 800881e:	ed14 1a16 	vldr	s2, [r4, #-88]	; 0xffffffa8
 8008822:	ed50 1a15 	vldr	s3, [r0, #-84]	; 0xffffffac
 8008826:	ed14 2a15 	vldr	s4, [r4, #-84]	; 0xffffffac
 800882a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800882e:	ed54 2a14 	vldr	s5, [r4, #-80]	; 0xffffffb0
 8008832:	ed10 3a14 	vldr	s6, [r0, #-80]	; 0xffffffb0
 8008836:	ed50 3a13 	vldr	s7, [r0, #-76]	; 0xffffffb4
 800883a:	ed14 4a13 	vldr	s8, [r4, #-76]	; 0xffffffb4
 800883e:	ed54 4a12 	vldr	s9, [r4, #-72]	; 0xffffffb8
 8008842:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 8008846:	eee5 7a87 	vfma.f32	s15, s11, s14
 800884a:	ed54 5a11 	vldr	s11, [r4, #-68]	; 0xffffffbc
 800884e:	ed10 7a11 	vldr	s14, [r0, #-68]	; 0xffffffbc
 8008852:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8008856:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800885a:	eee9 7a89 	vfma.f32	s15, s19, s18
 800885e:	eee8 7a80 	vfma.f32	s15, s17, s0
 8008862:	eee0 7a81 	vfma.f32	s15, s1, s2
 8008866:	eee1 7a82 	vfma.f32	s15, s3, s4
 800886a:	eee2 7a83 	vfma.f32	s15, s5, s6
 800886e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008872:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008876:	eee5 7a87 	vfma.f32	s15, s11, s14
 800887a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800887e:	dc97      	bgt.n	80087b0 <forward_conv2d+0xd70>
 8008880:	4451      	add	r1, sl
 8008882:	4452      	add	r2, sl
 8008884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008886:	4283      	cmp	r3, r0
 8008888:	dd0f      	ble.n	80088aa <forward_conv2d+0xe6a>
 800888a:	4604      	mov	r4, r0
 800888c:	468c      	mov	ip, r1
 800888e:	4616      	mov	r6, r2
 8008890:	3401      	adds	r4, #1
 8008892:	ecb6 7a01 	vldmia	r6!, {s14}
 8008896:	ecfc 7a01 	vldmia	ip!, {s15}
 800889a:	42a3      	cmp	r3, r4
 800889c:	eee7 6a27 	vfma.f32	s13, s14, s15
 80088a0:	d1f6      	bne.n	8008890 <forward_conv2d+0xe50>
 80088a2:	1a18      	subs	r0, r3, r0
 80088a4:	0080      	lsls	r0, r0, #2
 80088a6:	4402      	add	r2, r0
 80088a8:	4401      	add	r1, r0
 80088aa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80088ac:	f10e 0e01 	add.w	lr, lr, #1
 80088b0:	4449      	add	r1, r9
 80088b2:	4402      	add	r2, r0
 80088b4:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80088b8:	4570      	cmp	r0, lr
 80088ba:	f47f af71 	bne.w	80087a0 <forward_conv2d+0xd60>
 80088be:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80088c2:	f10b 0b01 	add.w	fp, fp, #1
 80088c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088c8:	4608      	mov	r0, r1
 80088ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80088ce:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80088d2:	4410      	add	r0, r2
 80088d4:	edc3 6a00 	vstr	s13, [r3]
 80088d8:	440b      	add	r3, r1
 80088da:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80088de:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 80088e2:	eba8 0802 	sub.w	r8, r8, r2
 80088e6:	4608      	mov	r0, r1
 80088e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088ea:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80088ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088f0:	4418      	add	r0, r3
 80088f2:	1acb      	subs	r3, r1, r3
 80088f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80088f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80088fc:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 8008900:	455b      	cmp	r3, fp
 8008902:	f47f af17 	bne.w	8008734 <forward_conv2d+0xcf4>
 8008906:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800890a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800890e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008910:	440a      	add	r2, r1
 8008912:	3301      	adds	r3, #1
 8008914:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008918:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800891c:	67bb      	str	r3, [r7, #120]	; 0x78
 800891e:	3204      	adds	r2, #4
 8008920:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8008924:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008928:	429a      	cmp	r2, r3
 800892a:	f47f aed5 	bne.w	80086d8 <forward_conv2d+0xc98>
 800892e:	f8d7 b02c 	ldr.w	fp, [r7, #44]	; 0x2c
 8008932:	f8d7 d060 	ldr.w	sp, [r7, #96]	; 0x60
 8008936:	f7ff bb3f 	b.w	8007fb8 <forward_conv2d+0x578>
 800893a:	2000      	movs	r0, #0
 800893c:	e7a3      	b.n	8008886 <forward_conv2d+0xe46>
 800893e:	eef0 6a46 	vmov.f32	s13, s12
 8008942:	e7bc      	b.n	80088be <forward_conv2d+0xe7e>
 8008944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008948:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800894c:	eba8 0303 	sub.w	r3, r8, r3
 8008950:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8008954:	e6f7      	b.n	8008746 <forward_conv2d+0xd06>
 8008956:	eeb0 6a48 	vmov.f32	s12, s16
 800895a:	e6d1      	b.n	8008700 <forward_conv2d+0xcc0>
 800895c:	2300      	movs	r3, #0
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	deff      	udf	#255	; 0xff
 8008962:	2301      	movs	r3, #1
 8008964:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 8008968:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 800896c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008970:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008974:	f7ff b8f3 	b.w	8007b5e <forward_conv2d+0x11e>
 8008978:	b178      	cbz	r0, 800899a <forward_conv2d+0xf5a>
 800897a:	6882      	ldr	r2, [r0, #8]
 800897c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008980:	2301      	movs	r3, #1
 8008982:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8008986:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800898a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800898e:	f7ff b8e6 	b.w	8007b5e <forward_conv2d+0x11e>
 8008992:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8008996:	f7ff b8c3 	b.w	8007b20 <forward_conv2d+0xe0>
 800899a:	2201      	movs	r2, #1
 800899c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80089a0:	e9c7 3236 	strd	r3, r2, [r7, #216]	; 0xd8
 80089a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80089a8:	f7ff b8d9 	b.w	8007b5e <forward_conv2d+0x11e>
 80089ac:	3318      	adds	r3, #24
 80089ae:	d007      	beq.n	80089c0 <forward_conv2d+0xf80>
 80089b0:	462a      	mov	r2, r5
 80089b2:	462c      	mov	r4, r5
 80089b4:	462b      	mov	r3, r5
 80089b6:	f7ff b86d 	b.w	8007a94 <forward_conv2d+0x54>
 80089ba:	2300      	movs	r3, #0
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	deff      	udf	#255	; 0xff
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	deff      	udf	#255	; 0xff
 80089c4:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80089c8:	f7ff b853 	b.w	8007a72 <forward_conv2d+0x32>
 80089cc:	2300      	movs	r3, #0
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	deff      	udf	#255	; 0xff
 80089d2:	6853      	ldr	r3, [r2, #4]
 80089d4:	deff      	udf	#255	; 0xff
 80089d6:	2200      	movs	r2, #0
 80089d8:	f7ff b85b 	b.w	8007a92 <forward_conv2d+0x52>

080089dc <forward_conv2d_nl_pool>:
 80089dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e0:	ed2d 8b08 	vpush	{d8-d11}
 80089e4:	b0e1      	sub	sp, #388	; 0x184
 80089e6:	6983      	ldr	r3, [r0, #24]
 80089e8:	af0a      	add	r7, sp, #40	; 0x28
 80089ea:	881a      	ldrh	r2, [r3, #0]
 80089ec:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 80089f0:	2a00      	cmp	r2, #0
 80089f2:	f001 8105 	beq.w	8009c00 <forward_conv2d_nl_pool+0x1224>
 80089f6:	6859      	ldr	r1, [r3, #4]
 80089f8:	684d      	ldr	r5, [r1, #4]
 80089fa:	b105      	cbz	r5, 80089fe <forward_conv2d_nl_pool+0x22>
 80089fc:	682d      	ldr	r5, [r5, #0]
 80089fe:	2a01      	cmp	r2, #1
 8008a00:	f241 8104 	bls.w	8009c0c <forward_conv2d_nl_pool+0x1230>
 8008a04:	690a      	ldr	r2, [r1, #16]
 8008a06:	2a00      	cmp	r2, #0
 8008a08:	f001 80f7 	beq.w	8009bfa <forward_conv2d_nl_pool+0x121e>
 8008a0c:	f8d2 9000 	ldr.w	r9, [r2]
 8008a10:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8008a14:	2a02      	cmp	r2, #2
 8008a16:	f001 80f9 	beq.w	8009c0c <forward_conv2d_nl_pool+0x1230>
 8008a1a:	f8d1 c01c 	ldr.w	ip, [r1, #28]
 8008a1e:	f1bc 0f00 	cmp.w	ip, #0
 8008a22:	f001 80e3 	beq.w	8009bec <forward_conv2d_nl_pool+0x1210>
 8008a26:	f111 0218 	adds.w	r2, r1, #24
 8008a2a:	f8dc 4000 	ldr.w	r4, [ip]
 8008a2e:	d005      	beq.n	8008a3c <forward_conv2d_nl_pool+0x60>
 8008a30:	8b0a      	ldrh	r2, [r1, #24]
 8008a32:	2a01      	cmp	r2, #1
 8008a34:	f241 80e7 	bls.w	8009c06 <forward_conv2d_nl_pool+0x122a>
 8008a38:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8008a3c:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8008a40:	f8d5 b018 	ldr.w	fp, [r5, #24]
 8008a44:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8008a48:	f8db 6008 	ldr.w	r6, [fp, #8]
 8008a4c:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8008a50:	f8c7 60bc 	str.w	r6, [r7, #188]	; 0xbc
 8008a54:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8008a58:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8008a5a:	f8c7 613c 	str.w	r6, [r7, #316]	; 0x13c
 8008a5e:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8008a62:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8008a66:	f8c7 6094 	str.w	r6, [r7, #148]	; 0x94
 8008a6a:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8008a6e:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8008a72:	f8c7 614c 	str.w	r6, [r7, #332]	; 0x14c
 8008a76:	f8de 6004 	ldr.w	r6, [lr, #4]
 8008a7a:	f8c7 6138 	str.w	r6, [r7, #312]	; 0x138
 8008a7e:	f8de 600c 	ldr.w	r6, [lr, #12]
 8008a82:	f8c7 60c4 	str.w	r6, [r7, #196]	; 0xc4
 8008a86:	f8de 6008 	ldr.w	r6, [lr, #8]
 8008a8a:	f8c7 6098 	str.w	r6, [r7, #152]	; 0x98
 8008a8e:	682e      	ldr	r6, [r5, #0]
 8008a90:	f8c7 6148 	str.w	r6, [r7, #328]	; 0x148
 8008a94:	686e      	ldr	r6, [r5, #4]
 8008a96:	68ad      	ldr	r5, [r5, #8]
 8008a98:	f8c7 6140 	str.w	r6, [r7, #320]	; 0x140
 8008a9c:	f8da 6004 	ldr.w	r6, [sl, #4]
 8008aa0:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 8008aa4:	f8da 6008 	ldr.w	r6, [sl, #8]
 8008aa8:	f8c7 6100 	str.w	r6, [r7, #256]	; 0x100
 8008aac:	6d46      	ldr	r6, [r0, #84]	; 0x54
 8008aae:	6836      	ldr	r6, [r6, #0]
 8008ab0:	f8c7 6134 	str.w	r6, [r7, #308]	; 0x134
 8008ab4:	6d46      	ldr	r6, [r0, #84]	; 0x54
 8008ab6:	6876      	ldr	r6, [r6, #4]
 8008ab8:	647e      	str	r6, [r7, #68]	; 0x44
 8008aba:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8008abe:	f8c7 6128 	str.w	r6, [r7, #296]	; 0x128
 8008ac2:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8008ac4:	f8c7 6130 	str.w	r6, [r7, #304]	; 0x130
 8008ac8:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8008aca:	f8c7 6150 	str.w	r6, [r7, #336]	; 0x150
 8008ace:	69c6      	ldr	r6, [r0, #28]
 8008ad0:	f8c7 6124 	str.w	r6, [r7, #292]	; 0x124
 8008ad4:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8008ad6:	64fe      	str	r6, [r7, #76]	; 0x4c
 8008ad8:	6c86      	ldr	r6, [r0, #72]	; 0x48
 8008ada:	64be      	str	r6, [r7, #72]	; 0x48
 8008adc:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 8008ade:	e9d0 ba0c 	ldrd	fp, sl, [r0, #48]	; 0x30
 8008ae2:	f8c7 60c0 	str.w	r6, [r7, #192]	; 0xc0
 8008ae6:	2a00      	cmp	r2, #0
 8008ae8:	f001 807c 	beq.w	8009be4 <forward_conv2d_nl_pool+0x1208>
 8008aec:	6992      	ldr	r2, [r2, #24]
 8008aee:	6892      	ldr	r2, [r2, #8]
 8008af0:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8008af4:	4680      	mov	r8, r0
 8008af6:	6a00      	ldr	r0, [r0, #32]
 8008af8:	2900      	cmp	r1, #0
 8008afa:	f001 8056 	beq.w	8009baa <forward_conv2d_nl_pool+0x11ce>
 8008afe:	698a      	ldr	r2, [r1, #24]
 8008b00:	2a00      	cmp	r2, #0
 8008b02:	f001 8047 	beq.w	8009b94 <forward_conv2d_nl_pool+0x11b8>
 8008b06:	694b      	ldr	r3, [r1, #20]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008b0e:	6893      	ldr	r3, [r2, #8]
 8008b10:	e9d2 0100 	ldrd	r0, r1, [r2]
 8008b14:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008b18:	f001 ff08 	bl	800a92c <ai_array_get_byte_size>
 8008b1c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8008b20:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8008b24:	881a      	ldrh	r2, [r3, #0]
 8008b26:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 8008b2a:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8008b2e:	f8b7 1148 	ldrh.w	r1, [r7, #328]	; 0x148
 8008b32:	fa1f f28a 	uxth.w	r2, sl
 8008b36:	f8d7 6100 	ldr.w	r6, [r7, #256]	; 0x100
 8008b3a:	fa11 f085 	uxtah	r0, r1, r5
 8008b3e:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8008b42:	f8b7 1150 	ldrh.w	r1, [r7, #336]	; 0x150
 8008b46:	1e74      	subs	r4, r6, #1
 8008b48:	f8dc e000 	ldr.w	lr, [ip]
 8008b4c:	3a01      	subs	r2, #1
 8008b4e:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8008b52:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8008b56:	fb04 6402 	mla	r4, r4, r2, r6
 8008b5a:	f3ce 15c6 	ubfx	r5, lr, #7, #7
 8008b5e:	f8d7 6144 	ldr.w	r6, [r7, #324]	; 0x144
 8008b62:	4408      	add	r0, r1
 8008b64:	f3ce 5141 	ubfx	r1, lr, #21, #2
 8008b68:	fa1f f28b 	uxth.w	r2, fp
 8008b6c:	63fc      	str	r4, [r7, #60]	; 0x3c
 8008b6e:	fa45 f101 	asr.w	r1, r5, r1
 8008b72:	f3ce 4543 	ubfx	r5, lr, #17, #4
 8008b76:	eba0 0e04 	sub.w	lr, r0, r4
 8008b7a:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
 8008b7e:	3a01      	subs	r2, #1
 8008b80:	1e70      	subs	r0, r6, #1
 8008b82:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 8008b86:	b289      	uxth	r1, r1
 8008b88:	fb00 6602 	mla	r6, r0, r2, r6
 8008b8c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8008b90:	4a85      	ldr	r2, [pc, #532]	; (8008da8 <forward_conv2d_nl_pool+0x3cc>)
 8008b92:	f8c7 6090 	str.w	r6, [r7, #144]	; 0x90
 8008b96:	4606      	mov	r6, r0
 8008b98:	f8b7 4140 	ldrh.w	r4, [r7, #320]	; 0x140
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	bf08      	it	eq
 8008ba0:	4616      	moveq	r6, r2
 8008ba2:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8008ba6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008baa:	2d04      	cmp	r5, #4
 8008bac:	6438      	str	r0, [r7, #64]	; 0x40
 8008bae:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
 8008bb2:	f8c7 4104 	str.w	r4, [r7, #260]	; 0x104
 8008bb6:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 8008bba:	f8c7 60d0 	str.w	r6, [r7, #208]	; 0xd0
 8008bbe:	fbbe f0f2 	udiv	r0, lr, r2
 8008bc2:	f100 0201 	add.w	r2, r0, #1
 8008bc6:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8008bca:	f000 837b 	beq.w	80092c4 <forward_conv2d_nl_pool+0x8e8>
 8008bce:	2d08      	cmp	r5, #8
 8008bd0:	f000 8378 	beq.w	80092c4 <forward_conv2d_nl_pool+0x8e8>
 8008bd4:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8008bd8:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8008bdc:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 8008be0:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8008be4:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8008be8:	2a03      	cmp	r2, #3
 8008bea:	f241 800f 	bls.w	8009c0c <forward_conv2d_nl_pool+0x1230>
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	f000 8364 	beq.w	80092c0 <forward_conv2d_nl_pool+0x8e4>
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8008bfe:	68da      	ldr	r2, [r3, #12]
 8008c00:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8008c04:	4249      	negs	r1, r1
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	6896      	ldr	r6, [r2, #8]
 8008c0a:	6898      	ldr	r0, [r3, #8]
 8008c0c:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8008c10:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 8008c14:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8008c18:	f8c7 6148 	str.w	r6, [r7, #328]	; 0x148
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	f000 82da 	beq.w	80091d6 <forward_conv2d_nl_pool+0x7fa>
 8008c22:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008c26:	fa0f fc8b 	sxth.w	ip, fp
 8008c2a:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 8008c2e:	f8d7 50c0 	ldr.w	r5, [r7, #192]	; 0xc0
 8008c32:	fb03 f200 	mul.w	r2, r3, r0
 8008c36:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8008c3a:	00ab      	lsls	r3, r5, #2
 8008c3c:	f8d7 5104 	ldr.w	r5, [r7, #260]	; 0x104
 8008c40:	f8c7 c0e8 	str.w	ip, [r7, #232]	; 0xe8
 8008c44:	008c      	lsls	r4, r1, #2
 8008c46:	426d      	negs	r5, r5
 8008c48:	fb01 fc02 	mul.w	ip, r1, r2
 8008c4c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008c50:	f8c7 50fc 	str.w	r5, [r7, #252]	; 0xfc
 8008c54:	f8d7 5138 	ldr.w	r5, [r7, #312]	; 0x138
 8008c58:	f8c7 c088 	str.w	ip, [r7, #136]	; 0x88
 8008c5c:	fa0f fc8a 	sxth.w	ip, sl
 8008c60:	fb05 f803 	mul.w	r8, r5, r3
 8008c64:	462b      	mov	r3, r5
 8008c66:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 8008c6a:	00ad      	lsls	r5, r5, #2
 8008c6c:	fb02 f203 	mul.w	r2, r2, r3
 8008c70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c74:	fb04 f000 	mul.w	r0, r4, r0
 8008c78:	ed9f 8a4c 	vldr	s16, [pc, #304]	; 8008dac <forward_conv2d_nl_pool+0x3d0>
 8008c7c:	f8c7 c0cc 	str.w	ip, [r7, #204]	; 0xcc
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	f8b7 c130 	ldrh.w	ip, [r7, #304]	; 0x130
 8008c86:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 8008c8a:	f8c7 c0ec 	str.w	ip, [r7, #236]	; 0xec
 8008c8e:	f04f 0c00 	mov.w	ip, #0
 8008c92:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8008c96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008c9e:	f8c7 5114 	str.w	r5, [r7, #276]	; 0x114
 8008ca2:	460d      	mov	r5, r1
 8008ca4:	f8c7 c0e0 	str.w	ip, [r7, #224]	; 0xe0
 8008ca8:	469c      	mov	ip, r3
 8008caa:	fb00 f101 	mul.w	r1, r0, r1
 8008cae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008cb2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8008cb6:	fb0c fc03 	mul.w	ip, ip, r3
 8008cba:	008b      	lsls	r3, r1, #2
 8008cbc:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8008cc0:	f8c7 c034 	str.w	ip, [r7, #52]	; 0x34
 8008cc4:	633b      	str	r3, [r7, #48]	; 0x30
 8008cc6:	468e      	mov	lr, r1
 8008cc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008ccc:	fb06 fc08 	mul.w	ip, r6, r8
 8008cd0:	f8c7 c054 	str.w	ip, [r7, #84]	; 0x54
 8008cd4:	469c      	mov	ip, r3
 8008cd6:	0093      	lsls	r3, r2, #2
 8008cd8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8008cdc:	fb0c fc01 	mul.w	ip, ip, r1
 8008ce0:	653b      	str	r3, [r7, #80]	; 0x50
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 8008ce8:	fb00 fc02 	mul.w	ip, r0, r2
 8008cec:	2000      	movs	r0, #0
 8008cee:	f8c7 c024 	str.w	ip, [r7, #36]	; 0x24
 8008cf2:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
 8008cf6:	fb01 f005 	mul.w	r0, r1, r5
 8008cfa:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 8008cfe:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8008d02:	6238      	str	r0, [r7, #32]
 8008d04:	4618      	mov	r0, r3
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8008d0c:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8008d10:	61bb      	str	r3, [r7, #24]
 8008d12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008d16:	469c      	mov	ip, r3
 8008d18:	4623      	mov	r3, r4
 8008d1a:	fb05 f303 	mul.w	r3, r5, r3
 8008d1e:	f8d7 5114 	ldr.w	r5, [r7, #276]	; 0x114
 8008d22:	fb0c f404 	mul.w	r4, ip, r4
 8008d26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d2c:	66bc      	str	r4, [r7, #104]	; 0x68
 8008d2e:	0114      	lsls	r4, r2, #4
 8008d30:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8008d34:	46a2      	mov	sl, r4
 8008d36:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d38:	fb05 f306 	mul.w	r3, r5, r6
 8008d3c:	f8d7 50e4 	ldr.w	r5, [r7, #228]	; 0xe4
 8008d40:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d42:	4603      	mov	r3, r0
 8008d44:	fb00 f005 	mul.w	r0, r0, r5
 8008d48:	fb03 f301 	mul.w	r3, r3, r1
 8008d4c:	6778      	str	r0, [r7, #116]	; 0x74
 8008d4e:	00d0      	lsls	r0, r2, #3
 8008d50:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008d54:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8008d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d5c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8008d60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008d64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008d68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	f340 81ca 	ble.w	8009106 <forward_conv2d_nl_pool+0x72a>
 8008d72:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8008d76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008d7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008d7e:	2900      	cmp	r1, #0
 8008d80:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008d82:	441a      	add	r2, r3
 8008d84:	bfb4      	ite	lt
 8008d86:	2100      	movlt	r1, #0
 8008d88:	2300      	movge	r3, #0
 8008d8a:	4282      	cmp	r2, r0
 8008d8c:	bf28      	it	cs
 8008d8e:	4602      	movcs	r2, r0
 8008d90:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8008d94:	2801      	cmp	r0, #1
 8008d96:	f000 8403 	beq.w	80095a0 <forward_conv2d_nl_pool+0xbc4>
 8008d9a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8008d9e:	4281      	cmp	r1, r0
 8008da0:	f000 82be 	beq.w	8009320 <forward_conv2d_nl_pool+0x944>
 8008da4:	e004      	b.n	8008db0 <forward_conv2d_nl_pool+0x3d4>
 8008da6:	bf00      	nop
 8008da8:	080073c1 	.word	0x080073c1
 8008dac:	00000000 	.word	0x00000000
 8008db0:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8008db4:	2900      	cmp	r1, #0
 8008db6:	f000 8199 	beq.w	80090ec <forward_conv2d_nl_pool+0x710>
 8008dba:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8008dbe:	1ad2      	subs	r2, r2, r3
 8008dc0:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008dc4:	181d      	adds	r5, r3, r0
 8008dc6:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8008dca:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 8008dce:	3d01      	subs	r5, #1
 8008dd0:	fb93 f1f0 	sdiv	r1, r3, r0
 8008dd4:	fb00 3111 	mls	r1, r0, r1, r3
 8008dd8:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 8008ddc:	2400      	movs	r4, #0
 8008dde:	1a41      	subs	r1, r0, r1
 8008de0:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
 8008de4:	4604      	mov	r4, r0
 8008de6:	fb91 f0f0 	sdiv	r0, r1, r0
 8008dea:	fb04 1110 	mls	r1, r4, r0, r1
 8008dee:	4620      	mov	r0, r4
 8008df0:	1a52      	subs	r2, r2, r1
 8008df2:	4419      	add	r1, r3
 8008df4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008df8:	4422      	add	r2, r4
 8008dfa:	f8d7 4124 	ldr.w	r4, [r7, #292]	; 0x124
 8008dfe:	fb03 f301 	mul.w	r3, r3, r1
 8008e02:	3a01      	subs	r2, #1
 8008e04:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e06:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008e0a:	fb92 f8f0 	sdiv	r8, r2, r0
 8008e0e:	4619      	mov	r1, r3
 8008e10:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8008e14:	fbb1 f3f4 	udiv	r3, r1, r4
 8008e18:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8008e1c:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8008e20:	fb95 f5f0 	sdiv	r5, r5, r0
 8008e24:	eba1 0008 	sub.w	r0, r1, r8
 8008e28:	6a39      	ldr	r1, [r7, #32]
 8008e2a:	eba1 0c03 	sub.w	ip, r1, r3
 8008e2e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008e32:	fbb2 f2f4 	udiv	r2, r2, r4
 8008e36:	fb0e f403 	mul.w	r4, lr, r3
 8008e3a:	0096      	lsls	r6, r2, #2
 8008e3c:	fb03 f305 	mul.w	r3, r3, r5
 8008e40:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 8008e44:	667a      	str	r2, [r7, #100]	; 0x64
 8008e46:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 8008e4a:	663b      	str	r3, [r7, #96]	; 0x60
 8008e4c:	ea4f 098c 	mov.w	r9, ip, lsl #2
 8008e50:	fb04 f300 	mul.w	r3, r4, r0
 8008e54:	673e      	str	r6, [r7, #112]	; 0x70
 8008e56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e5a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8008e5e:	1b9b      	subs	r3, r3, r6
 8008e60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008e64:	008b      	lsls	r3, r1, #2
 8008e66:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 8008e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e6c:	46c2      	mov	sl, r8
 8008e6e:	00d3      	lsls	r3, r2, #3
 8008e70:	61fb      	str	r3, [r7, #28]
 8008e72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e74:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8008e78:	189e      	adds	r6, r3, r2
 8008e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	f2c0 811f 	blt.w	80090c2 <forward_conv2d_nl_pool+0x6e6>
 8008e84:	2100      	movs	r1, #0
 8008e86:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8008e88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008e8c:	4688      	mov	r8, r1
 8008e8e:	460d      	mov	r5, r1
 8008e90:	f8d7 40f0 	ldr.w	r4, [r7, #240]	; 0xf0
 8008e94:	f103 3cff 	add.w	ip, r3, #4294967295
 8008e98:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008e9c:	0080      	lsls	r0, r0, #2
 8008e9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ea2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008ea6:	4422      	add	r2, r4
 8008ea8:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8008eac:	4423      	add	r3, r4
 8008eae:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8008eb2:	42a2      	cmp	r2, r4
 8008eb4:	bf94      	ite	ls
 8008eb6:	ebc5 0202 	rsbls	r2, r5, r2
 8008eba:	ebc5 0204 	rsbhi	r2, r5, r4
 8008ebe:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 8008ec2:	eb08 0403 	add.w	r4, r8, r3
 8008ec6:	1a52      	subs	r2, r2, r1
 8008ec8:	462b      	mov	r3, r5
 8008eca:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8008ece:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8008ed2:	2d00      	cmp	r5, #0
 8008ed4:	bf08      	it	eq
 8008ed6:	4633      	moveq	r3, r6
 8008ed8:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8008edc:	440a      	add	r2, r1
 8008ede:	f8d7 50bc 	ldr.w	r5, [r7, #188]	; 0xbc
 8008ee2:	42b3      	cmp	r3, r6
 8008ee4:	f102 36ff 	add.w	r6, r2, #4294967295
 8008ee8:	fb00 5004 	mla	r0, r0, r4, r5
 8008eec:	460a      	mov	r2, r1
 8008eee:	fe08 6a06 	vseleq.f32	s12, s16, s12
 8008ef2:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 8008ef6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ef8:	fb96 f6f1 	sdiv	r6, r6, r1
 8008efc:	fb9c f5f1 	sdiv	r5, ip, r1
 8008f00:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008f02:	440d      	add	r5, r1
 8008f04:	fb06 0112 	mls	r1, r6, r2, r0
 8008f08:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8008f0c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8008f10:	fb0e 0505 	mla	r5, lr, r5, r0
 8008f14:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8008f18:	1b92      	subs	r2, r2, r6
 8008f1a:	2800      	cmp	r0, #0
 8008f1c:	d06f      	beq.n	8008ffe <forward_conv2d_nl_pool+0x622>
 8008f1e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8008f22:	fb0e f802 	mul.w	r8, lr, r2
 8008f26:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008f28:	fb00 fb01 	mul.w	fp, r0, r1
 8008f2c:	2a00      	cmp	r2, #0
 8008f2e:	d066      	beq.n	8008ffe <forward_conv2d_nl_pool+0x622>
 8008f30:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008f32:	189a      	adds	r2, r3, r2
 8008f34:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8008f38:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8008f3c:	1ad3      	subs	r3, r2, r3
 8008f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f40:	2300      	movs	r3, #0
 8008f42:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f44:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8008f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f4c:	4413      	add	r3, r2
 8008f4e:	188a      	adds	r2, r1, r2
 8008f50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f52:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8008f56:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8008f5a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008f5e:	f1ba 0f00 	cmp.w	sl, #0
 8008f62:	ecf3 7a01 	vldmia	r3!, {s15}
 8008f66:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8008f6a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008f6e:	f340 80a6 	ble.w	80090be <forward_conv2d_nl_pool+0x6e2>
 8008f72:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8008f76:	f04f 0c00 	mov.w	ip, #0
 8008f7a:	2e00      	cmp	r6, #0
 8008f7c:	dd19      	ble.n	8008fb2 <forward_conv2d_nl_pool+0x5d6>
 8008f7e:	2100      	movs	r1, #0
 8008f80:	eb00 040e 	add.w	r4, r0, lr
 8008f84:	4284      	cmp	r4, r0
 8008f86:	d910      	bls.n	8008faa <forward_conv2d_nl_pool+0x5ce>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	462a      	mov	r2, r5
 8008f8c:	ecb3 7a01 	vldmia	r3!, {s14}
 8008f90:	ecf2 6a01 	vldmia	r2!, {s13}
 8008f94:	429c      	cmp	r4, r3
 8008f96:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008f9a:	d8f7      	bhi.n	8008f8c <forward_conv2d_nl_pool+0x5b0>
 8008f9c:	43c3      	mvns	r3, r0
 8008f9e:	441c      	add	r4, r3
 8008fa0:	f024 0403 	bic.w	r4, r4, #3
 8008fa4:	3404      	adds	r4, #4
 8008fa6:	4425      	add	r5, r4
 8008fa8:	4420      	add	r0, r4
 8008faa:	3101      	adds	r1, #1
 8008fac:	4448      	add	r0, r9
 8008fae:	428e      	cmp	r6, r1
 8008fb0:	d1e6      	bne.n	8008f80 <forward_conv2d_nl_pool+0x5a4>
 8008fb2:	f10c 0c01 	add.w	ip, ip, #1
 8008fb6:	4458      	add	r0, fp
 8008fb8:	4445      	add	r5, r8
 8008fba:	45e2      	cmp	sl, ip
 8008fbc:	d1dd      	bne.n	8008f7a <forward_conv2d_nl_pool+0x59e>
 8008fbe:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8008fc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008fc6:	441d      	add	r5, r3
 8008fc8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008fcc:	ece3 7a01 	vstmia	r3!, {s15}
 8008fd0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8008fd4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d1be      	bne.n	8008f5a <forward_conv2d_nl_pool+0x57e>
 8008fdc:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8008fe0:	69f9      	ldr	r1, [r7, #28]
 8008fe2:	4472      	add	r2, lr
 8008fe4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fe6:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8008fea:	3301      	adds	r3, #1
 8008fec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008fee:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ff0:	1a52      	subs	r2, r2, r1
 8008ff2:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8008ff6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d1a2      	bne.n	8008f44 <forward_conv2d_nl_pool+0x568>
 8008ffe:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8009002:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009006:	4608      	mov	r0, r1
 8009008:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800900c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009010:	4410      	add	r0, r2
 8009012:	3301      	adds	r3, #1
 8009014:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8009018:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800901c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009020:	4401      	add	r1, r0
 8009022:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8009026:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800902a:	1a8a      	subs	r2, r1, r2
 800902c:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8009030:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8009034:	429a      	cmp	r2, r3
 8009036:	f47f af1c 	bne.w	8008e72 <forward_conv2d_nl_pool+0x496>
 800903a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800903e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009042:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8009046:	699b      	ldr	r3, [r3, #24]
 8009048:	2a00      	cmp	r2, #0
 800904a:	f000 8167 	beq.w	800931c <forward_conv2d_nl_pool+0x940>
 800904e:	2400      	movs	r4, #0
 8009050:	f8d7 509c 	ldr.w	r5, [r7, #156]	; 0x9c
 8009054:	f8d7 6150 	ldr.w	r6, [r7, #336]	; 0x150
 8009058:	f8d7 8134 	ldr.w	r8, [r7, #308]	; 0x134
 800905c:	f8d7 910c 	ldr.w	r9, [r7, #268]	; 0x10c
 8009060:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 8009064:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 8009068:	4641      	mov	r1, r8
 800906a:	609e      	str	r6, [r3, #8]
 800906c:	4640      	mov	r0, r8
 800906e:	462b      	mov	r3, r5
 8009070:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8009074:	4425      	add	r5, r4
 8009076:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 800907a:	47a0      	blx	r4
 800907c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8009080:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009084:	eba5 0009 	sub.w	r0, r5, r9
 8009088:	6859      	ldr	r1, [r3, #4]
 800908a:	4416      	add	r6, r2
 800908c:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 8009090:	0089      	lsls	r1, r1, #2
 8009092:	68da      	ldr	r2, [r3, #12]
 8009094:	42a0      	cmp	r0, r4
 8009096:	bfa8      	it	ge
 8009098:	464d      	movge	r5, r9
 800909a:	1850      	adds	r0, r2, r1
 800909c:	4286      	cmp	r6, r0
 800909e:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80090a2:	bf28      	it	cs
 80090a4:	1a76      	subcs	r6, r6, r1
 80090a6:	3001      	adds	r0, #1
 80090a8:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 80090ac:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
 80090b0:	4281      	cmp	r1, r0
 80090b2:	d1d7      	bne.n	8009064 <forward_conv2d_nl_pool+0x688>
 80090b4:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
 80090b8:	f8c7 6150 	str.w	r6, [r7, #336]	; 0x150
 80090bc:	e01a      	b.n	80090f4 <forward_conv2d_nl_pool+0x718>
 80090be:	461a      	mov	r2, r3
 80090c0:	e77f      	b.n	8008fc2 <forward_conv2d_nl_pool+0x5e6>
 80090c2:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80090c6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80090ca:	460d      	mov	r5, r1
 80090cc:	4688      	mov	r8, r1
 80090ce:	1853      	adds	r3, r2, r1
 80090d0:	4611      	mov	r1, r2
 80090d2:	fb95 f2f2 	sdiv	r2, r5, r2
 80090d6:	fb01 5212 	mls	r2, r1, r2, r5
 80090da:	460c      	mov	r4, r1
 80090dc:	1a8a      	subs	r2, r1, r2
 80090de:	fb92 f1f1 	sdiv	r1, r2, r1
 80090e2:	fb04 2111 	mls	r1, r4, r1, r2
 80090e6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80090e8:	1888      	adds	r0, r1, r2
 80090ea:	e6d1      	b.n	8008e90 <forward_conv2d_nl_pool+0x4b4>
 80090ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80090f0:	699b      	ldr	r3, [r3, #24]
 80090f2:	68da      	ldr	r2, [r3, #12]
 80090f4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80090f8:	609a      	str	r2, [r3, #8]
 80090fa:	3101      	adds	r1, #1
 80090fc:	b20b      	sxth	r3, r1
 80090fe:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8009102:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009106:	3b01      	subs	r3, #1
 8009108:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800910c:	f100 808b 	bmi.w	8009226 <forward_conv2d_nl_pool+0x84a>
 8009110:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009114:	f8d7 5140 	ldr.w	r5, [r7, #320]	; 0x140
 8009118:	42ab      	cmp	r3, r5
 800911a:	d869      	bhi.n	80091f0 <forward_conv2d_nl_pool+0x814>
 800911c:	f8d7 90c0 	ldr.w	r9, [r7, #192]	; 0xc0
 8009120:	b29c      	uxth	r4, r3
 8009122:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009126:	2101      	movs	r1, #1
 8009128:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800912c:	6998      	ldr	r0, [r3, #24]
 800912e:	fa1f f389 	uxth.w	r3, r9
 8009132:	9401      	str	r4, [sp, #4]
 8009134:	1aa2      	subs	r2, r4, r2
 8009136:	1aee      	subs	r6, r5, r3
 8009138:	f8d7 50b4 	ldr.w	r5, [r7, #180]	; 0xb4
 800913c:	f8b7 4098 	ldrh.w	r4, [r7, #152]	; 0x98
 8009140:	b292      	uxth	r2, r2
 8009142:	9508      	str	r5, [sp, #32]
 8009144:	b236      	sxth	r6, r6
 8009146:	f8b7 5048 	ldrh.w	r5, [r7, #72]	; 0x48
 800914a:	9305      	str	r3, [sp, #20]
 800914c:	f8d7 808c 	ldr.w	r8, [r7, #140]	; 0x8c
 8009150:	9107      	str	r1, [sp, #28]
 8009152:	fa1f f388 	uxth.w	r3, r8
 8009156:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 800915a:	9406      	str	r4, [sp, #24]
 800915c:	f8b7 404c 	ldrh.w	r4, [r7, #76]	; 0x4c
 8009160:	9504      	str	r5, [sp, #16]
 8009162:	f8c7 6140 	str.w	r6, [r7, #320]	; 0x140
 8009166:	9303      	str	r3, [sp, #12]
 8009168:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 800916c:	9102      	str	r1, [sp, #8]
 800916e:	f8b7 1148 	ldrh.w	r1, [r7, #328]	; 0x148
 8009172:	9400      	str	r4, [sp, #0]
 8009174:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 8009178:	6c3e      	ldr	r6, [r7, #64]	; 0x40
 800917a:	3401      	adds	r4, #1
 800917c:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8009180:	47b0      	blx	r6
 8009182:	f8d7 5120 	ldr.w	r5, [r7, #288]	; 0x120
 8009186:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800918a:	fa0f f389 	sxth.w	r3, r9
 800918e:	462e      	mov	r6, r5
 8009190:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8009192:	688a      	ldr	r2, [r1, #8]
 8009194:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8009198:	442a      	add	r2, r5
 800919a:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 800919e:	4406      	add	r6, r0
 80091a0:	1a28      	subs	r0, r5, r0
 80091a2:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 80091a4:	f8c7 6120 	str.w	r6, [r7, #288]	; 0x120
 80091a8:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 80091ac:	4640      	mov	r0, r8
 80091ae:	608a      	str	r2, [r1, #8]
 80091b0:	1ac3      	subs	r3, r0, r3
 80091b2:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 80091b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80091ba:	4428      	add	r0, r5
 80091bc:	b21b      	sxth	r3, r3
 80091be:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 80091c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80091c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80091ca:	42a3      	cmp	r3, r4
 80091cc:	f63f adcc 	bhi.w	8008d68 <forward_conv2d_nl_pool+0x38c>
 80091d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	68da      	ldr	r2, [r3, #12]
 80091d8:	609a      	str	r2, [r3, #8]
 80091da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80091de:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 80091e2:	68d3      	ldr	r3, [r2, #12]
 80091e4:	6093      	str	r3, [r2, #8]
 80091e6:	46bd      	mov	sp, r7
 80091e8:	ecbd 8b08 	vpop	{d8-d11}
 80091ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80091f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091f8:	4611      	mov	r1, r2
 80091fa:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80091fe:	4419      	add	r1, r3
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009204:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009208:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800920c:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8009210:	4413      	add	r3, r2
 8009212:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009216:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800921a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800921e:	4293      	cmp	r3, r2
 8009220:	f63f ada2 	bhi.w	8008d68 <forward_conv2d_nl_pool+0x38c>
 8009224:	e7d4      	b.n	80091d0 <forward_conv2d_nl_pool+0x7f4>
 8009226:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800922a:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800922e:	6999      	ldr	r1, [r3, #24]
 8009230:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8009234:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009236:	fb02 0213 	mls	r2, r2, r3, r0
 800923a:	68c8      	ldr	r0, [r1, #12]
 800923c:	684b      	ldr	r3, [r1, #4]
 800923e:	4290      	cmp	r0, r2
 8009240:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8009244:	bf88      	it	hi
 8009246:	18d2      	addhi	r2, r2, r3
 8009248:	18c1      	adds	r1, r0, r3
 800924a:	4290      	cmp	r0, r2
 800924c:	d216      	bcs.n	800927c <forward_conv2d_nl_pool+0x8a0>
 800924e:	f9b7 00b8 	ldrsh.w	r0, [r7, #184]	; 0xb8
 8009252:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8009256:	42a0      	cmp	r0, r4
 8009258:	d010      	beq.n	800927c <forward_conv2d_nl_pool+0x8a0>
 800925a:	428a      	cmp	r2, r1
 800925c:	d20e      	bcs.n	800927c <forward_conv2d_nl_pool+0x8a0>
 800925e:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8009262:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 8009266:	f852 3b04 	ldr.w	r3, [r2], #4
 800926a:	f840 3b04 	str.w	r3, [r0], #4
 800926e:	69a1      	ldr	r1, [r4, #24]
 8009270:	684b      	ldr	r3, [r1, #4]
 8009272:	68c9      	ldr	r1, [r1, #12]
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	4419      	add	r1, r3
 8009278:	4291      	cmp	r1, r2
 800927a:	d8f4      	bhi.n	8009266 <forward_conv2d_nl_pool+0x88a>
 800927c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8009280:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 8009284:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8009286:	4420      	add	r0, r4
 8009288:	f8d7 4150 	ldr.w	r4, [r7, #336]	; 0x150
 800928c:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8009290:	442c      	add	r4, r5
 8009292:	f8d7 50c0 	ldr.w	r5, [r7, #192]	; 0xc0
 8009296:	1a80      	subs	r0, r0, r2
 8009298:	442a      	add	r2, r5
 800929a:	428c      	cmp	r4, r1
 800929c:	b200      	sxth	r0, r0
 800929e:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 80092a2:	b212      	sxth	r2, r2
 80092a4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
 80092a8:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 80092ac:	4622      	mov	r2, r4
 80092ae:	f4ff af2f 	bcc.w	8009110 <forward_conv2d_nl_pool+0x734>
 80092b2:	425b      	negs	r3, r3
 80092b4:	441a      	add	r2, r3
 80092b6:	428a      	cmp	r2, r1
 80092b8:	d2fc      	bcs.n	80092b4 <forward_conv2d_nl_pool+0x8d8>
 80092ba:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 80092be:	e727      	b.n	8009110 <forward_conv2d_nl_pool+0x734>
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	deff      	udf	#255	; 0xff
 80092c4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80092c8:	2a00      	cmp	r2, #0
 80092ca:	f43f ac83 	beq.w	8008bd4 <forward_conv2d_nl_pool+0x1f8>
 80092ce:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80092d2:	2803      	cmp	r0, #3
 80092d4:	f240 849a 	bls.w	8009c0c <forward_conv2d_nl_pool+0x1230>
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092dc:	b1db      	cbz	r3, 8009316 <forward_conv2d_nl_pool+0x93a>
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	b1cb      	cbz	r3, 8009316 <forward_conv2d_nl_pool+0x93a>
 80092e2:	6998      	ldr	r0, [r3, #24]
 80092e4:	460b      	mov	r3, r1
 80092e6:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80092ea:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
 80092ee:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80092f2:	9501      	str	r5, [sp, #4]
 80092f4:	9000      	str	r0, [sp, #0]
 80092f6:	4620      	mov	r0, r4
 80092f8:	f7fe fb52 	bl	80079a0 <ai_dict_decompress_f32>
 80092fc:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8009300:	b12c      	cbz	r4, 800930e <forward_conv2d_nl_pool+0x932>
 8009302:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 8009306:	881a      	ldrh	r2, [r3, #0]
 8009308:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 800930c:	e462      	b.n	8008bd4 <forward_conv2d_nl_pool+0x1f8>
 800930e:	881a      	ldrh	r2, [r3, #0]
 8009310:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8009314:	e45e      	b.n	8008bd4 <forward_conv2d_nl_pool+0x1f8>
 8009316:	2300      	movs	r3, #0
 8009318:	699b      	ldr	r3, [r3, #24]
 800931a:	deff      	udf	#255	; 0xff
 800931c:	68da      	ldr	r2, [r3, #12]
 800931e:	e6e9      	b.n	80090f4 <forward_conv2d_nl_pool+0x718>
 8009320:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009324:	2901      	cmp	r1, #1
 8009326:	f47f ad43 	bne.w	8008db0 <forward_conv2d_nl_pool+0x3d4>
 800932a:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800932e:	2900      	cmp	r1, #0
 8009330:	f43f aedc 	beq.w	80090ec <forward_conv2d_nl_pool+0x710>
 8009334:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8009338:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800933c:	f8d7 6144 	ldr.w	r6, [r7, #324]	; 0x144
 8009340:	fbb1 f1f0 	udiv	r1, r1, r0
 8009344:	ebc1 7481 	rsb	r4, r1, r1, lsl #30
 8009348:	fb03 f506 	mul.w	r5, r3, r6
 800934c:	1ad0      	subs	r0, r2, r3
 800934e:	00b2      	lsls	r2, r6, #2
 8009350:	00a4      	lsls	r4, r4, #2
 8009352:	67fd      	str	r5, [r7, #124]	; 0x7c
 8009354:	f8d7 5100 	ldr.w	r5, [r7, #256]	; 0x100
 8009358:	65fc      	str	r4, [r7, #92]	; 0x5c
 800935a:	69bc      	ldr	r4, [r7, #24]
 800935c:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 8009360:	1a28      	subs	r0, r5, r0
 8009362:	fb04 f303 	mul.w	r3, r4, r3
 8009366:	460d      	mov	r5, r1
 8009368:	62f9      	str	r1, [r7, #44]	; 0x2c
 800936a:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
 800936e:	617b      	str	r3, [r7, #20]
 8009370:	fb02 f300 	mul.w	r3, r2, r0
 8009374:	62bb      	str	r3, [r7, #40]	; 0x28
 8009376:	00cb      	lsls	r3, r1, #3
 8009378:	607b      	str	r3, [r7, #4]
 800937a:	00ab      	lsls	r3, r5, #2
 800937c:	60bb      	str	r3, [r7, #8]
 800937e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009382:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009386:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800938a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800938e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009392:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009396:	2300      	movs	r3, #0
 8009398:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800939c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f2c0 826a 	blt.w	800987a <forward_conv2d_nl_pool+0xe9e>
 80093a6:	2400      	movs	r4, #0
 80093a8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80093aa:	4621      	mov	r1, r4
 80093ac:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 80093b0:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 80093b4:	1818      	adds	r0, r3, r0
 80093b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80093ba:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 80093be:	18f3      	adds	r3, r6, r3
 80093c0:	4420      	add	r0, r4
 80093c2:	461c      	mov	r4, r3
 80093c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80093c8:	0080      	lsls	r0, r0, #2
 80093ca:	429c      	cmp	r4, r3
 80093cc:	bf28      	it	cs
 80093ce:	461c      	movcs	r4, r3
 80093d0:	1a64      	subs	r4, r4, r1
 80093d2:	2d00      	cmp	r5, #0
 80093d4:	f000 8242 	beq.w	800985c <forward_conv2d_nl_pool+0xe80>
 80093d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093dc:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 80093e0:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 80093e4:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 80093e8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80093ec:	428d      	cmp	r5, r1
 80093ee:	462a      	mov	r2, r5
 80093f0:	eba6 0104 	sub.w	r1, r6, r4
 80093f4:	eba3 0304 	sub.w	r3, r3, r4
 80093f8:	fe48 3a23 	vseleq.f32	s7, s16, s7
 80093fc:	697d      	ldr	r5, [r7, #20]
 80093fe:	f8d7 60bc 	ldr.w	r6, [r7, #188]	; 0xbc
 8009402:	4428      	add	r0, r5
 8009404:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
 8009408:	fb05 6e00 	mla	lr, r5, r0, r6
 800940c:	eb0e 000b 	add.w	r0, lr, fp
 8009410:	4586      	cmp	lr, r0
 8009412:	61f8      	str	r0, [r7, #28]
 8009414:	f080 80a5 	bcs.w	8009562 <forward_conv2d_nl_pool+0xb86>
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	fb01 f10b 	mul.w	r1, r1, fp
 800941e:	f024 0803 	bic.w	r8, r4, #3
 8009422:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009428:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800942c:	2b00      	cmp	r3, #0
 800942e:	f000 8098 	beq.w	8009562 <forward_conv2d_nl_pool+0xb86>
 8009432:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009434:	f108 33ff 	add.w	r3, r8, #4294967295
 8009438:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 800943c:	089b      	lsrs	r3, r3, #2
 800943e:	4401      	add	r1, r0
 8009440:	68b8      	ldr	r0, [r7, #8]
 8009442:	3301      	adds	r3, #1
 8009444:	1810      	adds	r0, r2, r0
 8009446:	1a8a      	subs	r2, r1, r2
 8009448:	613a      	str	r2, [r7, #16]
 800944a:	fb03 f20a 	mul.w	r2, r3, sl
 800944e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8009452:	667a      	str	r2, [r7, #100]	; 0x64
 8009454:	011a      	lsls	r2, r3, #4
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	673a      	str	r2, [r7, #112]	; 0x70
 800945a:	663b      	str	r3, [r7, #96]	; 0x60
 800945c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009460:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009462:	6939      	ldr	r1, [r7, #16]
 8009464:	4413      	add	r3, r2
 8009466:	188a      	adds	r2, r1, r2
 8009468:	60fb      	str	r3, [r7, #12]
 800946a:	67ba      	str	r2, [r7, #120]	; 0x78
 800946c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009470:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009474:	ecf3 6a01 	vldmia	r3!, {s13}
 8009478:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800947c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8009480:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009484:	2b00      	cmp	r3, #0
 8009486:	dd57      	ble.n	8009538 <forward_conv2d_nl_pool+0xb5c>
 8009488:	4676      	mov	r6, lr
 800948a:	f04f 0c00 	mov.w	ip, #0
 800948e:	f1b8 0f00 	cmp.w	r8, #0
 8009492:	f340 81e1 	ble.w	8009858 <forward_conv2d_nl_pool+0xe7c>
 8009496:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800949a:	f109 0310 	add.w	r3, r9, #16
 800949e:	2000      	movs	r0, #0
 80094a0:	18b1      	adds	r1, r6, r2
 80094a2:	4632      	mov	r2, r6
 80094a4:	eb02 050b 	add.w	r5, r2, fp
 80094a8:	ed53 7a03 	vldr	s15, [r3, #-12]
 80094ac:	ed92 4a00 	vldr	s8, [r2]
 80094b0:	3004      	adds	r0, #4
 80094b2:	ed95 7a00 	vldr	s14, [r5]
 80094b6:	eb01 050b 	add.w	r5, r1, fp
 80094ba:	ed53 4a04 	vldr	s9, [r3, #-16]
 80094be:	4540      	cmp	r0, r8
 80094c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094c4:	ed91 5a00 	vldr	s10, [r1]
 80094c8:	ed53 5a02 	vldr	s11, [r3, #-8]
 80094cc:	4452      	add	r2, sl
 80094ce:	ed13 7a01 	vldr	s14, [r3, #-4]
 80094d2:	4451      	add	r1, sl
 80094d4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80094d8:	ed95 6a00 	vldr	s12, [r5]
 80094dc:	f103 0310 	add.w	r3, r3, #16
 80094e0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80094e4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80094e8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80094ec:	dbda      	blt.n	80094a4 <forward_conv2d_nl_pool+0xac8>
 80094ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094f0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80094f2:	441e      	add	r6, r3
 80094f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094f6:	4499      	add	r9, r3
 80094f8:	42a0      	cmp	r0, r4
 80094fa:	da11      	bge.n	8009520 <forward_conv2d_nl_pool+0xb44>
 80094fc:	4602      	mov	r2, r0
 80094fe:	4633      	mov	r3, r6
 8009500:	4649      	mov	r1, r9
 8009502:	3201      	adds	r2, #1
 8009504:	edd3 7a00 	vldr	s15, [r3]
 8009508:	ecb1 7a01 	vldmia	r1!, {s14}
 800950c:	445b      	add	r3, fp
 800950e:	42a2      	cmp	r2, r4
 8009510:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009514:	d1f5      	bne.n	8009502 <forward_conv2d_nl_pool+0xb26>
 8009516:	1a20      	subs	r0, r4, r0
 8009518:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 800951c:	fb00 660b 	mla	r6, r0, fp, r6
 8009520:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009524:	f10c 0c01 	add.w	ip, ip, #1
 8009528:	441e      	add	r6, r3
 800952a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800952e:	4499      	add	r9, r3
 8009530:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009534:	4563      	cmp	r3, ip
 8009536:	d1aa      	bne.n	800948e <forward_conv2d_nl_pool+0xab2>
 8009538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953a:	4499      	add	r9, r3
 800953c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800953e:	ece3 6a01 	vstmia	r3!, {s13}
 8009542:	67bb      	str	r3, [r7, #120]	; 0x78
 8009544:	e9d7 2335 	ldrd	r2, r3, [r7, #212]	; 0xd4
 8009548:	4293      	cmp	r3, r2
 800954a:	d191      	bne.n	8009470 <forward_conv2d_nl_pool+0xa94>
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f10e 0e04 	add.w	lr, lr, #4
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	1a9b      	subs	r3, r3, r2
 8009556:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	459e      	cmp	lr, r3
 800955e:	f4ff af7d 	bcc.w	800945c <forward_conv2d_nl_pool+0xa80>
 8009562:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8009566:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800956a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800956e:	440a      	add	r2, r1
 8009570:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8009574:	3301      	adds	r3, #1
 8009576:	4608      	mov	r0, r1
 8009578:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 800957c:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8009580:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009584:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009588:	4410      	add	r0, r2
 800958a:	1a8a      	subs	r2, r1, r2
 800958c:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8009590:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8009594:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 8009598:	429a      	cmp	r2, r3
 800959a:	f47f aeff 	bne.w	800939c <forward_conv2d_nl_pool+0x9c0>
 800959e:	e54e      	b.n	800903e <forward_conv2d_nl_pool+0x662>
 80095a0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80095a4:	2801      	cmp	r0, #1
 80095a6:	f47f ac03 	bne.w	8008db0 <forward_conv2d_nl_pool+0x3d4>
 80095aa:	1ad2      	subs	r2, r2, r3
 80095ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095ae:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 80095b2:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 80095b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095b8:	fb00 4101 	mla	r1, r0, r1, r4
 80095bc:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80095c0:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80095c4:	f080 8172 	bcs.w	80098ac <forward_conv2d_nl_pool+0xed0>
 80095c8:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80095cc:	2a00      	cmp	r2, #0
 80095ce:	f43f ad36 	beq.w	800903e <forward_conv2d_nl_pool+0x662>
 80095d2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80095d6:	fb02 f303 	mul.w	r3, r2, r3
 80095da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80095dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80095de:	4411      	add	r1, r2
 80095e0:	1a9b      	subs	r3, r3, r2
 80095e2:	6639      	str	r1, [r7, #96]	; 0x60
 80095e4:	667b      	str	r3, [r7, #100]	; 0x64
 80095e6:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80095ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095ee:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 80095f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80095f6:	2300      	movs	r3, #0
 80095f8:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80095fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009600:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8009604:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
 8009608:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800960c:	2b00      	cmp	r3, #0
 800960e:	f000 814a 	beq.w	80098a6 <forward_conv2d_nl_pool+0xeca>
 8009612:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009616:	ed93 6a00 	vldr	s12, [r3]
 800961a:	3304      	adds	r3, #4
 800961c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009620:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009624:	2b00      	cmp	r3, #0
 8009626:	f000 80fe 	beq.w	8009826 <forward_conv2d_nl_pool+0xe4a>
 800962a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800962e:	f04f 0b00 	mov.w	fp, #0
 8009632:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8009636:	eb03 0802 	add.w	r8, r3, r2
 800963a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800963c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009640:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009642:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009646:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800964a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800964c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009650:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009654:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009658:	2b00      	cmp	r3, #0
 800965a:	f2c0 811b 	blt.w	8009894 <forward_conv2d_nl_pool+0xeb8>
 800965e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8009662:	2300      	movs	r3, #0
 8009664:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009666:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800966a:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 800966e:	4540      	cmp	r0, r8
 8009670:	bf94      	ite	ls
 8009672:	ebc3 0300 	rsbls	r3, r3, r0
 8009676:	ebc3 0308 	rsbhi	r3, r3, r8
 800967a:	4422      	add	r2, r4
 800967c:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 8009680:	1ac0      	subs	r0, r0, r3
 8009682:	eba4 0903 	sub.w	r9, r4, r3
 8009686:	f8d7 413c 	ldr.w	r4, [r7, #316]	; 0x13c
 800968a:	fb03 f304 	mul.w	r3, r3, r4
 800968e:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 8009692:	2c00      	cmp	r4, #0
 8009694:	f340 80fb 	ble.w	800988e <forward_conv2d_nl_pool+0xeb2>
 8009698:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 800969c:	f023 050f 	bic.w	r5, r3, #15
 80096a0:	eef0 6a46 	vmov.f32	s13, s12
 80096a4:	f04f 0e00 	mov.w	lr, #0
 80096a8:	fb04 f000 	mul.w	r0, r4, r0
 80096ac:	fb04 f909 	mul.w	r9, r4, r9
 80096b0:	6738      	str	r0, [r7, #112]	; 0x70
 80096b2:	1e68      	subs	r0, r5, #1
 80096b4:	0900      	lsrs	r0, r0, #4
 80096b6:	3001      	adds	r0, #1
 80096b8:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 80096bc:	0100      	lsls	r0, r0, #4
 80096be:	65f8      	str	r0, [r7, #92]	; 0x5c
 80096c0:	2d00      	cmp	r5, #0
 80096c2:	f340 80e2 	ble.w	800988a <forward_conv2d_nl_pool+0xeae>
 80096c6:	f101 0440 	add.w	r4, r1, #64	; 0x40
 80096ca:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80096ce:	2600      	movs	r6, #0
 80096d0:	ed10 7a0f 	vldr	s14, [r0, #-60]	; 0xffffffc4
 80096d4:	3610      	adds	r6, #16
 80096d6:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 80096da:	3040      	adds	r0, #64	; 0x40
 80096dc:	ed54 5a10 	vldr	s11, [r4, #-64]	; 0xffffffc0
 80096e0:	42ae      	cmp	r6, r5
 80096e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096e6:	ed10 7a20 	vldr	s14, [r0, #-128]	; 0xffffff80
 80096ea:	ed54 2a0e 	vldr	s5, [r4, #-56]	; 0xffffffc8
 80096ee:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80096f2:	ed10 3a1e 	vldr	s6, [r0, #-120]	; 0xffffff88
 80096f6:	eee5 7a87 	vfma.f32	s15, s11, s14
 80096fa:	ed54 3a1d 	vldr	s7, [r4, #-116]	; 0xffffff8c
 80096fe:	ed10 4a1d 	vldr	s8, [r0, #-116]	; 0xffffff8c
 8009702:	ed50 4a1c 	vldr	s9, [r0, #-112]	; 0xffffff90
 8009706:	ed14 5a1c 	vldr	s10, [r4, #-112]	; 0xffffff90
 800970a:	ed50 5a1b 	vldr	s11, [r0, #-108]	; 0xffffff94
 800970e:	ed14 7a1b 	vldr	s14, [r4, #-108]	; 0xffffff94
 8009712:	eee2 7a83 	vfma.f32	s15, s5, s6
 8009716:	ed50 ba1a 	vldr	s23, [r0, #-104]	; 0xffffff98
 800971a:	ed14 ba1a 	vldr	s22, [r4, #-104]	; 0xffffff98
 800971e:	ed50 aa19 	vldr	s21, [r0, #-100]	; 0xffffff9c
 8009722:	ed14 aa19 	vldr	s20, [r4, #-100]	; 0xffffff9c
 8009726:	ed54 9a18 	vldr	s19, [r4, #-96]	; 0xffffffa0
 800972a:	ed10 9a18 	vldr	s18, [r0, #-96]	; 0xffffffa0
 800972e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009732:	ed54 8a17 	vldr	s17, [r4, #-92]	; 0xffffffa4
 8009736:	ed10 0a17 	vldr	s0, [r0, #-92]	; 0xffffffa4
 800973a:	ed50 0a16 	vldr	s1, [r0, #-88]	; 0xffffffa8
 800973e:	ed14 1a16 	vldr	s2, [r4, #-88]	; 0xffffffa8
 8009742:	ed54 1a15 	vldr	s3, [r4, #-84]	; 0xffffffac
 8009746:	ed10 2a15 	vldr	s4, [r0, #-84]	; 0xffffffac
 800974a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800974e:	ed50 2a14 	vldr	s5, [r0, #-80]	; 0xffffffb0
 8009752:	ed14 3a14 	vldr	s6, [r4, #-80]	; 0xffffffb0
 8009756:	ed50 3a13 	vldr	s7, [r0, #-76]	; 0xffffffb4
 800975a:	ed14 4a13 	vldr	s8, [r4, #-76]	; 0xffffffb4
 800975e:	ed50 4a12 	vldr	s9, [r0, #-72]	; 0xffffffb8
 8009762:	ed14 5a12 	vldr	s10, [r4, #-72]	; 0xffffffb8
 8009766:	eee5 7a87 	vfma.f32	s15, s11, s14
 800976a:	ed54 5a11 	vldr	s11, [r4, #-68]	; 0xffffffbc
 800976e:	ed10 7a11 	vldr	s14, [r0, #-68]	; 0xffffffbc
 8009772:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8009776:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800977a:	eee9 7a89 	vfma.f32	s15, s19, s18
 800977e:	eee8 7a80 	vfma.f32	s15, s17, s0
 8009782:	eee0 7a81 	vfma.f32	s15, s1, s2
 8009786:	eee1 7a82 	vfma.f32	s15, s3, s4
 800978a:	eee2 7a83 	vfma.f32	s15, s5, s6
 800978e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009792:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009796:	eee5 7a87 	vfma.f32	s15, s11, s14
 800979a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800979e:	db97      	blt.n	80096d0 <forward_conv2d_nl_pool+0xcf4>
 80097a0:	4451      	add	r1, sl
 80097a2:	4452      	add	r2, sl
 80097a4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80097a6:	4283      	cmp	r3, r0
 80097a8:	dd0f      	ble.n	80097ca <forward_conv2d_nl_pool+0xdee>
 80097aa:	4604      	mov	r4, r0
 80097ac:	468c      	mov	ip, r1
 80097ae:	4616      	mov	r6, r2
 80097b0:	3401      	adds	r4, #1
 80097b2:	ecb6 7a01 	vldmia	r6!, {s14}
 80097b6:	ecfc 7a01 	vldmia	ip!, {s15}
 80097ba:	42a3      	cmp	r3, r4
 80097bc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80097c0:	d1f6      	bne.n	80097b0 <forward_conv2d_nl_pool+0xdd4>
 80097c2:	1a18      	subs	r0, r3, r0
 80097c4:	0080      	lsls	r0, r0, #2
 80097c6:	4402      	add	r2, r0
 80097c8:	4401      	add	r1, r0
 80097ca:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80097cc:	f10e 0e01 	add.w	lr, lr, #1
 80097d0:	4449      	add	r1, r9
 80097d2:	4402      	add	r2, r0
 80097d4:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80097d8:	4570      	cmp	r0, lr
 80097da:	f47f af71 	bne.w	80096c0 <forward_conv2d_nl_pool+0xce4>
 80097de:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80097e2:	f10b 0b01 	add.w	fp, fp, #1
 80097e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80097e8:	4608      	mov	r0, r1
 80097ea:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80097ee:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80097f2:	4410      	add	r0, r2
 80097f4:	edc3 6a00 	vstr	s13, [r3]
 80097f8:	440b      	add	r3, r1
 80097fa:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80097fe:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8009802:	eba8 0802 	sub.w	r8, r8, r2
 8009806:	4608      	mov	r0, r1
 8009808:	67fb      	str	r3, [r7, #124]	; 0x7c
 800980a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800980e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009810:	4418      	add	r0, r3
 8009812:	1acb      	subs	r3, r1, r3
 8009814:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009818:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800981c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8009820:	455b      	cmp	r3, fp
 8009822:	f47f af17 	bne.w	8009654 <forward_conv2d_nl_pool+0xc78>
 8009826:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800982a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800982c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009830:	440a      	add	r2, r1
 8009832:	3301      	adds	r3, #1
 8009834:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8009838:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800983c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009840:	3204      	adds	r2, #4
 8009842:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8009846:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800984a:	429a      	cmp	r2, r3
 800984c:	f47f aedc 	bne.w	8009608 <forward_conv2d_nl_pool+0xc2c>
 8009850:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8009854:	f7ff bbf3 	b.w	800903e <forward_conv2d_nl_pool+0x662>
 8009858:	2000      	movs	r0, #0
 800985a:	e64d      	b.n	80094f8 <forward_conv2d_nl_pool+0xb1c>
 800985c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009860:	eef0 3a48 	vmov.f32	s7, s16
 8009864:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 8009868:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800986c:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8009870:	1b19      	subs	r1, r3, r4
 8009872:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009876:	1b1b      	subs	r3, r3, r4
 8009878:	e5c0      	b.n	80093fc <forward_conv2d_nl_pool+0xa20>
 800987a:	f8d7 4108 	ldr.w	r4, [r7, #264]	; 0x108
 800987e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009880:	4621      	mov	r1, r4
 8009882:	191a      	adds	r2, r3, r4
 8009884:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009888:	e590      	b.n	80093ac <forward_conv2d_nl_pool+0x9d0>
 800988a:	2000      	movs	r0, #0
 800988c:	e78b      	b.n	80097a6 <forward_conv2d_nl_pool+0xdca>
 800988e:	eef0 6a46 	vmov.f32	s13, s12
 8009892:	e7a4      	b.n	80097de <forward_conv2d_nl_pool+0xe02>
 8009894:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009898:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800989c:	eba8 0303 	sub.w	r3, r8, r3
 80098a0:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80098a4:	e6df      	b.n	8009666 <forward_conv2d_nl_pool+0xc8a>
 80098a6:	eeb0 6a48 	vmov.f32	s12, s16
 80098aa:	e6b9      	b.n	8009620 <forward_conv2d_nl_pool+0xc44>
 80098ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80098b0:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 80098b4:	320a      	adds	r2, #10
 80098b6:	f022 0207 	bic.w	r2, r2, #7
 80098ba:	ebad 0d02 	sub.w	sp, sp, r2
 80098be:	aa0a      	add	r2, sp, #40	; 0x28
 80098c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80098c4:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80098c8:	2a00      	cmp	r2, #0
 80098ca:	f000 814e 	beq.w	8009b6a <forward_conv2d_nl_pool+0x118e>
 80098ce:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80098d2:	f8c7 b01c 	str.w	fp, [r7, #28]
 80098d6:	fb02 f303 	mul.w	r3, r2, r3
 80098da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80098dc:	f8c7 a014 	str.w	sl, [r7, #20]
 80098e0:	4411      	add	r1, r2
 80098e2:	667b      	str	r3, [r7, #100]	; 0x64
 80098e4:	1a9b      	subs	r3, r3, r2
 80098e6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80098e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80098ea:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80098ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098f2:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 80098f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80098fa:	2300      	movs	r3, #0
 80098fc:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8009900:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009904:	67f9      	str	r1, [r7, #124]	; 0x7c
 8009906:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800990a:	b13b      	cbz	r3, 800991c <forward_conv2d_nl_pool+0xf40>
 800990c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009910:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8009914:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8009918:	f001 f85a 	bl	800a9d0 <memcpy>
 800991c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009920:	2b00      	cmp	r3, #0
 8009922:	f000 8134 	beq.w	8009b8e <forward_conv2d_nl_pool+0x11b2>
 8009926:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009928:	ed93 6a00 	vldr	s12, [r3]
 800992c:	3304      	adds	r3, #4
 800992e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009930:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009934:	2b00      	cmp	r3, #0
 8009936:	f000 80fe 	beq.w	8009b36 <forward_conv2d_nl_pool+0x115a>
 800993a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800993e:	f04f 0b00 	mov.w	fp, #0
 8009942:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8009946:	eb03 0802 	add.w	r8, r3, r2
 800994a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800994c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009952:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009956:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800995a:	67bb      	str	r3, [r7, #120]	; 0x78
 800995c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009960:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009964:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009968:	2b00      	cmp	r3, #0
 800996a:	f2c0 8107 	blt.w	8009b7c <forward_conv2d_nl_pool+0x11a0>
 800996e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8009972:	2300      	movs	r3, #0
 8009974:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009976:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800997a:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 800997e:	4540      	cmp	r0, r8
 8009980:	bf94      	ite	ls
 8009982:	ebc3 0300 	rsbls	r3, r3, r0
 8009986:	ebc3 0308 	rsbhi	r3, r3, r8
 800998a:	4422      	add	r2, r4
 800998c:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 8009990:	1ac0      	subs	r0, r0, r3
 8009992:	eba4 0903 	sub.w	r9, r4, r3
 8009996:	f8d7 413c 	ldr.w	r4, [r7, #316]	; 0x13c
 800999a:	fb03 f304 	mul.w	r3, r3, r4
 800999e:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 80099a2:	2c00      	cmp	r4, #0
 80099a4:	f340 80e7 	ble.w	8009b76 <forward_conv2d_nl_pool+0x119a>
 80099a8:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 80099ac:	f023 050f 	bic.w	r5, r3, #15
 80099b0:	eef0 6a46 	vmov.f32	s13, s12
 80099b4:	f04f 0e00 	mov.w	lr, #0
 80099b8:	fb04 f000 	mul.w	r0, r4, r0
 80099bc:	fb04 f909 	mul.w	r9, r4, r9
 80099c0:	6638      	str	r0, [r7, #96]	; 0x60
 80099c2:	1e68      	subs	r0, r5, #1
 80099c4:	0900      	lsrs	r0, r0, #4
 80099c6:	3001      	adds	r0, #1
 80099c8:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 80099cc:	0100      	lsls	r0, r0, #4
 80099ce:	62b8      	str	r0, [r7, #40]	; 0x28
 80099d0:	2d00      	cmp	r5, #0
 80099d2:	f340 80ce 	ble.w	8009b72 <forward_conv2d_nl_pool+0x1196>
 80099d6:	f101 0440 	add.w	r4, r1, #64	; 0x40
 80099da:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80099de:	2600      	movs	r6, #0
 80099e0:	ed10 7a0f 	vldr	s14, [r0, #-60]	; 0xffffffc4
 80099e4:	3610      	adds	r6, #16
 80099e6:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 80099ea:	3040      	adds	r0, #64	; 0x40
 80099ec:	ed54 5a10 	vldr	s11, [r4, #-64]	; 0xffffffc0
 80099f0:	42ae      	cmp	r6, r5
 80099f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099f6:	ed10 7a20 	vldr	s14, [r0, #-128]	; 0xffffff80
 80099fa:	ed54 2a0e 	vldr	s5, [r4, #-56]	; 0xffffffc8
 80099fe:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8009a02:	ed10 3a1e 	vldr	s6, [r0, #-120]	; 0xffffff88
 8009a06:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009a0a:	ed54 3a1d 	vldr	s7, [r4, #-116]	; 0xffffff8c
 8009a0e:	ed10 4a1d 	vldr	s8, [r0, #-116]	; 0xffffff8c
 8009a12:	ed50 4a1c 	vldr	s9, [r0, #-112]	; 0xffffff90
 8009a16:	ed14 5a1c 	vldr	s10, [r4, #-112]	; 0xffffff90
 8009a1a:	ed50 5a1b 	vldr	s11, [r0, #-108]	; 0xffffff94
 8009a1e:	ed14 7a1b 	vldr	s14, [r4, #-108]	; 0xffffff94
 8009a22:	eee2 7a83 	vfma.f32	s15, s5, s6
 8009a26:	ed54 ba1a 	vldr	s23, [r4, #-104]	; 0xffffff98
 8009a2a:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 8009a2e:	ed54 aa19 	vldr	s21, [r4, #-100]	; 0xffffff9c
 8009a32:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 8009a36:	ed50 9a18 	vldr	s19, [r0, #-96]	; 0xffffffa0
 8009a3a:	ed14 9a18 	vldr	s18, [r4, #-96]	; 0xffffffa0
 8009a3e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009a42:	ed50 8a17 	vldr	s17, [r0, #-92]	; 0xffffffa4
 8009a46:	ed14 0a17 	vldr	s0, [r4, #-92]	; 0xffffffa4
 8009a4a:	ed50 0a16 	vldr	s1, [r0, #-88]	; 0xffffffa8
 8009a4e:	ed14 1a16 	vldr	s2, [r4, #-88]	; 0xffffffa8
 8009a52:	ed50 1a15 	vldr	s3, [r0, #-84]	; 0xffffffac
 8009a56:	ed14 2a15 	vldr	s4, [r4, #-84]	; 0xffffffac
 8009a5a:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009a5e:	ed50 2a14 	vldr	s5, [r0, #-80]	; 0xffffffb0
 8009a62:	ed14 3a14 	vldr	s6, [r4, #-80]	; 0xffffffb0
 8009a66:	ed54 3a13 	vldr	s7, [r4, #-76]	; 0xffffffb4
 8009a6a:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 8009a6e:	ed50 4a12 	vldr	s9, [r0, #-72]	; 0xffffffb8
 8009a72:	ed14 5a12 	vldr	s10, [r4, #-72]	; 0xffffffb8
 8009a76:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009a7a:	ed54 5a11 	vldr	s11, [r4, #-68]	; 0xffffffbc
 8009a7e:	ed10 7a11 	vldr	s14, [r0, #-68]	; 0xffffffbc
 8009a82:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8009a86:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8009a8a:	eee9 7a89 	vfma.f32	s15, s19, s18
 8009a8e:	eee8 7a80 	vfma.f32	s15, s17, s0
 8009a92:	eee0 7a81 	vfma.f32	s15, s1, s2
 8009a96:	eee1 7a82 	vfma.f32	s15, s3, s4
 8009a9a:	eee2 7a83 	vfma.f32	s15, s5, s6
 8009a9e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009aa2:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009aa6:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009aaa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009aae:	db97      	blt.n	80099e0 <forward_conv2d_nl_pool+0x1004>
 8009ab0:	4451      	add	r1, sl
 8009ab2:	4452      	add	r2, sl
 8009ab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ab6:	4283      	cmp	r3, r0
 8009ab8:	dd0f      	ble.n	8009ada <forward_conv2d_nl_pool+0x10fe>
 8009aba:	4604      	mov	r4, r0
 8009abc:	468c      	mov	ip, r1
 8009abe:	4616      	mov	r6, r2
 8009ac0:	3401      	adds	r4, #1
 8009ac2:	ecb6 7a01 	vldmia	r6!, {s14}
 8009ac6:	ecfc 7a01 	vldmia	ip!, {s15}
 8009aca:	42a3      	cmp	r3, r4
 8009acc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009ad0:	d1f6      	bne.n	8009ac0 <forward_conv2d_nl_pool+0x10e4>
 8009ad2:	1a18      	subs	r0, r3, r0
 8009ad4:	0080      	lsls	r0, r0, #2
 8009ad6:	4402      	add	r2, r0
 8009ad8:	4401      	add	r1, r0
 8009ada:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8009adc:	f10e 0e01 	add.w	lr, lr, #1
 8009ae0:	4449      	add	r1, r9
 8009ae2:	4402      	add	r2, r0
 8009ae4:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8009ae8:	4570      	cmp	r0, lr
 8009aea:	f47f af71 	bne.w	80099d0 <forward_conv2d_nl_pool+0xff4>
 8009aee:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8009af2:	f10b 0b01 	add.w	fp, fp, #1
 8009af6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009af8:	4608      	mov	r0, r1
 8009afa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009afe:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8009b02:	4410      	add	r0, r2
 8009b04:	edc3 6a00 	vstr	s13, [r3]
 8009b08:	440b      	add	r3, r1
 8009b0a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8009b0e:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8009b12:	eba8 0802 	sub.w	r8, r8, r2
 8009b16:	4608      	mov	r0, r1
 8009b18:	67bb      	str	r3, [r7, #120]	; 0x78
 8009b1a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8009b1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b20:	4418      	add	r0, r3
 8009b22:	1acb      	subs	r3, r1, r3
 8009b24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009b28:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009b2c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8009b30:	455b      	cmp	r3, fp
 8009b32:	f47f af17 	bne.w	8009964 <forward_conv2d_nl_pool+0xf88>
 8009b36:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8009b3a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8009b3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b42:	440a      	add	r2, r1
 8009b44:	3301      	adds	r3, #1
 8009b46:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8009b4a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8009b4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009b52:	3204      	adds	r2, #4
 8009b54:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8009b58:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	f47f aed2 	bne.w	8009906 <forward_conv2d_nl_pool+0xf2a>
 8009b62:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 8009b66:	f8d7 a014 	ldr.w	sl, [r7, #20]
 8009b6a:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 8009b6e:	f7ff ba66 	b.w	800903e <forward_conv2d_nl_pool+0x662>
 8009b72:	2000      	movs	r0, #0
 8009b74:	e79f      	b.n	8009ab6 <forward_conv2d_nl_pool+0x10da>
 8009b76:	eef0 6a46 	vmov.f32	s13, s12
 8009b7a:	e7b8      	b.n	8009aee <forward_conv2d_nl_pool+0x1112>
 8009b7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b80:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009b84:	eba8 0303 	sub.w	r3, r8, r3
 8009b88:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8009b8c:	e6f3      	b.n	8009976 <forward_conv2d_nl_pool+0xf9a>
 8009b8e:	eeb0 6a48 	vmov.f32	s12, s16
 8009b92:	e6cd      	b.n	8009930 <forward_conv2d_nl_pool+0xf54>
 8009b94:	b1a0      	cbz	r0, 8009bc0 <forward_conv2d_nl_pool+0x11e4>
 8009b96:	6881      	ldr	r1, [r0, #8]
 8009b98:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8009ba2:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8009ba6:	f7fe bfc2 	b.w	8008b2e <forward_conv2d_nl_pool+0x152>
 8009baa:	b190      	cbz	r0, 8009bd2 <forward_conv2d_nl_pool+0x11f6>
 8009bac:	6882      	ldr	r2, [r0, #8]
 8009bae:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8009bb2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8009bbc:	f7fe bfb7 	b.w	8008b2e <forward_conv2d_nl_pool+0x152>
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8009bc6:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8009bca:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8009bce:	f7fe bfae 	b.w	8008b2e <forward_conv2d_nl_pool+0x152>
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8009bd8:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8009bdc:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8009be0:	f7fe bfa5 	b.w	8008b2e <forward_conv2d_nl_pool+0x152>
 8009be4:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8009be8:	f7fe bf84 	b.w	8008af4 <forward_conv2d_nl_pool+0x118>
 8009bec:	3118      	adds	r1, #24
 8009bee:	d010      	beq.n	8009c12 <forward_conv2d_nl_pool+0x1236>
 8009bf0:	4662      	mov	r2, ip
 8009bf2:	4664      	mov	r4, ip
 8009bf4:	4661      	mov	r1, ip
 8009bf6:	f7fe bf23 	b.w	8008a40 <forward_conv2d_nl_pool+0x64>
 8009bfa:	4691      	mov	r9, r2
 8009bfc:	f7fe bf08 	b.w	8008a10 <forward_conv2d_nl_pool+0x34>
 8009c00:	4613      	mov	r3, r2
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	deff      	udf	#255	; 0xff
 8009c06:	2200      	movs	r2, #0
 8009c08:	f7fe bf18 	b.w	8008a3c <forward_conv2d_nl_pool+0x60>
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	deff      	udf	#255	; 0xff
 8009c12:	68cb      	ldr	r3, [r1, #12]
 8009c14:	deff      	udf	#255	; 0xff
 8009c16:	bf00      	nop

08009c18 <forward_dense>:
 8009c18:	6983      	ldr	r3, [r0, #24]
 8009c1a:	8818      	ldrh	r0, [r3, #0]
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	f000 80b7 	beq.w	8009d90 <forward_dense+0x178>
 8009c22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c26:	ed2d 8b08 	vpush	{d8-d11}
 8009c2a:	685f      	ldr	r7, [r3, #4]
 8009c2c:	b091      	sub	sp, #68	; 0x44
 8009c2e:	687d      	ldr	r5, [r7, #4]
 8009c30:	b105      	cbz	r5, 8009c34 <forward_dense+0x1c>
 8009c32:	682d      	ldr	r5, [r5, #0]
 8009c34:	2801      	cmp	r0, #1
 8009c36:	f240 80a8 	bls.w	8009d8a <forward_dense+0x172>
 8009c3a:	693c      	ldr	r4, [r7, #16]
 8009c3c:	b104      	cbz	r4, 8009c40 <forward_dense+0x28>
 8009c3e:	6824      	ldr	r4, [r4, #0]
 8009c40:	2802      	cmp	r0, #2
 8009c42:	f000 80a7 	beq.w	8009d94 <forward_dense+0x17c>
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	f000 821b 	beq.w	800a084 <forward_dense+0x46c>
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	9206      	str	r2, [sp, #24]
 8009c52:	f117 0218 	adds.w	r2, r7, #24
 8009c56:	f000 80ca 	beq.w	8009dee <forward_dense+0x1d6>
 8009c5a:	8b3a      	ldrh	r2, [r7, #24]
 8009c5c:	2a01      	cmp	r2, #1
 8009c5e:	f240 820e 	bls.w	800a07e <forward_dense+0x466>
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	f000 80c5 	beq.w	8009df2 <forward_dense+0x1da>
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	9307      	str	r3, [sp, #28]
 8009c6c:	9b06      	ldr	r3, [sp, #24]
 8009c6e:	2803      	cmp	r0, #3
 8009c70:	68e6      	ldr	r6, [r4, #12]
 8009c72:	6999      	ldr	r1, [r3, #24]
 8009c74:	680a      	ldr	r2, [r1, #0]
 8009c76:	f3c2 18c6 	ubfx	r8, r2, #7, #7
 8009c7a:	f3c2 5341 	ubfx	r3, r2, #21, #2
 8009c7e:	fa48 f303 	asr.w	r3, r8, r3
 8009c82:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c84:	68eb      	ldr	r3, [r5, #12]
 8009c86:	9303      	str	r3, [sp, #12]
 8009c88:	68f3      	ldr	r3, [r6, #12]
 8009c8a:	469c      	mov	ip, r3
 8009c8c:	68b3      	ldr	r3, [r6, #8]
 8009c8e:	6876      	ldr	r6, [r6, #4]
 8009c90:	fb0c f303 	mul.w	r3, ip, r3
 8009c94:	9308      	str	r3, [sp, #32]
 8009c96:	9b03      	ldr	r3, [sp, #12]
 8009c98:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8009c9c:	f000 81db 	beq.w	800a056 <forward_dense+0x43e>
 8009ca0:	6abf      	ldr	r7, [r7, #40]	; 0x28
 8009ca2:	b117      	cbz	r7, 8009caa <forward_dense+0x92>
 8009ca4:	683f      	ldr	r7, [r7, #0]
 8009ca6:	b107      	cbz	r7, 8009caa <forward_dense+0x92>
 8009ca8:	69bf      	ldr	r7, [r7, #24]
 8009caa:	f3c2 4243 	ubfx	r2, r2, #17, #4
 8009cae:	2a04      	cmp	r2, #4
 8009cb0:	f000 81d4 	beq.w	800a05c <forward_dense+0x444>
 8009cb4:	2a08      	cmp	r2, #8
 8009cb6:	f000 81d1 	beq.w	800a05c <forward_dense+0x444>
 8009cba:	f04f 0a00 	mov.w	sl, #0
 8009cbe:	69a3      	ldr	r3, [r4, #24]
 8009cc0:	00b1      	lsls	r1, r6, #2
 8009cc2:	69aa      	ldr	r2, [r5, #24]
 8009cc4:	6898      	ldr	r0, [r3, #8]
 8009cc6:	9b06      	ldr	r3, [sp, #24]
 8009cc8:	9109      	str	r1, [sp, #36]	; 0x24
 8009cca:	1846      	adds	r6, r0, r1
 8009ccc:	695b      	ldr	r3, [r3, #20]
 8009cce:	9004      	str	r0, [sp, #16]
 8009cd0:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8009cd4:	9b08      	ldr	r3, [sp, #32]
 8009cd6:	6897      	ldr	r7, [r2, #8]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d051      	beq.n	8009d80 <forward_dense+0x168>
 8009cdc:	f1a8 0310 	sub.w	r3, r8, #16
 8009ce0:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8009ce4:	eddf 2ad0 	vldr	s5, [pc, #832]	; 800a028 <forward_dense+0x410>
 8009ce8:	091b      	lsrs	r3, r3, #4
 8009cea:	920a      	str	r2, [sp, #40]	; 0x28
 8009cec:	2200      	movs	r2, #0
 8009cee:	3301      	adds	r3, #1
 8009cf0:	9205      	str	r2, [sp, #20]
 8009cf2:	f008 020f 	and.w	r2, r8, #15
 8009cf6:	019b      	lsls	r3, r3, #6
 8009cf8:	920d      	str	r2, [sp, #52]	; 0x34
 8009cfa:	930c      	str	r3, [sp, #48]	; 0x30
 8009cfc:	9b06      	ldr	r3, [sp, #24]
 8009cfe:	699b      	ldr	r3, [r3, #24]
 8009d00:	689d      	ldr	r5, [r3, #8]
 8009d02:	9b07      	ldr	r3, [sp, #28]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	f000 818c 	beq.w	800a022 <forward_dense+0x40a>
 8009d0a:	699b      	ldr	r3, [r3, #24]
 8009d0c:	689c      	ldr	r4, [r3, #8]
 8009d0e:	9b04      	ldr	r3, [sp, #16]
 8009d10:	f1ba 0f00 	cmp.w	sl, #0
 8009d14:	d06f      	beq.n	8009df6 <forward_dense+0x1de>
 8009d16:	42b3      	cmp	r3, r6
 8009d18:	d228      	bcs.n	8009d6c <forward_dense+0x154>
 8009d1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d1c:	469b      	mov	fp, r3
 8009d1e:	ab0f      	add	r3, sp, #60	; 0x3c
 8009d20:	2a04      	cmp	r2, #4
 8009d22:	9303      	str	r3, [sp, #12]
 8009d24:	4633      	mov	r3, r6
 8009d26:	4646      	mov	r6, r8
 8009d28:	4698      	mov	r8, r3
 8009d2a:	d036      	beq.n	8009d9a <forward_dense+0x182>
 8009d2c:	2c00      	cmp	r4, #0
 8009d2e:	f000 817d 	beq.w	800a02c <forward_dense+0x414>
 8009d32:	f8d4 c000 	ldr.w	ip, [r4]
 8009d36:	463b      	mov	r3, r7
 8009d38:	4629      	mov	r1, r5
 8009d3a:	9600      	str	r6, [sp, #0]
 8009d3c:	4652      	mov	r2, sl
 8009d3e:	9803      	ldr	r0, [sp, #12]
 8009d40:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8009d44:	f7fd fb3e 	bl	80073c4 <ai_dict8_dot_array_f32>
 8009d48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d4a:	3404      	adds	r4, #4
 8009d4c:	444d      	add	r5, r9
 8009d4e:	f84b 3b04 	str.w	r3, [fp], #4
 8009d52:	45c3      	cmp	fp, r8
 8009d54:	d3ea      	bcc.n	8009d2c <forward_dense+0x114>
 8009d56:	4643      	mov	r3, r8
 8009d58:	46b0      	mov	r8, r6
 8009d5a:	461e      	mov	r6, r3
 8009d5c:	9a04      	ldr	r2, [sp, #16]
 8009d5e:	43d3      	mvns	r3, r2
 8009d60:	4433      	add	r3, r6
 8009d62:	f023 0303 	bic.w	r3, r3, #3
 8009d66:	3304      	adds	r3, #4
 8009d68:	18d3      	adds	r3, r2, r3
 8009d6a:	9304      	str	r3, [sp, #16]
 8009d6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d6e:	9b05      	ldr	r3, [sp, #20]
 8009d70:	4417      	add	r7, r2
 8009d72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d74:	3301      	adds	r3, #1
 8009d76:	4416      	add	r6, r2
 8009d78:	9a08      	ldr	r2, [sp, #32]
 8009d7a:	9305      	str	r3, [sp, #20]
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d1bd      	bne.n	8009cfc <forward_dense+0xe4>
 8009d80:	b011      	add	sp, #68	; 0x44
 8009d82:	ecbd 8b08 	vpop	{d8-d11}
 8009d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	deff      	udf	#255	; 0xff
 8009d90:	6843      	ldr	r3, [r0, #4]
 8009d92:	deff      	udf	#255	; 0xff
 8009d94:	2300      	movs	r3, #0
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	deff      	udf	#255	; 0xff
 8009d9a:	b19c      	cbz	r4, 8009dc4 <forward_dense+0x1ac>
 8009d9c:	f8d4 c000 	ldr.w	ip, [r4]
 8009da0:	463b      	mov	r3, r7
 8009da2:	4629      	mov	r1, r5
 8009da4:	9600      	str	r6, [sp, #0]
 8009da6:	4652      	mov	r2, sl
 8009da8:	9803      	ldr	r0, [sp, #12]
 8009daa:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8009dae:	f7fd fd39 	bl	8007824 <ai_dict4_dot_array_f32>
 8009db2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009db4:	3404      	adds	r4, #4
 8009db6:	444d      	add	r5, r9
 8009db8:	f84b 3b04 	str.w	r3, [fp], #4
 8009dbc:	45c3      	cmp	fp, r8
 8009dbe:	d2ca      	bcs.n	8009d56 <forward_dense+0x13e>
 8009dc0:	2c00      	cmp	r4, #0
 8009dc2:	d1eb      	bne.n	8009d9c <forward_dense+0x184>
 8009dc4:	4634      	mov	r4, r6
 8009dc6:	4646      	mov	r6, r8
 8009dc8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009dcc:	463b      	mov	r3, r7
 8009dce:	4629      	mov	r1, r5
 8009dd0:	9400      	str	r4, [sp, #0]
 8009dd2:	4652      	mov	r2, sl
 8009dd4:	4640      	mov	r0, r8
 8009dd6:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 8009dda:	f7fd fd23 	bl	8007824 <ai_dict4_dot_array_f32>
 8009dde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009de0:	444d      	add	r5, r9
 8009de2:	f84b 3b04 	str.w	r3, [fp], #4
 8009de6:	45b3      	cmp	fp, r6
 8009de8:	d3f0      	bcc.n	8009dcc <forward_dense+0x1b4>
 8009dea:	46a0      	mov	r8, r4
 8009dec:	e7b6      	b.n	8009d5c <forward_dense+0x144>
 8009dee:	9207      	str	r2, [sp, #28]
 8009df0:	e73c      	b.n	8009c6c <forward_dense+0x54>
 8009df2:	9307      	str	r3, [sp, #28]
 8009df4:	e73a      	b.n	8009c6c <forward_dense+0x54>
 8009df6:	42b3      	cmp	r3, r6
 8009df8:	d2b8      	bcs.n	8009d6c <forward_dense+0x154>
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009dfe:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8009e02:	eb07 0c03 	add.w	ip, r7, r3
 8009e06:	469e      	mov	lr, r3
 8009e08:	2c00      	cmp	r4, #0
 8009e0a:	f000 80fe 	beq.w	800a00a <forward_dense+0x3f2>
 8009e0e:	f1b8 0f0f 	cmp.w	r8, #15
 8009e12:	ed94 6a00 	vldr	s12, [r4]
 8009e16:	f104 0404 	add.w	r4, r4, #4
 8009e1a:	f240 80fc 	bls.w	800a016 <forward_dense+0x3fe>
 8009e1e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8009e22:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8009e26:	4641      	mov	r1, r8
 8009e28:	eddf 6a7f 	vldr	s13, [pc, #508]	; 800a028 <forward_dense+0x410>
 8009e2c:	ed12 7a0f 	vldr	s14, [r2, #-60]	; 0xffffffc4
 8009e30:	3910      	subs	r1, #16
 8009e32:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8009e36:	3240      	adds	r2, #64	; 0x40
 8009e38:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 8009e3c:	290f      	cmp	r1, #15
 8009e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e42:	ed12 7a20 	vldr	s14, [r2, #-128]	; 0xffffff80
 8009e46:	ed12 2a1e 	vldr	s4, [r2, #-120]	; 0xffffff88
 8009e4a:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8009e4e:	ed13 3a1e 	vldr	s6, [r3, #-120]	; 0xffffff88
 8009e52:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009e56:	ed52 3a1d 	vldr	s7, [r2, #-116]	; 0xffffff8c
 8009e5a:	ed13 4a1d 	vldr	s8, [r3, #-116]	; 0xffffff8c
 8009e5e:	ed52 4a1c 	vldr	s9, [r2, #-112]	; 0xffffff90
 8009e62:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 8009e66:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 8009e6a:	ed12 7a1b 	vldr	s14, [r2, #-108]	; 0xffffff94
 8009e6e:	eee2 7a03 	vfma.f32	s15, s4, s6
 8009e72:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 8009e76:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 8009e7a:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 8009e7e:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 8009e82:	ed53 9a18 	vldr	s19, [r3, #-96]	; 0xffffffa0
 8009e86:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 8009e8a:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009e8e:	ed53 8a17 	vldr	s17, [r3, #-92]	; 0xffffffa4
 8009e92:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 8009e96:	ed13 0a16 	vldr	s0, [r3, #-88]	; 0xffffffa8
 8009e9a:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 8009e9e:	ed12 1a15 	vldr	s2, [r2, #-84]	; 0xffffffac
 8009ea2:	ed53 1a15 	vldr	s3, [r3, #-84]	; 0xffffffac
 8009ea6:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009eaa:	ed12 2a14 	vldr	s4, [r2, #-80]	; 0xffffffb0
 8009eae:	ed13 3a14 	vldr	s6, [r3, #-80]	; 0xffffffb0
 8009eb2:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 8009eb6:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8009eba:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 8009ebe:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8009ec2:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009ec6:	ed52 5a11 	vldr	s11, [r2, #-68]	; 0xffffffbc
 8009eca:	ed13 7a11 	vldr	s14, [r3, #-68]	; 0xffffffbc
 8009ece:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8009ed2:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8009ed6:	eee9 7a89 	vfma.f32	s15, s19, s18
 8009eda:	eee8 7a88 	vfma.f32	s15, s17, s16
 8009ede:	eee0 7a20 	vfma.f32	s15, s0, s1
 8009ee2:	eee1 7a21 	vfma.f32	s15, s2, s3
 8009ee6:	eee2 7a03 	vfma.f32	s15, s4, s6
 8009eea:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009eee:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009ef2:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009ef6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009efa:	d897      	bhi.n	8009e2c <forward_dense+0x214>
 8009efc:	eb05 010e 	add.w	r1, r5, lr
 8009f00:	465b      	mov	r3, fp
 8009f02:	4662      	mov	r2, ip
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d075      	beq.n	8009ff4 <forward_dense+0x3dc>
 8009f08:	ed91 7a00 	vldr	s14, [r1]
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	edd2 7a00 	vldr	s15, [r2]
 8009f12:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009f16:	d06d      	beq.n	8009ff4 <forward_dense+0x3dc>
 8009f18:	ed91 7a01 	vldr	s14, [r1, #4]
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	edd2 7a01 	vldr	s15, [r2, #4]
 8009f22:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009f26:	d065      	beq.n	8009ff4 <forward_dense+0x3dc>
 8009f28:	ed91 7a02 	vldr	s14, [r1, #8]
 8009f2c:	2b03      	cmp	r3, #3
 8009f2e:	edd2 7a02 	vldr	s15, [r2, #8]
 8009f32:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009f36:	d05d      	beq.n	8009ff4 <forward_dense+0x3dc>
 8009f38:	ed91 7a03 	vldr	s14, [r1, #12]
 8009f3c:	2b04      	cmp	r3, #4
 8009f3e:	edd2 7a03 	vldr	s15, [r2, #12]
 8009f42:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009f46:	d055      	beq.n	8009ff4 <forward_dense+0x3dc>
 8009f48:	ed91 7a04 	vldr	s14, [r1, #16]
 8009f4c:	2b05      	cmp	r3, #5
 8009f4e:	edd2 7a04 	vldr	s15, [r2, #16]
 8009f52:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009f56:	d04d      	beq.n	8009ff4 <forward_dense+0x3dc>
 8009f58:	ed91 7a05 	vldr	s14, [r1, #20]
 8009f5c:	2b06      	cmp	r3, #6
 8009f5e:	edd2 7a05 	vldr	s15, [r2, #20]
 8009f62:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009f66:	d045      	beq.n	8009ff4 <forward_dense+0x3dc>
 8009f68:	ed91 7a06 	vldr	s14, [r1, #24]
 8009f6c:	2b07      	cmp	r3, #7
 8009f6e:	edd2 7a06 	vldr	s15, [r2, #24]
 8009f72:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009f76:	d03d      	beq.n	8009ff4 <forward_dense+0x3dc>
 8009f78:	ed91 7a07 	vldr	s14, [r1, #28]
 8009f7c:	2b08      	cmp	r3, #8
 8009f7e:	edd2 7a07 	vldr	s15, [r2, #28]
 8009f82:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009f86:	d035      	beq.n	8009ff4 <forward_dense+0x3dc>
 8009f88:	ed91 7a08 	vldr	s14, [r1, #32]
 8009f8c:	2b09      	cmp	r3, #9
 8009f8e:	edd2 7a08 	vldr	s15, [r2, #32]
 8009f92:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009f96:	d02d      	beq.n	8009ff4 <forward_dense+0x3dc>
 8009f98:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8009f9c:	2b0a      	cmp	r3, #10
 8009f9e:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8009fa2:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009fa6:	d025      	beq.n	8009ff4 <forward_dense+0x3dc>
 8009fa8:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8009fac:	2b0b      	cmp	r3, #11
 8009fae:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8009fb2:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009fb6:	d01d      	beq.n	8009ff4 <forward_dense+0x3dc>
 8009fb8:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8009fbc:	2b0c      	cmp	r3, #12
 8009fbe:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8009fc2:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009fc6:	d015      	beq.n	8009ff4 <forward_dense+0x3dc>
 8009fc8:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8009fcc:	2b0d      	cmp	r3, #13
 8009fce:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8009fd2:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009fd6:	d00d      	beq.n	8009ff4 <forward_dense+0x3dc>
 8009fd8:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8009fdc:	2b0e      	cmp	r3, #14
 8009fde:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8009fe2:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009fe6:	d005      	beq.n	8009ff4 <forward_dense+0x3dc>
 8009fe8:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8009fec:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8009ff0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009ff4:	ee76 6a26 	vadd.f32	s13, s12, s13
 8009ff8:	444d      	add	r5, r9
 8009ffa:	ece0 6a01 	vstmia	r0!, {s13}
 8009ffe:	42b0      	cmp	r0, r6
 800a000:	f4bf aeac 	bcs.w	8009d5c <forward_dense+0x144>
 800a004:	2c00      	cmp	r4, #0
 800a006:	f47f af02 	bne.w	8009e0e <forward_dense+0x1f6>
 800a00a:	f1b8 0f0f 	cmp.w	r8, #15
 800a00e:	eeb0 6a62 	vmov.f32	s12, s5
 800a012:	f63f af04 	bhi.w	8009e1e <forward_dense+0x206>
 800a016:	4643      	mov	r3, r8
 800a018:	4629      	mov	r1, r5
 800a01a:	463a      	mov	r2, r7
 800a01c:	eddf 6a02 	vldr	s13, [pc, #8]	; 800a028 <forward_dense+0x410>
 800a020:	e770      	b.n	8009f04 <forward_dense+0x2ec>
 800a022:	461c      	mov	r4, r3
 800a024:	e673      	b.n	8009d0e <forward_dense+0xf6>
 800a026:	bf00      	nop
 800a028:	00000000 	.word	0x00000000
 800a02c:	4634      	mov	r4, r6
 800a02e:	4646      	mov	r6, r8
 800a030:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a034:	463b      	mov	r3, r7
 800a036:	4629      	mov	r1, r5
 800a038:	9400      	str	r4, [sp, #0]
 800a03a:	4652      	mov	r2, sl
 800a03c:	4640      	mov	r0, r8
 800a03e:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 800a042:	f7fd f9bf 	bl	80073c4 <ai_dict8_dot_array_f32>
 800a046:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a048:	444d      	add	r5, r9
 800a04a:	f84b 3b04 	str.w	r3, [fp], #4
 800a04e:	455e      	cmp	r6, fp
 800a050:	d8f0      	bhi.n	800a034 <forward_dense+0x41c>
 800a052:	46a0      	mov	r8, r4
 800a054:	e682      	b.n	8009d5c <forward_dense+0x144>
 800a056:	2300      	movs	r3, #0
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	deff      	udf	#255	; 0xff
 800a05c:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 800a060:	2f00      	cmp	r7, #0
 800a062:	f43f ae2c 	beq.w	8009cbe <forward_dense+0xa6>
 800a066:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a06a:	f000 fc5f 	bl	800a92c <ai_array_get_byte_size>
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	4602      	mov	r2, r0
 800a072:	4651      	mov	r1, sl
 800a074:	4618      	mov	r0, r3
 800a076:	469a      	mov	sl, r3
 800a078:	f000 fcaa 	bl	800a9d0 <memcpy>
 800a07c:	e61f      	b.n	8009cbe <forward_dense+0xa6>
 800a07e:	2300      	movs	r3, #0
 800a080:	9307      	str	r3, [sp, #28]
 800a082:	e5f3      	b.n	8009c6c <forward_dense+0x54>
 800a084:	9306      	str	r3, [sp, #24]
 800a086:	e5e4      	b.n	8009c52 <forward_dense+0x3a>

0800a088 <nl_func_relu_array_f32>:
 800a088:	b430      	push	{r4, r5}
 800a08a:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 800a08e:	698d      	ldr	r5, [r1, #24]
 800a090:	6981      	ldr	r1, [r0, #24]
 800a092:	4414      	add	r4, r2
 800a094:	68ab      	ldr	r3, [r5, #8]
 800a096:	6889      	ldr	r1, [r1, #8]
 800a098:	00a4      	lsls	r4, r4, #2
 800a09a:	191b      	adds	r3, r3, r4
 800a09c:	d210      	bcs.n	800a0c0 <nl_func_relu_array_f32+0x38>
 800a09e:	3404      	adds	r4, #4
 800a0a0:	3304      	adds	r3, #4
 800a0a2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800a0c4 <nl_func_relu_array_f32+0x3c>
 800a0a6:	4421      	add	r1, r4
 800a0a8:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a0ac:	f1a3 0208 	sub.w	r2, r3, #8
 800a0b0:	3b04      	subs	r3, #4
 800a0b2:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800a0b6:	ed61 7a01 	vstmdb	r1!, {s15}
 800a0ba:	68a8      	ldr	r0, [r5, #8]
 800a0bc:	4290      	cmp	r0, r2
 800a0be:	d9f3      	bls.n	800a0a8 <nl_func_relu_array_f32+0x20>
 800a0c0:	bc30      	pop	{r4, r5}
 800a0c2:	4770      	bx	lr
 800a0c4:	00000000 	.word	0x00000000

0800a0c8 <nl_func_sm_array_f32>:
 800a0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0cc:	ed2d 8b04 	vpush	{d8-d9}
 800a0d0:	b089      	sub	sp, #36	; 0x24
 800a0d2:	698f      	ldr	r7, [r1, #24]
 800a0d4:	6986      	ldr	r6, [r0, #24]
 800a0d6:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 800a0da:	68bd      	ldr	r5, [r7, #8]
 800a0dc:	eba2 040e 	sub.w	r4, r2, lr
 800a0e0:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 800a0e4:	9602      	str	r6, [sp, #8]
 800a0e6:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 800a0ea:	68fc      	ldr	r4, [r7, #12]
 800a0ec:	68b6      	ldr	r6, [r6, #8]
 800a0ee:	eba2 020c 	sub.w	r2, r2, ip
 800a0f2:	42a5      	cmp	r5, r4
 800a0f4:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 800a0f8:	d351      	bcc.n	800a19e <nl_func_sm_array_f32+0xd6>
 800a0fa:	9303      	str	r3, [sp, #12]
 800a0fc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800a106:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800a10a:	f1ce 0200 	rsb	r2, lr, #0
 800a10e:	9301      	str	r3, [sp, #4]
 800a110:	f1cc 0300 	rsb	r3, ip, #0
 800a114:	9204      	str	r2, [sp, #16]
 800a116:	e9cd 1006 	strd	r1, r0, [sp, #24]
 800a11a:	9305      	str	r3, [sp, #20]
 800a11c:	9b02      	ldr	r3, [sp, #8]
 800a11e:	9a07      	ldr	r2, [sp, #28]
 800a120:	60bd      	str	r5, [r7, #8]
 800a122:	609e      	str	r6, [r3, #8]
 800a124:	9b06      	ldr	r3, [sp, #24]
 800a126:	6992      	ldr	r2, [r2, #24]
 800a128:	699b      	ldr	r3, [r3, #24]
 800a12a:	6894      	ldr	r4, [r2, #8]
 800a12c:	9a03      	ldr	r2, [sp, #12]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	2a01      	cmp	r2, #1
 800a132:	ed93 8a00 	vldr	s16, [r3]
 800a136:	d93b      	bls.n	800a1b0 <nl_func_sm_array_f32+0xe8>
 800a138:	9901      	ldr	r1, [sp, #4]
 800a13a:	1d1a      	adds	r2, r3, #4
 800a13c:	eb03 0b01 	add.w	fp, r3, r1
 800a140:	ecf2 7a01 	vldmia	r2!, {s15}
 800a144:	4593      	cmp	fp, r2
 800a146:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 800a14a:	d1f9      	bne.n	800a140 <nl_func_sm_array_f32+0x78>
 800a14c:	469a      	mov	sl, r3
 800a14e:	46a1      	mov	r9, r4
 800a150:	46a0      	mov	r8, r4
 800a152:	eddf 8a1a 	vldr	s17, [pc, #104]	; 800a1bc <nl_func_sm_array_f32+0xf4>
 800a156:	ecba 0a01 	vldmia	sl!, {s0}
 800a15a:	ee30 0a48 	vsub.f32	s0, s0, s16
 800a15e:	f001 fddd 	bl	800bd1c <expf>
 800a162:	45d3      	cmp	fp, sl
 800a164:	eca8 0a01 	vstmia	r8!, {s0}
 800a168:	ee78 8a80 	vadd.f32	s17, s17, s0
 800a16c:	d1f3      	bne.n	800a156 <nl_func_sm_array_f32+0x8e>
 800a16e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800a172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a176:	d00b      	beq.n	800a190 <nl_func_sm_array_f32+0xc8>
 800a178:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800a17c:	9b01      	ldr	r3, [sp, #4]
 800a17e:	441c      	add	r4, r3
 800a180:	edd9 7a00 	vldr	s15, [r9]
 800a184:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a188:	ece9 7a01 	vstmia	r9!, {s15}
 800a18c:	454c      	cmp	r4, r9
 800a18e:	d1f7      	bne.n	800a180 <nl_func_sm_array_f32+0xb8>
 800a190:	9b04      	ldr	r3, [sp, #16]
 800a192:	68fc      	ldr	r4, [r7, #12]
 800a194:	441d      	add	r5, r3
 800a196:	9b05      	ldr	r3, [sp, #20]
 800a198:	42ac      	cmp	r4, r5
 800a19a:	441e      	add	r6, r3
 800a19c:	d9be      	bls.n	800a11c <nl_func_sm_array_f32+0x54>
 800a19e:	9a02      	ldr	r2, [sp, #8]
 800a1a0:	60bc      	str	r4, [r7, #8]
 800a1a2:	68d3      	ldr	r3, [r2, #12]
 800a1a4:	6093      	str	r3, [r2, #8]
 800a1a6:	b009      	add	sp, #36	; 0x24
 800a1a8:	ecbd 8b04 	vpop	{d8-d9}
 800a1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1b0:	2a00      	cmp	r2, #0
 800a1b2:	d0ed      	beq.n	800a190 <nl_func_sm_array_f32+0xc8>
 800a1b4:	9a01      	ldr	r2, [sp, #4]
 800a1b6:	eb03 0b02 	add.w	fp, r3, r2
 800a1ba:	e7c7      	b.n	800a14c <nl_func_sm_array_f32+0x84>
 800a1bc:	00000000 	.word	0x00000000

0800a1c0 <nl_func_relu_generic_array_f32>:
 800a1c0:	b470      	push	{r4, r5, r6}
 800a1c2:	edd3 6a02 	vldr	s13, [r3, #8]
 800a1c6:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 800a1ca:	6985      	ldr	r5, [r0, #24]
 800a1cc:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a1d0:	4414      	add	r4, r2
 800a1d2:	6989      	ldr	r1, [r1, #24]
 800a1d4:	00a4      	lsls	r4, r4, #2
 800a1d6:	68aa      	ldr	r2, [r5, #8]
 800a1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1dc:	6888      	ldr	r0, [r1, #8]
 800a1de:	4422      	add	r2, r4
 800a1e0:	ed93 7a00 	vldr	s14, [r3]
 800a1e4:	4404      	add	r4, r0
 800a1e6:	ed93 6a01 	vldr	s12, [r3, #4]
 800a1ea:	d420      	bmi.n	800a22e <nl_func_relu_generic_array_f32+0x6e>
 800a1ec:	42a0      	cmp	r0, r4
 800a1ee:	d83b      	bhi.n	800a268 <nl_func_relu_generic_array_f32+0xa8>
 800a1f0:	1d23      	adds	r3, r4, #4
 800a1f2:	3204      	adds	r2, #4
 800a1f4:	e010      	b.n	800a218 <nl_func_relu_generic_array_f32+0x58>
 800a1f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a1fa:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800a1fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a202:	d501      	bpl.n	800a208 <nl_func_relu_generic_array_f32+0x48>
 800a204:	ee65 7a86 	vmul.f32	s15, s11, s12
 800a208:	f1a3 0408 	sub.w	r4, r3, #8
 800a20c:	ed62 7a01 	vstmdb	r2!, {s15}
 800a210:	4603      	mov	r3, r0
 800a212:	6888      	ldr	r0, [r1, #8]
 800a214:	4284      	cmp	r4, r0
 800a216:	d327      	bcc.n	800a268 <nl_func_relu_generic_array_f32+0xa8>
 800a218:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a21c:	1f18      	subs	r0, r3, #4
 800a21e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800a222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a226:	d4e6      	bmi.n	800a1f6 <nl_func_relu_generic_array_f32+0x36>
 800a228:	eef0 7a66 	vmov.f32	s15, s13
 800a22c:	e7ec      	b.n	800a208 <nl_func_relu_generic_array_f32+0x48>
 800a22e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800a232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a236:	d019      	beq.n	800a26c <nl_func_relu_generic_array_f32+0xac>
 800a238:	42a0      	cmp	r0, r4
 800a23a:	d815      	bhi.n	800a268 <nl_func_relu_generic_array_f32+0xa8>
 800a23c:	1d23      	adds	r3, r4, #4
 800a23e:	3204      	adds	r2, #4
 800a240:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a244:	1f18      	subs	r0, r3, #4
 800a246:	f1a3 0508 	sub.w	r5, r3, #8
 800a24a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a24e:	4603      	mov	r3, r0
 800a250:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800a254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a258:	ee66 6a86 	vmul.f32	s13, s13, s12
 800a25c:	d51c      	bpl.n	800a298 <nl_func_relu_generic_array_f32+0xd8>
 800a25e:	ed62 6a01 	vstmdb	r2!, {s13}
 800a262:	6888      	ldr	r0, [r1, #8]
 800a264:	42a8      	cmp	r0, r5
 800a266:	d9eb      	bls.n	800a240 <nl_func_relu_generic_array_f32+0x80>
 800a268:	bc70      	pop	{r4, r5, r6}
 800a26a:	4770      	bx	lr
 800a26c:	42a0      	cmp	r0, r4
 800a26e:	d8fb      	bhi.n	800a268 <nl_func_relu_generic_array_f32+0xa8>
 800a270:	1d23      	adds	r3, r4, #4
 800a272:	3204      	adds	r2, #4
 800a274:	2600      	movs	r6, #0
 800a276:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a27a:	1f18      	subs	r0, r3, #4
 800a27c:	f1a3 0508 	sub.w	r5, r3, #8
 800a280:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a284:	4603      	mov	r3, r0
 800a286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a28a:	db0b      	blt.n	800a2a4 <nl_func_relu_generic_array_f32+0xe4>
 800a28c:	ed62 7a01 	vstmdb	r2!, {s15}
 800a290:	6888      	ldr	r0, [r1, #8]
 800a292:	42a8      	cmp	r0, r5
 800a294:	d9ef      	bls.n	800a276 <nl_func_relu_generic_array_f32+0xb6>
 800a296:	e7e7      	b.n	800a268 <nl_func_relu_generic_array_f32+0xa8>
 800a298:	ed62 7a01 	vstmdb	r2!, {s15}
 800a29c:	6888      	ldr	r0, [r1, #8]
 800a29e:	42a8      	cmp	r0, r5
 800a2a0:	d9ce      	bls.n	800a240 <nl_func_relu_generic_array_f32+0x80>
 800a2a2:	e7e1      	b.n	800a268 <nl_func_relu_generic_array_f32+0xa8>
 800a2a4:	f842 6d04 	str.w	r6, [r2, #-4]!
 800a2a8:	6888      	ldr	r0, [r1, #8]
 800a2aa:	42a8      	cmp	r0, r5
 800a2ac:	d9e3      	bls.n	800a276 <nl_func_relu_generic_array_f32+0xb6>
 800a2ae:	e7db      	b.n	800a268 <nl_func_relu_generic_array_f32+0xa8>

0800a2b0 <forward_relu>:
 800a2b0:	6982      	ldr	r2, [r0, #24]
 800a2b2:	8813      	ldrh	r3, [r2, #0]
 800a2b4:	b333      	cbz	r3, 800a304 <forward_relu+0x54>
 800a2b6:	6852      	ldr	r2, [r2, #4]
 800a2b8:	6851      	ldr	r1, [r2, #4]
 800a2ba:	b101      	cbz	r1, 800a2be <forward_relu+0xe>
 800a2bc:	6809      	ldr	r1, [r1, #0]
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d91d      	bls.n	800a2fe <forward_relu+0x4e>
 800a2c2:	b4f0      	push	{r4, r5, r6, r7}
 800a2c4:	6917      	ldr	r7, [r2, #16]
 800a2c6:	b107      	cbz	r7, 800a2ca <forward_relu+0x1a>
 800a2c8:	683f      	ldr	r7, [r7, #0]
 800a2ca:	688c      	ldr	r4, [r1, #8]
 800a2cc:	69c3      	ldr	r3, [r0, #28]
 800a2ce:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d043      	beq.n	800a35e <forward_relu+0xae>
 800a2d6:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 800a2da:	2d01      	cmp	r5, #1
 800a2dc:	d014      	beq.n	800a308 <forward_relu+0x58>
 800a2de:	2c00      	cmp	r4, #0
 800a2e0:	d06d      	beq.n	800a3be <forward_relu+0x10e>
 800a2e2:	68ce      	ldr	r6, [r1, #12]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800a2ea:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a2ee:	42a6      	cmp	r6, r4
 800a2f0:	fb05 f202 	mul.w	r2, r5, r2
 800a2f4:	d1f9      	bne.n	800a2ea <forward_relu+0x3a>
 800a2f6:	4638      	mov	r0, r7
 800a2f8:	bcf0      	pop	{r4, r5, r6, r7}
 800a2fa:	f7ff bf61 	b.w	800a1c0 <nl_func_relu_generic_array_f32>
 800a2fe:	2300      	movs	r3, #0
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	deff      	udf	#255	; 0xff
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	deff      	udf	#255	; 0xff
 800a308:	69ba      	ldr	r2, [r7, #24]
 800a30a:	698e      	ldr	r6, [r1, #24]
 800a30c:	6890      	ldr	r0, [r2, #8]
 800a30e:	ed93 7a00 	vldr	s14, [r3]
 800a312:	68b2      	ldr	r2, [r6, #8]
 800a314:	b184      	cbz	r4, 800a338 <forward_relu+0x88>
 800a316:	68cf      	ldr	r7, [r1, #12]
 800a318:	4629      	mov	r1, r5
 800a31a:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800a31e:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800a322:	42a7      	cmp	r7, r4
 800a324:	fb03 f101 	mul.w	r1, r3, r1
 800a328:	d1f9      	bne.n	800a31e <forward_relu+0x6e>
 800a32a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a32e:	440b      	add	r3, r1
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	18d2      	adds	r2, r2, r3
 800a334:	4418      	add	r0, r3
 800a336:	d238      	bcs.n	800a3aa <forward_relu+0xfa>
 800a338:	1d13      	adds	r3, r2, #4
 800a33a:	2400      	movs	r4, #0
 800a33c:	1d02      	adds	r2, r0, #4
 800a33e:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a342:	1f19      	subs	r1, r3, #4
 800a344:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a34c:	d82f      	bhi.n	800a3ae <forward_relu+0xfe>
 800a34e:	ed62 7a01 	vstmdb	r2!, {s15}
 800a352:	3b08      	subs	r3, #8
 800a354:	68b0      	ldr	r0, [r6, #8]
 800a356:	4298      	cmp	r0, r3
 800a358:	d827      	bhi.n	800a3aa <forward_relu+0xfa>
 800a35a:	460b      	mov	r3, r1
 800a35c:	e7ef      	b.n	800a33e <forward_relu+0x8e>
 800a35e:	69bb      	ldr	r3, [r7, #24]
 800a360:	698d      	ldr	r5, [r1, #24]
 800a362:	689a      	ldr	r2, [r3, #8]
 800a364:	68ab      	ldr	r3, [r5, #8]
 800a366:	b184      	cbz	r4, 800a38a <forward_relu+0xda>
 800a368:	68ce      	ldr	r6, [r1, #12]
 800a36a:	2101      	movs	r1, #1
 800a36c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800a370:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 800a374:	42a6      	cmp	r6, r4
 800a376:	fb00 f101 	mul.w	r1, r0, r1
 800a37a:	d1f9      	bne.n	800a370 <forward_relu+0xc0>
 800a37c:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 800a380:	4408      	add	r0, r1
 800a382:	0081      	lsls	r1, r0, #2
 800a384:	185b      	adds	r3, r3, r1
 800a386:	440a      	add	r2, r1
 800a388:	d20f      	bcs.n	800a3aa <forward_relu+0xfa>
 800a38a:	3304      	adds	r3, #4
 800a38c:	1d11      	adds	r1, r2, #4
 800a38e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800a3c4 <forward_relu+0x114>
 800a392:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a396:	f1a3 0208 	sub.w	r2, r3, #8
 800a39a:	3b04      	subs	r3, #4
 800a39c:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800a3a0:	ed61 7a01 	vstmdb	r1!, {s15}
 800a3a4:	68a8      	ldr	r0, [r5, #8]
 800a3a6:	4290      	cmp	r0, r2
 800a3a8:	d9f3      	bls.n	800a392 <forward_relu+0xe2>
 800a3aa:	bcf0      	pop	{r4, r5, r6, r7}
 800a3ac:	4770      	bx	lr
 800a3ae:	f842 4d04 	str.w	r4, [r2, #-4]!
 800a3b2:	3b08      	subs	r3, #8
 800a3b4:	68b0      	ldr	r0, [r6, #8]
 800a3b6:	4298      	cmp	r0, r3
 800a3b8:	d8f7      	bhi.n	800a3aa <forward_relu+0xfa>
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	e7bf      	b.n	800a33e <forward_relu+0x8e>
 800a3be:	2201      	movs	r2, #1
 800a3c0:	e799      	b.n	800a2f6 <forward_relu+0x46>
 800a3c2:	bf00      	nop
 800a3c4:	00000000 	.word	0x00000000

0800a3c8 <forward_sm>:
 800a3c8:	6982      	ldr	r2, [r0, #24]
 800a3ca:	8813      	ldrh	r3, [r2, #0]
 800a3cc:	b333      	cbz	r3, 800a41c <forward_sm+0x54>
 800a3ce:	6852      	ldr	r2, [r2, #4]
 800a3d0:	6851      	ldr	r1, [r2, #4]
 800a3d2:	b101      	cbz	r1, 800a3d6 <forward_sm+0xe>
 800a3d4:	6809      	ldr	r1, [r1, #0]
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d91d      	bls.n	800a416 <forward_sm+0x4e>
 800a3da:	6913      	ldr	r3, [r2, #16]
 800a3dc:	b1cb      	cbz	r3, 800a412 <forward_sm+0x4a>
 800a3de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3e0:	6818      	ldr	r0, [r3, #0]
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	688b      	ldr	r3, [r1, #8]
 800a3e6:	68cd      	ldr	r5, [r1, #12]
 800a3e8:	68c2      	ldr	r2, [r0, #12]
 800a3ea:	0a1b      	lsrs	r3, r3, #8
 800a3ec:	686e      	ldr	r6, [r5, #4]
 800a3ee:	6857      	ldr	r7, [r2, #4]
 800a3f0:	d016      	beq.n	800a420 <forward_sm+0x58>
 800a3f2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800a3fc:	429d      	cmp	r5, r3
 800a3fe:	fb04 f202 	mul.w	r2, r4, r2
 800a402:	d1f9      	bne.n	800a3f8 <forward_sm+0x30>
 800a404:	4633      	mov	r3, r6
 800a406:	9701      	str	r7, [sp, #4]
 800a408:	9600      	str	r6, [sp, #0]
 800a40a:	f7ff fe5d 	bl	800a0c8 <nl_func_sm_array_f32>
 800a40e:	b003      	add	sp, #12
 800a410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a412:	68db      	ldr	r3, [r3, #12]
 800a414:	deff      	udf	#255	; 0xff
 800a416:	2300      	movs	r3, #0
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	deff      	udf	#255	; 0xff
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	deff      	udf	#255	; 0xff
 800a420:	2201      	movs	r2, #1
 800a422:	e7ef      	b.n	800a404 <forward_sm+0x3c>

0800a424 <pool_func_mp_array_f32>:
 800a424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a428:	b099      	sub	sp, #100	; 0x64
 800a42a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800a42c:	9303      	str	r3, [sp, #12]
 800a42e:	6883      	ldr	r3, [r0, #8]
 800a430:	9100      	str	r1, [sp, #0]
 800a432:	9306      	str	r3, [sp, #24]
 800a434:	68a3      	ldr	r3, [r4, #8]
 800a436:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 800a43a:	9304      	str	r3, [sp, #16]
 800a43c:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 800a440:	9215      	str	r2, [sp, #84]	; 0x54
 800a442:	9308      	str	r3, [sp, #32]
 800a444:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 800a448:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
 800a44c:	9301      	str	r3, [sp, #4]
 800a44e:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 800a452:	ea52 0401 	orrs.w	r4, r2, r1
 800a456:	930e      	str	r3, [sp, #56]	; 0x38
 800a458:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
 800a45c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a45e:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
 800a462:	930c      	str	r3, [sp, #48]	; 0x30
 800a464:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
 800a468:	9311      	str	r3, [sp, #68]	; 0x44
 800a46a:	f040 80a1 	bne.w	800a5b0 <pool_func_mp_array_f32+0x18c>
 800a46e:	9b08      	ldr	r3, [sp, #32]
 800a470:	9d00      	ldr	r5, [sp, #0]
 800a472:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a474:	1b58      	subs	r0, r3, r5
 800a476:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800a478:	1e73      	subs	r3, r6, #1
 800a47a:	3801      	subs	r0, #1
 800a47c:	fb13 0307 	smlabb	r3, r3, r7, r0
 800a480:	0418      	lsls	r0, r3, #16
 800a482:	f140 8095 	bpl.w	800a5b0 <pool_func_mp_array_f32+0x18c>
 800a486:	9b01      	ldr	r3, [sp, #4]
 800a488:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a48a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800a48c:	1a18      	subs	r0, r3, r0
 800a48e:	1e7b      	subs	r3, r7, #1
 800a490:	3801      	subs	r0, #1
 800a492:	469c      	mov	ip, r3
 800a494:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a496:	fb1c 0303 	smlabb	r3, ip, r3, r0
 800a49a:	041b      	lsls	r3, r3, #16
 800a49c:	f140 8088 	bpl.w	800a5b0 <pool_func_mp_array_f32+0x18c>
 800a4a0:	2f00      	cmp	r7, #0
 800a4a2:	d07f      	beq.n	800a5a4 <pool_func_mp_array_f32+0x180>
 800a4a4:	2e00      	cmp	r6, #0
 800a4a6:	d07d      	beq.n	800a5a4 <pool_func_mp_array_f32+0x180>
 800a4a8:	9b03      	ldr	r3, [sp, #12]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d07a      	beq.n	800a5a4 <pool_func_mp_array_f32+0x180>
 800a4ae:	fb05 f203 	mul.w	r2, r5, r3
 800a4b2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800a4b6:	4623      	mov	r3, r4
 800a4b8:	9402      	str	r4, [sp, #8]
 800a4ba:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800a4be:	9409      	str	r4, [sp, #36]	; 0x24
 800a4c0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f9bd e008 	ldrsh.w	lr, [sp, #8]
 800a4c8:	fb01 f303 	mul.w	r3, r1, r3
 800a4cc:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 800a4d0:	4690      	mov	r8, r2
 800a4d2:	9205      	str	r2, [sp, #20]
 800a4d4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4d6:	9b00      	ldr	r3, [sp, #0]
 800a4d8:	920a      	str	r2, [sp, #40]	; 0x28
 800a4da:	fb03 f30e 	mul.w	r3, r3, lr
 800a4de:	930d      	str	r3, [sp, #52]	; 0x34
 800a4e0:	9b08      	ldr	r3, [sp, #32]
 800a4e2:	9307      	str	r3, [sp, #28]
 800a4e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4e6:	f04f 0c00 	mov.w	ip, #0
 800a4ea:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 800a4ee:	4498      	add	r8, r3
 800a4f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4f2:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 800a4f6:	4667      	mov	r7, ip
 800a4f8:	eb05 0903 	add.w	r9, r5, r3
 800a4fc:	9b03      	ldr	r3, [sp, #12]
 800a4fe:	fb03 f808 	mul.w	r8, r3, r8
 800a502:	fb03 f909 	mul.w	r9, r3, r9
 800a506:	4576      	cmp	r6, lr
 800a508:	dd4f      	ble.n	800a5aa <pool_func_mp_array_f32+0x186>
 800a50a:	eb07 0409 	add.w	r4, r7, r9
 800a50e:	9b06      	ldr	r3, [sp, #24]
 800a510:	4670      	mov	r0, lr
 800a512:	eddf 7a89 	vldr	s15, [pc, #548]	; 800a738 <pool_func_mp_array_f32+0x314>
 800a516:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a51a:	42a9      	cmp	r1, r5
 800a51c:	dd0a      	ble.n	800a534 <pool_func_mp_array_f32+0x110>
 800a51e:	4622      	mov	r2, r4
 800a520:	462b      	mov	r3, r5
 800a522:	3301      	adds	r3, #1
 800a524:	ed92 7a00 	vldr	s14, [r2]
 800a528:	4452      	add	r2, sl
 800a52a:	b21b      	sxth	r3, r3
 800a52c:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800a530:	4299      	cmp	r1, r3
 800a532:	d1f6      	bne.n	800a522 <pool_func_mp_array_f32+0xfe>
 800a534:	3001      	adds	r0, #1
 800a536:	445c      	add	r4, fp
 800a538:	b200      	sxth	r0, r0
 800a53a:	4286      	cmp	r6, r0
 800a53c:	d1ed      	bne.n	800a51a <pool_func_mp_array_f32+0xf6>
 800a53e:	eb08 0307 	add.w	r3, r8, r7
 800a542:	9a04      	ldr	r2, [sp, #16]
 800a544:	f10c 0c01 	add.w	ip, ip, #1
 800a548:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a54c:	fa0f fc8c 	sxth.w	ip, ip
 800a550:	edc3 7a00 	vstr	s15, [r3]
 800a554:	9b03      	ldr	r3, [sp, #12]
 800a556:	4667      	mov	r7, ip
 800a558:	459c      	cmp	ip, r3
 800a55a:	dbd4      	blt.n	800a506 <pool_func_mp_array_f32+0xe2>
 800a55c:	9b07      	ldr	r3, [sp, #28]
 800a55e:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a560:	461a      	mov	r2, r3
 800a562:	9b05      	ldr	r3, [sp, #20]
 800a564:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a566:	4403      	add	r3, r0
 800a568:	4402      	add	r2, r0
 800a56a:	3101      	adds	r1, #1
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	b209      	sxth	r1, r1
 800a570:	9305      	str	r3, [sp, #20]
 800a572:	b292      	uxth	r2, r2
 800a574:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a576:	4688      	mov	r8, r1
 800a578:	910a      	str	r1, [sp, #40]	; 0x28
 800a57a:	428b      	cmp	r3, r1
 800a57c:	9207      	str	r2, [sp, #28]
 800a57e:	dcb1      	bgt.n	800a4e4 <pool_func_mp_array_f32+0xc0>
 800a580:	9b01      	ldr	r3, [sp, #4]
 800a582:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800a584:	461a      	mov	r2, r3
 800a586:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a588:	9b02      	ldr	r3, [sp, #8]
 800a58a:	4402      	add	r2, r0
 800a58c:	3101      	adds	r1, #1
 800a58e:	4403      	add	r3, r0
 800a590:	b292      	uxth	r2, r2
 800a592:	b209      	sxth	r1, r1
 800a594:	9201      	str	r2, [sp, #4]
 800a596:	b29b      	uxth	r3, r3
 800a598:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a59a:	9302      	str	r3, [sp, #8]
 800a59c:	460b      	mov	r3, r1
 800a59e:	428a      	cmp	r2, r1
 800a5a0:	9109      	str	r1, [sp, #36]	; 0x24
 800a5a2:	dc8d      	bgt.n	800a4c0 <pool_func_mp_array_f32+0x9c>
 800a5a4:	b019      	add	sp, #100	; 0x64
 800a5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5aa:	eddf 7a63 	vldr	s15, [pc, #396]	; 800a738 <pool_func_mp_array_f32+0x314>
 800a5ae:	e7c6      	b.n	800a53e <pool_func_mp_array_f32+0x11a>
 800a5b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d0f6      	beq.n	800a5a4 <pool_func_mp_array_f32+0x180>
 800a5b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d0f3      	beq.n	800a5a4 <pool_func_mp_array_f32+0x180>
 800a5bc:	9d03      	ldr	r5, [sp, #12]
 800a5be:	2d00      	cmp	r5, #0
 800a5c0:	d0f0      	beq.n	800a5a4 <pool_func_mp_array_f32+0x180>
 800a5c2:	9b01      	ldr	r3, [sp, #4]
 800a5c4:	ea4f 0b85 	mov.w	fp, r5, lsl #2
 800a5c8:	1a9c      	subs	r4, r3, r2
 800a5ca:	9b08      	ldr	r3, [sp, #32]
 800a5cc:	4252      	negs	r2, r2
 800a5ce:	1a58      	subs	r0, r3, r1
 800a5d0:	9b00      	ldr	r3, [sp, #0]
 800a5d2:	b292      	uxth	r2, r2
 800a5d4:	4249      	negs	r1, r1
 800a5d6:	461e      	mov	r6, r3
 800a5d8:	462b      	mov	r3, r5
 800a5da:	b2a4      	uxth	r4, r4
 800a5dc:	9208      	str	r2, [sp, #32]
 800a5de:	fb06 f303 	mul.w	r3, r6, r3
 800a5e2:	2600      	movs	r6, #0
 800a5e4:	b280      	uxth	r0, r0
 800a5e6:	9412      	str	r4, [sp, #72]	; 0x48
 800a5e8:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800a5ec:	4632      	mov	r2, r6
 800a5ee:	b289      	uxth	r1, r1
 800a5f0:	9614      	str	r6, [sp, #80]	; 0x50
 800a5f2:	46d1      	mov	r9, sl
 800a5f4:	9016      	str	r0, [sp, #88]	; 0x58
 800a5f6:	9117      	str	r1, [sp, #92]	; 0x5c
 800a5f8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a5fa:	2000      	movs	r0, #0
 800a5fc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a5fe:	1e4b      	subs	r3, r1, #1
 800a600:	9d08      	ldr	r5, [sp, #32]
 800a602:	fb04 f202 	mul.w	r2, r4, r2
 800a606:	f8dd e054 	ldr.w	lr, [sp, #84]	; 0x54
 800a60a:	4698      	mov	r8, r3
 800a60c:	fa0f fa85 	sxth.w	sl, r5
 800a610:	920f      	str	r2, [sp, #60]	; 0x3c
 800a612:	b20a      	sxth	r2, r1
 800a614:	eba8 0805 	sub.w	r8, r8, r5
 800a618:	9b00      	ldr	r3, [sp, #0]
 800a61a:	9207      	str	r2, [sp, #28]
 800a61c:	fb03 f30a 	mul.w	r3, r3, sl
 800a620:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a622:	fa1f f888 	uxth.w	r8, r8
 800a626:	900d      	str	r0, [sp, #52]	; 0x34
 800a628:	9310      	str	r3, [sp, #64]	; 0x40
 800a62a:	4603      	mov	r3, r0
 800a62c:	920b      	str	r2, [sp, #44]	; 0x2c
 800a62e:	f108 0801 	add.w	r8, r8, #1
 800a632:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a634:	920a      	str	r2, [sp, #40]	; 0x28
 800a636:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a638:	f04f 0c00 	mov.w	ip, #0
 800a63c:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 800a640:	189a      	adds	r2, r3, r2
 800a642:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a644:	9903      	ldr	r1, [sp, #12]
 800a646:	18fb      	adds	r3, r7, r3
 800a648:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 800a64c:	fb01 f202 	mul.w	r2, r1, r2
 800a650:	fb01 f303 	mul.w	r3, r1, r3
 800a654:	9205      	str	r2, [sp, #20]
 800a656:	f8cd c004 	str.w	ip, [sp, #4]
 800a65a:	9309      	str	r3, [sp, #36]	; 0x24
 800a65c:	9b07      	ldr	r3, [sp, #28]
 800a65e:	4553      	cmp	r3, sl
 800a660:	dd67      	ble.n	800a732 <pool_func_mp_array_f32+0x30e>
 800a662:	9b01      	ldr	r3, [sp, #4]
 800a664:	2400      	movs	r4, #0
 800a666:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a668:	f8cd c008 	str.w	ip, [sp, #8]
 800a66c:	189e      	adds	r6, r3, r2
 800a66e:	9b06      	ldr	r3, [sp, #24]
 800a670:	eddf 7a31 	vldr	s15, [pc, #196]	; 800a738 <pool_func_mp_array_f32+0x314>
 800a674:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800a678:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a67c:	42bd      	cmp	r5, r7
 800a67e:	dd19      	ble.n	800a6b4 <pool_func_mp_array_f32+0x290>
 800a680:	eb0c 0204 	add.w	r2, ip, r4
 800a684:	eb0a 0304 	add.w	r3, sl, r4
 800a688:	43d2      	mvns	r2, r2
 800a68a:	459e      	cmp	lr, r3
 800a68c:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800a690:	dd10      	ble.n	800a6b4 <pool_func_mp_array_f32+0x290>
 800a692:	4631      	mov	r1, r6
 800a694:	463b      	mov	r3, r7
 800a696:	0418      	lsls	r0, r3, #16
 800a698:	d407      	bmi.n	800a6aa <pool_func_mp_array_f32+0x286>
 800a69a:	b132      	cbz	r2, 800a6aa <pool_func_mp_array_f32+0x286>
 800a69c:	9800      	ldr	r0, [sp, #0]
 800a69e:	4298      	cmp	r0, r3
 800a6a0:	dd03      	ble.n	800a6aa <pool_func_mp_array_f32+0x286>
 800a6a2:	ed91 7a00 	vldr	s14, [r1]
 800a6a6:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	4459      	add	r1, fp
 800a6ae:	b218      	sxth	r0, r3
 800a6b0:	4285      	cmp	r5, r0
 800a6b2:	dcf0      	bgt.n	800a696 <pool_func_mp_array_f32+0x272>
 800a6b4:	3401      	adds	r4, #1
 800a6b6:	444e      	add	r6, r9
 800a6b8:	45a0      	cmp	r8, r4
 800a6ba:	d1df      	bne.n	800a67c <pool_func_mp_array_f32+0x258>
 800a6bc:	f8dd c008 	ldr.w	ip, [sp, #8]
 800a6c0:	9b01      	ldr	r3, [sp, #4]
 800a6c2:	f10c 0c01 	add.w	ip, ip, #1
 800a6c6:	9a05      	ldr	r2, [sp, #20]
 800a6c8:	fa0f fc8c 	sxth.w	ip, ip
 800a6cc:	4413      	add	r3, r2
 800a6ce:	9a04      	ldr	r2, [sp, #16]
 800a6d0:	f8cd c004 	str.w	ip, [sp, #4]
 800a6d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a6d8:	edc3 7a00 	vstr	s15, [r3]
 800a6dc:	9b03      	ldr	r3, [sp, #12]
 800a6de:	459c      	cmp	ip, r3
 800a6e0:	dbbc      	blt.n	800a65c <pool_func_mp_array_f32+0x238>
 800a6e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6e4:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a6ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6ec:	4402      	add	r2, r0
 800a6ee:	3101      	adds	r1, #1
 800a6f0:	4403      	add	r3, r0
 800a6f2:	b292      	uxth	r2, r2
 800a6f4:	b209      	sxth	r1, r1
 800a6f6:	920b      	str	r2, [sp, #44]	; 0x2c
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6fc:	930a      	str	r3, [sp, #40]	; 0x28
 800a6fe:	460b      	mov	r3, r1
 800a700:	428a      	cmp	r2, r1
 800a702:	910d      	str	r1, [sp, #52]	; 0x34
 800a704:	dc97      	bgt.n	800a636 <pool_func_mp_array_f32+0x212>
 800a706:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a708:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800a70a:	461a      	mov	r2, r3
 800a70c:	9b08      	ldr	r3, [sp, #32]
 800a70e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800a710:	4403      	add	r3, r0
 800a712:	4402      	add	r2, r0
 800a714:	3101      	adds	r1, #1
 800a716:	b29b      	uxth	r3, r3
 800a718:	b209      	sxth	r1, r1
 800a71a:	9308      	str	r3, [sp, #32]
 800a71c:	b292      	uxth	r2, r2
 800a71e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a720:	9212      	str	r2, [sp, #72]	; 0x48
 800a722:	460a      	mov	r2, r1
 800a724:	428b      	cmp	r3, r1
 800a726:	9114      	str	r1, [sp, #80]	; 0x50
 800a728:	f73f af66 	bgt.w	800a5f8 <pool_func_mp_array_f32+0x1d4>
 800a72c:	b019      	add	sp, #100	; 0x64
 800a72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a732:	eddf 7a01 	vldr	s15, [pc, #4]	; 800a738 <pool_func_mp_array_f32+0x314>
 800a736:	e7c3      	b.n	800a6c0 <pool_func_mp_array_f32+0x29c>
 800a738:	cf000000 	.word	0xcf000000

0800a73c <ai_check_custom_types>:
 800a73c:	4b13      	ldr	r3, [pc, #76]	; (800a78c <ai_check_custom_types+0x50>)
 800a73e:	b082      	sub	sp, #8
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	9301      	str	r3, [sp, #4]
 800a744:	b118      	cbz	r0, 800a74e <ai_check_custom_types+0x12>
 800a746:	7803      	ldrb	r3, [r0, #0]
 800a748:	2b03      	cmp	r3, #3
 800a74a:	d002      	beq.n	800a752 <ai_check_custom_types+0x16>
 800a74c:	2000      	movs	r0, #0
 800a74e:	b002      	add	sp, #8
 800a750:	4770      	bx	lr
 800a752:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a756:	4293      	cmp	r3, r2
 800a758:	d004      	beq.n	800a764 <ai_check_custom_types+0x28>
 800a75a:	2001      	movs	r0, #1
 800a75c:	f080 0001 	eor.w	r0, r0, #1
 800a760:	b002      	add	sp, #8
 800a762:	4770      	bx	lr
 800a764:	7842      	ldrb	r2, [r0, #1]
 800a766:	3001      	adds	r0, #1
 800a768:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d1f4      	bne.n	800a75a <ai_check_custom_types+0x1e>
 800a770:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800a774:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d1ee      	bne.n	800a75a <ai_check_custom_types+0x1e>
 800a77c:	7842      	ldrb	r2, [r0, #1]
 800a77e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a782:	429a      	cmp	r2, r3
 800a784:	d1e9      	bne.n	800a75a <ai_check_custom_types+0x1e>
 800a786:	2000      	movs	r0, #0
 800a788:	e7e8      	b.n	800a75c <ai_check_custom_types+0x20>
 800a78a:	bf00      	nop
 800a78c:	0800bfe0 	.word	0x0800bfe0

0800a790 <ai_layers_init_all>:
 800a790:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a792:	b16a      	cbz	r2, 800a7b0 <ai_layers_init_all+0x20>
 800a794:	6913      	ldr	r3, [r2, #16]
 800a796:	60d0      	str	r0, [r2, #12]
 800a798:	429a      	cmp	r2, r3
 800a79a:	f04f 0201 	mov.w	r2, #1
 800a79e:	d007      	beq.n	800a7b0 <ai_layers_init_all+0x20>
 800a7a0:	b133      	cbz	r3, 800a7b0 <ai_layers_init_all+0x20>
 800a7a2:	6919      	ldr	r1, [r3, #16]
 800a7a4:	3201      	adds	r2, #1
 800a7a6:	60d8      	str	r0, [r3, #12]
 800a7a8:	4299      	cmp	r1, r3
 800a7aa:	bf18      	it	ne
 800a7ac:	2900      	cmpne	r1, #0
 800a7ae:	d101      	bne.n	800a7b4 <ai_layers_init_all+0x24>
 800a7b0:	4610      	mov	r0, r2
 800a7b2:	4770      	bx	lr
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	e7f4      	b.n	800a7a2 <ai_layers_init_all+0x12>

0800a7b8 <ai_layers_post_init_all>:
 800a7b8:	b538      	push	{r3, r4, r5, lr}
 800a7ba:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800a7bc:	b184      	cbz	r4, 800a7e0 <ai_layers_post_init_all+0x28>
 800a7be:	2500      	movs	r5, #0
 800a7c0:	6863      	ldr	r3, [r4, #4]
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	07db      	lsls	r3, r3, #31
 800a7c6:	d503      	bpl.n	800a7d0 <ai_layers_post_init_all+0x18>
 800a7c8:	6a23      	ldr	r3, [r4, #32]
 800a7ca:	b10b      	cbz	r3, 800a7d0 <ai_layers_post_init_all+0x18>
 800a7cc:	3501      	adds	r5, #1
 800a7ce:	4798      	blx	r3
 800a7d0:	6923      	ldr	r3, [r4, #16]
 800a7d2:	429c      	cmp	r4, r3
 800a7d4:	bf18      	it	ne
 800a7d6:	2b00      	cmpne	r3, #0
 800a7d8:	461c      	mov	r4, r3
 800a7da:	d1f1      	bne.n	800a7c0 <ai_layers_post_init_all+0x8>
 800a7dc:	4628      	mov	r0, r5
 800a7de:	bd38      	pop	{r3, r4, r5, pc}
 800a7e0:	4625      	mov	r5, r4
 800a7e2:	e7fb      	b.n	800a7dc <ai_layers_post_init_all+0x24>

0800a7e4 <ai_layers_forward_all>:
 800a7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7e8:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800a7ea:	4604      	mov	r4, r0
 800a7ec:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800a7ee:	2f00      	cmp	r7, #0
 800a7f0:	d02b      	beq.n	800a84a <ai_layers_forward_all+0x66>
 800a7f2:	2d00      	cmp	r5, #0
 800a7f4:	d03d      	beq.n	800a872 <ai_layers_forward_all+0x8e>
 800a7f6:	2600      	movs	r6, #0
 800a7f8:	6385      	str	r5, [r0, #56]	; 0x38
 800a7fa:	4629      	mov	r1, r5
 800a7fc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a7fe:	2001      	movs	r0, #1
 800a800:	46b0      	mov	r8, r6
 800a802:	47b8      	blx	r7
 800a804:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a806:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a808:	2002      	movs	r0, #2
 800a80a:	47b8      	blx	r7
 800a80c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800a80e:	696b      	ldr	r3, [r5, #20]
 800a810:	4628      	mov	r0, r5
 800a812:	4798      	blx	r3
 800a814:	692b      	ldr	r3, [r5, #16]
 800a816:	2003      	movs	r0, #3
 800a818:	429d      	cmp	r5, r3
 800a81a:	4619      	mov	r1, r3
 800a81c:	d009      	beq.n	800a832 <ai_layers_forward_all+0x4e>
 800a81e:	63a3      	str	r3, [r4, #56]	; 0x38
 800a820:	3601      	adds	r6, #1
 800a822:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a824:	47b8      	blx	r7
 800a826:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a828:	2900      	cmp	r1, #0
 800a82a:	d1ec      	bne.n	800a806 <ai_layers_forward_all+0x22>
 800a82c:	4630      	mov	r0, r6
 800a82e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a832:	2100      	movs	r1, #0
 800a834:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 800a838:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a83a:	3601      	adds	r6, #1
 800a83c:	47b8      	blx	r7
 800a83e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a840:	2900      	cmp	r1, #0
 800a842:	d1e0      	bne.n	800a806 <ai_layers_forward_all+0x22>
 800a844:	4630      	mov	r0, r6
 800a846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a84a:	b195      	cbz	r5, 800a872 <ai_layers_forward_all+0x8e>
 800a84c:	463e      	mov	r6, r7
 800a84e:	6385      	str	r5, [r0, #56]	; 0x38
 800a850:	696b      	ldr	r3, [r5, #20]
 800a852:	4628      	mov	r0, r5
 800a854:	4798      	blx	r3
 800a856:	692b      	ldr	r3, [r5, #16]
 800a858:	3601      	adds	r6, #1
 800a85a:	42ab      	cmp	r3, r5
 800a85c:	461d      	mov	r5, r3
 800a85e:	d003      	beq.n	800a868 <ai_layers_forward_all+0x84>
 800a860:	63a3      	str	r3, [r4, #56]	; 0x38
 800a862:	2b00      	cmp	r3, #0
 800a864:	d1f4      	bne.n	800a850 <ai_layers_forward_all+0x6c>
 800a866:	e7e1      	b.n	800a82c <ai_layers_forward_all+0x48>
 800a868:	2300      	movs	r3, #0
 800a86a:	4630      	mov	r0, r6
 800a86c:	63a3      	str	r3, [r4, #56]	; 0x38
 800a86e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a872:	462e      	mov	r6, r5
 800a874:	4630      	mov	r0, r6
 800a876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a87a:	bf00      	nop

0800a87c <ai_array_to_buffer_fmt>:
 800a87c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800a880:	2b02      	cmp	r3, #2
 800a882:	d029      	beq.n	800a8d8 <ai_array_to_buffer_fmt+0x5c>
 800a884:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800a888:	4a21      	ldr	r2, [pc, #132]	; (800a910 <ai_array_to_buffer_fmt+0x94>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d010      	beq.n	800a8b0 <ai_array_to_buffer_fmt+0x34>
 800a88e:	dd13      	ble.n	800a8b8 <ai_array_to_buffer_fmt+0x3c>
 800a890:	4a20      	ldr	r2, [pc, #128]	; (800a914 <ai_array_to_buffer_fmt+0x98>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d00c      	beq.n	800a8b0 <ai_array_to_buffer_fmt+0x34>
 800a896:	dc27      	bgt.n	800a8e8 <ai_array_to_buffer_fmt+0x6c>
 800a898:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d007      	beq.n	800a8b0 <ai_array_to_buffer_fmt+0x34>
 800a8a0:	3207      	adds	r2, #7
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d004      	beq.n	800a8b0 <ai_array_to_buffer_fmt+0x34>
 800a8a6:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d000      	beq.n	800a8b0 <ai_array_to_buffer_fmt+0x34>
 800a8ae:	2340      	movs	r3, #64	; 0x40
 800a8b0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800a8b4:	4318      	orrs	r0, r3
 800a8b6:	4770      	bx	lr
 800a8b8:	4a17      	ldr	r2, [pc, #92]	; (800a918 <ai_array_to_buffer_fmt+0x9c>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d0f8      	beq.n	800a8b0 <ai_array_to_buffer_fmt+0x34>
 800a8be:	dd1e      	ble.n	800a8fe <ai_array_to_buffer_fmt+0x82>
 800a8c0:	4a16      	ldr	r2, [pc, #88]	; (800a91c <ai_array_to_buffer_fmt+0xa0>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d0f4      	beq.n	800a8b0 <ai_array_to_buffer_fmt+0x34>
 800a8c6:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d0f0      	beq.n	800a8b0 <ai_array_to_buffer_fmt+0x34>
 800a8ce:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d1eb      	bne.n	800a8ae <ai_array_to_buffer_fmt+0x32>
 800a8d6:	e7eb      	b.n	800a8b0 <ai_array_to_buffer_fmt+0x34>
 800a8d8:	4b11      	ldr	r3, [pc, #68]	; (800a920 <ai_array_to_buffer_fmt+0xa4>)
 800a8da:	4003      	ands	r3, r0
 800a8dc:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800a8e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a8e4:	4318      	orrs	r0, r3
 800a8e6:	4770      	bx	lr
 800a8e8:	4a0e      	ldr	r2, [pc, #56]	; (800a924 <ai_array_to_buffer_fmt+0xa8>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d0e0      	beq.n	800a8b0 <ai_array_to_buffer_fmt+0x34>
 800a8ee:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d0dc      	beq.n	800a8b0 <ai_array_to_buffer_fmt+0x34>
 800a8f6:	4a0c      	ldr	r2, [pc, #48]	; (800a928 <ai_array_to_buffer_fmt+0xac>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d1d8      	bne.n	800a8ae <ai_array_to_buffer_fmt+0x32>
 800a8fc:	e7d8      	b.n	800a8b0 <ai_array_to_buffer_fmt+0x34>
 800a8fe:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800a902:	4293      	cmp	r3, r2
 800a904:	d0d4      	beq.n	800a8b0 <ai_array_to_buffer_fmt+0x34>
 800a906:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d0d0      	beq.n	800a8b0 <ai_array_to_buffer_fmt+0x34>
 800a90e:	e7ce      	b.n	800a8ae <ai_array_to_buffer_fmt+0x32>
 800a910:	00060440 	.word	0x00060440
 800a914:	00840840 	.word	0x00840840
 800a918:	00040447 	.word	0x00040447
 800a91c:	0004084f 	.word	0x0004084f
 800a920:	00803fff 	.word	0x00803fff
 800a924:	00841040 	.word	0x00841040
 800a928:	0084084f 	.word	0x0084084f

0800a92c <ai_array_get_byte_size>:
 800a92c:	b1e1      	cbz	r1, 800a968 <ai_array_get_byte_size+0x3c>
 800a92e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800a932:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800a936:	b410      	push	{r4}
 800a938:	f3c0 3482 	ubfx	r4, r0, #14, #3
 800a93c:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800a940:	4423      	add	r3, r4
 800a942:	2804      	cmp	r0, #4
 800a944:	fb01 f103 	mul.w	r1, r1, r3
 800a948:	f101 0107 	add.w	r1, r1, #7
 800a94c:	f021 0107 	bic.w	r1, r1, #7
 800a950:	fa21 f102 	lsr.w	r1, r1, r2
 800a954:	d00a      	beq.n	800a96c <ai_array_get_byte_size+0x40>
 800a956:	2808      	cmp	r0, #8
 800a958:	d101      	bne.n	800a95e <ai_array_get_byte_size+0x32>
 800a95a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800a95e:	3107      	adds	r1, #7
 800a960:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a964:	08c8      	lsrs	r0, r1, #3
 800a966:	4770      	bx	lr
 800a968:	4608      	mov	r0, r1
 800a96a:	4770      	bx	lr
 800a96c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800a970:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a974:	3107      	adds	r1, #7
 800a976:	08c8      	lsrs	r0, r1, #3
 800a978:	4770      	bx	lr
 800a97a:	bf00      	nop

0800a97c <__errno>:
 800a97c:	4b01      	ldr	r3, [pc, #4]	; (800a984 <__errno+0x8>)
 800a97e:	6818      	ldr	r0, [r3, #0]
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	20000a58 	.word	0x20000a58

0800a988 <__libc_init_array>:
 800a988:	b570      	push	{r4, r5, r6, lr}
 800a98a:	4d0d      	ldr	r5, [pc, #52]	; (800a9c0 <__libc_init_array+0x38>)
 800a98c:	4c0d      	ldr	r4, [pc, #52]	; (800a9c4 <__libc_init_array+0x3c>)
 800a98e:	1b64      	subs	r4, r4, r5
 800a990:	10a4      	asrs	r4, r4, #2
 800a992:	2600      	movs	r6, #0
 800a994:	42a6      	cmp	r6, r4
 800a996:	d109      	bne.n	800a9ac <__libc_init_array+0x24>
 800a998:	4d0b      	ldr	r5, [pc, #44]	; (800a9c8 <__libc_init_array+0x40>)
 800a99a:	4c0c      	ldr	r4, [pc, #48]	; (800a9cc <__libc_init_array+0x44>)
 800a99c:	f001 fb0e 	bl	800bfbc <_init>
 800a9a0:	1b64      	subs	r4, r4, r5
 800a9a2:	10a4      	asrs	r4, r4, #2
 800a9a4:	2600      	movs	r6, #0
 800a9a6:	42a6      	cmp	r6, r4
 800a9a8:	d105      	bne.n	800a9b6 <__libc_init_array+0x2e>
 800a9aa:	bd70      	pop	{r4, r5, r6, pc}
 800a9ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9b0:	4798      	blx	r3
 800a9b2:	3601      	adds	r6, #1
 800a9b4:	e7ee      	b.n	800a994 <__libc_init_array+0xc>
 800a9b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9ba:	4798      	blx	r3
 800a9bc:	3601      	adds	r6, #1
 800a9be:	e7f2      	b.n	800a9a6 <__libc_init_array+0x1e>
 800a9c0:	08069ad8 	.word	0x08069ad8
 800a9c4:	08069ad8 	.word	0x08069ad8
 800a9c8:	08069ad8 	.word	0x08069ad8
 800a9cc:	08069adc 	.word	0x08069adc

0800a9d0 <memcpy>:
 800a9d0:	440a      	add	r2, r1
 800a9d2:	4291      	cmp	r1, r2
 800a9d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9d8:	d100      	bne.n	800a9dc <memcpy+0xc>
 800a9da:	4770      	bx	lr
 800a9dc:	b510      	push	{r4, lr}
 800a9de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9e6:	4291      	cmp	r1, r2
 800a9e8:	d1f9      	bne.n	800a9de <memcpy+0xe>
 800a9ea:	bd10      	pop	{r4, pc}

0800a9ec <memset>:
 800a9ec:	4402      	add	r2, r0
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d100      	bne.n	800a9f6 <memset+0xa>
 800a9f4:	4770      	bx	lr
 800a9f6:	f803 1b01 	strb.w	r1, [r3], #1
 800a9fa:	e7f9      	b.n	800a9f0 <memset+0x4>

0800a9fc <_free_r>:
 800a9fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9fe:	2900      	cmp	r1, #0
 800aa00:	d048      	beq.n	800aa94 <_free_r+0x98>
 800aa02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa06:	9001      	str	r0, [sp, #4]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f1a1 0404 	sub.w	r4, r1, #4
 800aa0e:	bfb8      	it	lt
 800aa10:	18e4      	addlt	r4, r4, r3
 800aa12:	f000 fc39 	bl	800b288 <__malloc_lock>
 800aa16:	4a20      	ldr	r2, [pc, #128]	; (800aa98 <_free_r+0x9c>)
 800aa18:	9801      	ldr	r0, [sp, #4]
 800aa1a:	6813      	ldr	r3, [r2, #0]
 800aa1c:	4615      	mov	r5, r2
 800aa1e:	b933      	cbnz	r3, 800aa2e <_free_r+0x32>
 800aa20:	6063      	str	r3, [r4, #4]
 800aa22:	6014      	str	r4, [r2, #0]
 800aa24:	b003      	add	sp, #12
 800aa26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa2a:	f000 bc33 	b.w	800b294 <__malloc_unlock>
 800aa2e:	42a3      	cmp	r3, r4
 800aa30:	d90b      	bls.n	800aa4a <_free_r+0x4e>
 800aa32:	6821      	ldr	r1, [r4, #0]
 800aa34:	1862      	adds	r2, r4, r1
 800aa36:	4293      	cmp	r3, r2
 800aa38:	bf04      	itt	eq
 800aa3a:	681a      	ldreq	r2, [r3, #0]
 800aa3c:	685b      	ldreq	r3, [r3, #4]
 800aa3e:	6063      	str	r3, [r4, #4]
 800aa40:	bf04      	itt	eq
 800aa42:	1852      	addeq	r2, r2, r1
 800aa44:	6022      	streq	r2, [r4, #0]
 800aa46:	602c      	str	r4, [r5, #0]
 800aa48:	e7ec      	b.n	800aa24 <_free_r+0x28>
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	b10b      	cbz	r3, 800aa54 <_free_r+0x58>
 800aa50:	42a3      	cmp	r3, r4
 800aa52:	d9fa      	bls.n	800aa4a <_free_r+0x4e>
 800aa54:	6811      	ldr	r1, [r2, #0]
 800aa56:	1855      	adds	r5, r2, r1
 800aa58:	42a5      	cmp	r5, r4
 800aa5a:	d10b      	bne.n	800aa74 <_free_r+0x78>
 800aa5c:	6824      	ldr	r4, [r4, #0]
 800aa5e:	4421      	add	r1, r4
 800aa60:	1854      	adds	r4, r2, r1
 800aa62:	42a3      	cmp	r3, r4
 800aa64:	6011      	str	r1, [r2, #0]
 800aa66:	d1dd      	bne.n	800aa24 <_free_r+0x28>
 800aa68:	681c      	ldr	r4, [r3, #0]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	6053      	str	r3, [r2, #4]
 800aa6e:	4421      	add	r1, r4
 800aa70:	6011      	str	r1, [r2, #0]
 800aa72:	e7d7      	b.n	800aa24 <_free_r+0x28>
 800aa74:	d902      	bls.n	800aa7c <_free_r+0x80>
 800aa76:	230c      	movs	r3, #12
 800aa78:	6003      	str	r3, [r0, #0]
 800aa7a:	e7d3      	b.n	800aa24 <_free_r+0x28>
 800aa7c:	6825      	ldr	r5, [r4, #0]
 800aa7e:	1961      	adds	r1, r4, r5
 800aa80:	428b      	cmp	r3, r1
 800aa82:	bf04      	itt	eq
 800aa84:	6819      	ldreq	r1, [r3, #0]
 800aa86:	685b      	ldreq	r3, [r3, #4]
 800aa88:	6063      	str	r3, [r4, #4]
 800aa8a:	bf04      	itt	eq
 800aa8c:	1949      	addeq	r1, r1, r5
 800aa8e:	6021      	streq	r1, [r4, #0]
 800aa90:	6054      	str	r4, [r2, #4]
 800aa92:	e7c7      	b.n	800aa24 <_free_r+0x28>
 800aa94:	b003      	add	sp, #12
 800aa96:	bd30      	pop	{r4, r5, pc}
 800aa98:	2000829c 	.word	0x2000829c

0800aa9c <_malloc_r>:
 800aa9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa9e:	1ccd      	adds	r5, r1, #3
 800aaa0:	f025 0503 	bic.w	r5, r5, #3
 800aaa4:	3508      	adds	r5, #8
 800aaa6:	2d0c      	cmp	r5, #12
 800aaa8:	bf38      	it	cc
 800aaaa:	250c      	movcc	r5, #12
 800aaac:	2d00      	cmp	r5, #0
 800aaae:	4606      	mov	r6, r0
 800aab0:	db01      	blt.n	800aab6 <_malloc_r+0x1a>
 800aab2:	42a9      	cmp	r1, r5
 800aab4:	d903      	bls.n	800aabe <_malloc_r+0x22>
 800aab6:	230c      	movs	r3, #12
 800aab8:	6033      	str	r3, [r6, #0]
 800aaba:	2000      	movs	r0, #0
 800aabc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aabe:	f000 fbe3 	bl	800b288 <__malloc_lock>
 800aac2:	4921      	ldr	r1, [pc, #132]	; (800ab48 <_malloc_r+0xac>)
 800aac4:	680a      	ldr	r2, [r1, #0]
 800aac6:	4614      	mov	r4, r2
 800aac8:	b99c      	cbnz	r4, 800aaf2 <_malloc_r+0x56>
 800aaca:	4f20      	ldr	r7, [pc, #128]	; (800ab4c <_malloc_r+0xb0>)
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	b923      	cbnz	r3, 800aada <_malloc_r+0x3e>
 800aad0:	4621      	mov	r1, r4
 800aad2:	4630      	mov	r0, r6
 800aad4:	f000 f8ca 	bl	800ac6c <_sbrk_r>
 800aad8:	6038      	str	r0, [r7, #0]
 800aada:	4629      	mov	r1, r5
 800aadc:	4630      	mov	r0, r6
 800aade:	f000 f8c5 	bl	800ac6c <_sbrk_r>
 800aae2:	1c43      	adds	r3, r0, #1
 800aae4:	d123      	bne.n	800ab2e <_malloc_r+0x92>
 800aae6:	230c      	movs	r3, #12
 800aae8:	6033      	str	r3, [r6, #0]
 800aaea:	4630      	mov	r0, r6
 800aaec:	f000 fbd2 	bl	800b294 <__malloc_unlock>
 800aaf0:	e7e3      	b.n	800aaba <_malloc_r+0x1e>
 800aaf2:	6823      	ldr	r3, [r4, #0]
 800aaf4:	1b5b      	subs	r3, r3, r5
 800aaf6:	d417      	bmi.n	800ab28 <_malloc_r+0x8c>
 800aaf8:	2b0b      	cmp	r3, #11
 800aafa:	d903      	bls.n	800ab04 <_malloc_r+0x68>
 800aafc:	6023      	str	r3, [r4, #0]
 800aafe:	441c      	add	r4, r3
 800ab00:	6025      	str	r5, [r4, #0]
 800ab02:	e004      	b.n	800ab0e <_malloc_r+0x72>
 800ab04:	6863      	ldr	r3, [r4, #4]
 800ab06:	42a2      	cmp	r2, r4
 800ab08:	bf0c      	ite	eq
 800ab0a:	600b      	streq	r3, [r1, #0]
 800ab0c:	6053      	strne	r3, [r2, #4]
 800ab0e:	4630      	mov	r0, r6
 800ab10:	f000 fbc0 	bl	800b294 <__malloc_unlock>
 800ab14:	f104 000b 	add.w	r0, r4, #11
 800ab18:	1d23      	adds	r3, r4, #4
 800ab1a:	f020 0007 	bic.w	r0, r0, #7
 800ab1e:	1ac2      	subs	r2, r0, r3
 800ab20:	d0cc      	beq.n	800aabc <_malloc_r+0x20>
 800ab22:	1a1b      	subs	r3, r3, r0
 800ab24:	50a3      	str	r3, [r4, r2]
 800ab26:	e7c9      	b.n	800aabc <_malloc_r+0x20>
 800ab28:	4622      	mov	r2, r4
 800ab2a:	6864      	ldr	r4, [r4, #4]
 800ab2c:	e7cc      	b.n	800aac8 <_malloc_r+0x2c>
 800ab2e:	1cc4      	adds	r4, r0, #3
 800ab30:	f024 0403 	bic.w	r4, r4, #3
 800ab34:	42a0      	cmp	r0, r4
 800ab36:	d0e3      	beq.n	800ab00 <_malloc_r+0x64>
 800ab38:	1a21      	subs	r1, r4, r0
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	f000 f896 	bl	800ac6c <_sbrk_r>
 800ab40:	3001      	adds	r0, #1
 800ab42:	d1dd      	bne.n	800ab00 <_malloc_r+0x64>
 800ab44:	e7cf      	b.n	800aae6 <_malloc_r+0x4a>
 800ab46:	bf00      	nop
 800ab48:	2000829c 	.word	0x2000829c
 800ab4c:	200082a0 	.word	0x200082a0

0800ab50 <iprintf>:
 800ab50:	b40f      	push	{r0, r1, r2, r3}
 800ab52:	4b0a      	ldr	r3, [pc, #40]	; (800ab7c <iprintf+0x2c>)
 800ab54:	b513      	push	{r0, r1, r4, lr}
 800ab56:	681c      	ldr	r4, [r3, #0]
 800ab58:	b124      	cbz	r4, 800ab64 <iprintf+0x14>
 800ab5a:	69a3      	ldr	r3, [r4, #24]
 800ab5c:	b913      	cbnz	r3, 800ab64 <iprintf+0x14>
 800ab5e:	4620      	mov	r0, r4
 800ab60:	f000 fa8e 	bl	800b080 <__sinit>
 800ab64:	ab05      	add	r3, sp, #20
 800ab66:	9a04      	ldr	r2, [sp, #16]
 800ab68:	68a1      	ldr	r1, [r4, #8]
 800ab6a:	9301      	str	r3, [sp, #4]
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	f000 fd43 	bl	800b5f8 <_vfiprintf_r>
 800ab72:	b002      	add	sp, #8
 800ab74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab78:	b004      	add	sp, #16
 800ab7a:	4770      	bx	lr
 800ab7c:	20000a58 	.word	0x20000a58

0800ab80 <_puts_r>:
 800ab80:	b570      	push	{r4, r5, r6, lr}
 800ab82:	460e      	mov	r6, r1
 800ab84:	4605      	mov	r5, r0
 800ab86:	b118      	cbz	r0, 800ab90 <_puts_r+0x10>
 800ab88:	6983      	ldr	r3, [r0, #24]
 800ab8a:	b90b      	cbnz	r3, 800ab90 <_puts_r+0x10>
 800ab8c:	f000 fa78 	bl	800b080 <__sinit>
 800ab90:	69ab      	ldr	r3, [r5, #24]
 800ab92:	68ac      	ldr	r4, [r5, #8]
 800ab94:	b913      	cbnz	r3, 800ab9c <_puts_r+0x1c>
 800ab96:	4628      	mov	r0, r5
 800ab98:	f000 fa72 	bl	800b080 <__sinit>
 800ab9c:	4b2c      	ldr	r3, [pc, #176]	; (800ac50 <_puts_r+0xd0>)
 800ab9e:	429c      	cmp	r4, r3
 800aba0:	d120      	bne.n	800abe4 <_puts_r+0x64>
 800aba2:	686c      	ldr	r4, [r5, #4]
 800aba4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aba6:	07db      	lsls	r3, r3, #31
 800aba8:	d405      	bmi.n	800abb6 <_puts_r+0x36>
 800abaa:	89a3      	ldrh	r3, [r4, #12]
 800abac:	0598      	lsls	r0, r3, #22
 800abae:	d402      	bmi.n	800abb6 <_puts_r+0x36>
 800abb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abb2:	f000 fb03 	bl	800b1bc <__retarget_lock_acquire_recursive>
 800abb6:	89a3      	ldrh	r3, [r4, #12]
 800abb8:	0719      	lsls	r1, r3, #28
 800abba:	d51d      	bpl.n	800abf8 <_puts_r+0x78>
 800abbc:	6923      	ldr	r3, [r4, #16]
 800abbe:	b1db      	cbz	r3, 800abf8 <_puts_r+0x78>
 800abc0:	3e01      	subs	r6, #1
 800abc2:	68a3      	ldr	r3, [r4, #8]
 800abc4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800abc8:	3b01      	subs	r3, #1
 800abca:	60a3      	str	r3, [r4, #8]
 800abcc:	bb39      	cbnz	r1, 800ac1e <_puts_r+0x9e>
 800abce:	2b00      	cmp	r3, #0
 800abd0:	da38      	bge.n	800ac44 <_puts_r+0xc4>
 800abd2:	4622      	mov	r2, r4
 800abd4:	210a      	movs	r1, #10
 800abd6:	4628      	mov	r0, r5
 800abd8:	f000 f878 	bl	800accc <__swbuf_r>
 800abdc:	3001      	adds	r0, #1
 800abde:	d011      	beq.n	800ac04 <_puts_r+0x84>
 800abe0:	250a      	movs	r5, #10
 800abe2:	e011      	b.n	800ac08 <_puts_r+0x88>
 800abe4:	4b1b      	ldr	r3, [pc, #108]	; (800ac54 <_puts_r+0xd4>)
 800abe6:	429c      	cmp	r4, r3
 800abe8:	d101      	bne.n	800abee <_puts_r+0x6e>
 800abea:	68ac      	ldr	r4, [r5, #8]
 800abec:	e7da      	b.n	800aba4 <_puts_r+0x24>
 800abee:	4b1a      	ldr	r3, [pc, #104]	; (800ac58 <_puts_r+0xd8>)
 800abf0:	429c      	cmp	r4, r3
 800abf2:	bf08      	it	eq
 800abf4:	68ec      	ldreq	r4, [r5, #12]
 800abf6:	e7d5      	b.n	800aba4 <_puts_r+0x24>
 800abf8:	4621      	mov	r1, r4
 800abfa:	4628      	mov	r0, r5
 800abfc:	f000 f8b8 	bl	800ad70 <__swsetup_r>
 800ac00:	2800      	cmp	r0, #0
 800ac02:	d0dd      	beq.n	800abc0 <_puts_r+0x40>
 800ac04:	f04f 35ff 	mov.w	r5, #4294967295
 800ac08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac0a:	07da      	lsls	r2, r3, #31
 800ac0c:	d405      	bmi.n	800ac1a <_puts_r+0x9a>
 800ac0e:	89a3      	ldrh	r3, [r4, #12]
 800ac10:	059b      	lsls	r3, r3, #22
 800ac12:	d402      	bmi.n	800ac1a <_puts_r+0x9a>
 800ac14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac16:	f000 fad2 	bl	800b1be <__retarget_lock_release_recursive>
 800ac1a:	4628      	mov	r0, r5
 800ac1c:	bd70      	pop	{r4, r5, r6, pc}
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	da04      	bge.n	800ac2c <_puts_r+0xac>
 800ac22:	69a2      	ldr	r2, [r4, #24]
 800ac24:	429a      	cmp	r2, r3
 800ac26:	dc06      	bgt.n	800ac36 <_puts_r+0xb6>
 800ac28:	290a      	cmp	r1, #10
 800ac2a:	d004      	beq.n	800ac36 <_puts_r+0xb6>
 800ac2c:	6823      	ldr	r3, [r4, #0]
 800ac2e:	1c5a      	adds	r2, r3, #1
 800ac30:	6022      	str	r2, [r4, #0]
 800ac32:	7019      	strb	r1, [r3, #0]
 800ac34:	e7c5      	b.n	800abc2 <_puts_r+0x42>
 800ac36:	4622      	mov	r2, r4
 800ac38:	4628      	mov	r0, r5
 800ac3a:	f000 f847 	bl	800accc <__swbuf_r>
 800ac3e:	3001      	adds	r0, #1
 800ac40:	d1bf      	bne.n	800abc2 <_puts_r+0x42>
 800ac42:	e7df      	b.n	800ac04 <_puts_r+0x84>
 800ac44:	6823      	ldr	r3, [r4, #0]
 800ac46:	250a      	movs	r5, #10
 800ac48:	1c5a      	adds	r2, r3, #1
 800ac4a:	6022      	str	r2, [r4, #0]
 800ac4c:	701d      	strb	r5, [r3, #0]
 800ac4e:	e7db      	b.n	800ac08 <_puts_r+0x88>
 800ac50:	08069a44 	.word	0x08069a44
 800ac54:	08069a64 	.word	0x08069a64
 800ac58:	08069a24 	.word	0x08069a24

0800ac5c <puts>:
 800ac5c:	4b02      	ldr	r3, [pc, #8]	; (800ac68 <puts+0xc>)
 800ac5e:	4601      	mov	r1, r0
 800ac60:	6818      	ldr	r0, [r3, #0]
 800ac62:	f7ff bf8d 	b.w	800ab80 <_puts_r>
 800ac66:	bf00      	nop
 800ac68:	20000a58 	.word	0x20000a58

0800ac6c <_sbrk_r>:
 800ac6c:	b538      	push	{r3, r4, r5, lr}
 800ac6e:	4d06      	ldr	r5, [pc, #24]	; (800ac88 <_sbrk_r+0x1c>)
 800ac70:	2300      	movs	r3, #0
 800ac72:	4604      	mov	r4, r0
 800ac74:	4608      	mov	r0, r1
 800ac76:	602b      	str	r3, [r5, #0]
 800ac78:	f7f7 feec 	bl	8002a54 <_sbrk>
 800ac7c:	1c43      	adds	r3, r0, #1
 800ac7e:	d102      	bne.n	800ac86 <_sbrk_r+0x1a>
 800ac80:	682b      	ldr	r3, [r5, #0]
 800ac82:	b103      	cbz	r3, 800ac86 <_sbrk_r+0x1a>
 800ac84:	6023      	str	r3, [r4, #0]
 800ac86:	bd38      	pop	{r3, r4, r5, pc}
 800ac88:	200087a0 	.word	0x200087a0

0800ac8c <siprintf>:
 800ac8c:	b40e      	push	{r1, r2, r3}
 800ac8e:	b500      	push	{lr}
 800ac90:	b09c      	sub	sp, #112	; 0x70
 800ac92:	ab1d      	add	r3, sp, #116	; 0x74
 800ac94:	9002      	str	r0, [sp, #8]
 800ac96:	9006      	str	r0, [sp, #24]
 800ac98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ac9c:	4809      	ldr	r0, [pc, #36]	; (800acc4 <siprintf+0x38>)
 800ac9e:	9107      	str	r1, [sp, #28]
 800aca0:	9104      	str	r1, [sp, #16]
 800aca2:	4909      	ldr	r1, [pc, #36]	; (800acc8 <siprintf+0x3c>)
 800aca4:	f853 2b04 	ldr.w	r2, [r3], #4
 800aca8:	9105      	str	r1, [sp, #20]
 800acaa:	6800      	ldr	r0, [r0, #0]
 800acac:	9301      	str	r3, [sp, #4]
 800acae:	a902      	add	r1, sp, #8
 800acb0:	f000 fb78 	bl	800b3a4 <_svfiprintf_r>
 800acb4:	9b02      	ldr	r3, [sp, #8]
 800acb6:	2200      	movs	r2, #0
 800acb8:	701a      	strb	r2, [r3, #0]
 800acba:	b01c      	add	sp, #112	; 0x70
 800acbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800acc0:	b003      	add	sp, #12
 800acc2:	4770      	bx	lr
 800acc4:	20000a58 	.word	0x20000a58
 800acc8:	ffff0208 	.word	0xffff0208

0800accc <__swbuf_r>:
 800accc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acce:	460e      	mov	r6, r1
 800acd0:	4614      	mov	r4, r2
 800acd2:	4605      	mov	r5, r0
 800acd4:	b118      	cbz	r0, 800acde <__swbuf_r+0x12>
 800acd6:	6983      	ldr	r3, [r0, #24]
 800acd8:	b90b      	cbnz	r3, 800acde <__swbuf_r+0x12>
 800acda:	f000 f9d1 	bl	800b080 <__sinit>
 800acde:	4b21      	ldr	r3, [pc, #132]	; (800ad64 <__swbuf_r+0x98>)
 800ace0:	429c      	cmp	r4, r3
 800ace2:	d12b      	bne.n	800ad3c <__swbuf_r+0x70>
 800ace4:	686c      	ldr	r4, [r5, #4]
 800ace6:	69a3      	ldr	r3, [r4, #24]
 800ace8:	60a3      	str	r3, [r4, #8]
 800acea:	89a3      	ldrh	r3, [r4, #12]
 800acec:	071a      	lsls	r2, r3, #28
 800acee:	d52f      	bpl.n	800ad50 <__swbuf_r+0x84>
 800acf0:	6923      	ldr	r3, [r4, #16]
 800acf2:	b36b      	cbz	r3, 800ad50 <__swbuf_r+0x84>
 800acf4:	6923      	ldr	r3, [r4, #16]
 800acf6:	6820      	ldr	r0, [r4, #0]
 800acf8:	1ac0      	subs	r0, r0, r3
 800acfa:	6963      	ldr	r3, [r4, #20]
 800acfc:	b2f6      	uxtb	r6, r6
 800acfe:	4283      	cmp	r3, r0
 800ad00:	4637      	mov	r7, r6
 800ad02:	dc04      	bgt.n	800ad0e <__swbuf_r+0x42>
 800ad04:	4621      	mov	r1, r4
 800ad06:	4628      	mov	r0, r5
 800ad08:	f000 f926 	bl	800af58 <_fflush_r>
 800ad0c:	bb30      	cbnz	r0, 800ad5c <__swbuf_r+0x90>
 800ad0e:	68a3      	ldr	r3, [r4, #8]
 800ad10:	3b01      	subs	r3, #1
 800ad12:	60a3      	str	r3, [r4, #8]
 800ad14:	6823      	ldr	r3, [r4, #0]
 800ad16:	1c5a      	adds	r2, r3, #1
 800ad18:	6022      	str	r2, [r4, #0]
 800ad1a:	701e      	strb	r6, [r3, #0]
 800ad1c:	6963      	ldr	r3, [r4, #20]
 800ad1e:	3001      	adds	r0, #1
 800ad20:	4283      	cmp	r3, r0
 800ad22:	d004      	beq.n	800ad2e <__swbuf_r+0x62>
 800ad24:	89a3      	ldrh	r3, [r4, #12]
 800ad26:	07db      	lsls	r3, r3, #31
 800ad28:	d506      	bpl.n	800ad38 <__swbuf_r+0x6c>
 800ad2a:	2e0a      	cmp	r6, #10
 800ad2c:	d104      	bne.n	800ad38 <__swbuf_r+0x6c>
 800ad2e:	4621      	mov	r1, r4
 800ad30:	4628      	mov	r0, r5
 800ad32:	f000 f911 	bl	800af58 <_fflush_r>
 800ad36:	b988      	cbnz	r0, 800ad5c <__swbuf_r+0x90>
 800ad38:	4638      	mov	r0, r7
 800ad3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad3c:	4b0a      	ldr	r3, [pc, #40]	; (800ad68 <__swbuf_r+0x9c>)
 800ad3e:	429c      	cmp	r4, r3
 800ad40:	d101      	bne.n	800ad46 <__swbuf_r+0x7a>
 800ad42:	68ac      	ldr	r4, [r5, #8]
 800ad44:	e7cf      	b.n	800ace6 <__swbuf_r+0x1a>
 800ad46:	4b09      	ldr	r3, [pc, #36]	; (800ad6c <__swbuf_r+0xa0>)
 800ad48:	429c      	cmp	r4, r3
 800ad4a:	bf08      	it	eq
 800ad4c:	68ec      	ldreq	r4, [r5, #12]
 800ad4e:	e7ca      	b.n	800ace6 <__swbuf_r+0x1a>
 800ad50:	4621      	mov	r1, r4
 800ad52:	4628      	mov	r0, r5
 800ad54:	f000 f80c 	bl	800ad70 <__swsetup_r>
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	d0cb      	beq.n	800acf4 <__swbuf_r+0x28>
 800ad5c:	f04f 37ff 	mov.w	r7, #4294967295
 800ad60:	e7ea      	b.n	800ad38 <__swbuf_r+0x6c>
 800ad62:	bf00      	nop
 800ad64:	08069a44 	.word	0x08069a44
 800ad68:	08069a64 	.word	0x08069a64
 800ad6c:	08069a24 	.word	0x08069a24

0800ad70 <__swsetup_r>:
 800ad70:	4b32      	ldr	r3, [pc, #200]	; (800ae3c <__swsetup_r+0xcc>)
 800ad72:	b570      	push	{r4, r5, r6, lr}
 800ad74:	681d      	ldr	r5, [r3, #0]
 800ad76:	4606      	mov	r6, r0
 800ad78:	460c      	mov	r4, r1
 800ad7a:	b125      	cbz	r5, 800ad86 <__swsetup_r+0x16>
 800ad7c:	69ab      	ldr	r3, [r5, #24]
 800ad7e:	b913      	cbnz	r3, 800ad86 <__swsetup_r+0x16>
 800ad80:	4628      	mov	r0, r5
 800ad82:	f000 f97d 	bl	800b080 <__sinit>
 800ad86:	4b2e      	ldr	r3, [pc, #184]	; (800ae40 <__swsetup_r+0xd0>)
 800ad88:	429c      	cmp	r4, r3
 800ad8a:	d10f      	bne.n	800adac <__swsetup_r+0x3c>
 800ad8c:	686c      	ldr	r4, [r5, #4]
 800ad8e:	89a3      	ldrh	r3, [r4, #12]
 800ad90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad94:	0719      	lsls	r1, r3, #28
 800ad96:	d42c      	bmi.n	800adf2 <__swsetup_r+0x82>
 800ad98:	06dd      	lsls	r5, r3, #27
 800ad9a:	d411      	bmi.n	800adc0 <__swsetup_r+0x50>
 800ad9c:	2309      	movs	r3, #9
 800ad9e:	6033      	str	r3, [r6, #0]
 800ada0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ada4:	81a3      	strh	r3, [r4, #12]
 800ada6:	f04f 30ff 	mov.w	r0, #4294967295
 800adaa:	e03e      	b.n	800ae2a <__swsetup_r+0xba>
 800adac:	4b25      	ldr	r3, [pc, #148]	; (800ae44 <__swsetup_r+0xd4>)
 800adae:	429c      	cmp	r4, r3
 800adb0:	d101      	bne.n	800adb6 <__swsetup_r+0x46>
 800adb2:	68ac      	ldr	r4, [r5, #8]
 800adb4:	e7eb      	b.n	800ad8e <__swsetup_r+0x1e>
 800adb6:	4b24      	ldr	r3, [pc, #144]	; (800ae48 <__swsetup_r+0xd8>)
 800adb8:	429c      	cmp	r4, r3
 800adba:	bf08      	it	eq
 800adbc:	68ec      	ldreq	r4, [r5, #12]
 800adbe:	e7e6      	b.n	800ad8e <__swsetup_r+0x1e>
 800adc0:	0758      	lsls	r0, r3, #29
 800adc2:	d512      	bpl.n	800adea <__swsetup_r+0x7a>
 800adc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adc6:	b141      	cbz	r1, 800adda <__swsetup_r+0x6a>
 800adc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adcc:	4299      	cmp	r1, r3
 800adce:	d002      	beq.n	800add6 <__swsetup_r+0x66>
 800add0:	4630      	mov	r0, r6
 800add2:	f7ff fe13 	bl	800a9fc <_free_r>
 800add6:	2300      	movs	r3, #0
 800add8:	6363      	str	r3, [r4, #52]	; 0x34
 800adda:	89a3      	ldrh	r3, [r4, #12]
 800addc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ade0:	81a3      	strh	r3, [r4, #12]
 800ade2:	2300      	movs	r3, #0
 800ade4:	6063      	str	r3, [r4, #4]
 800ade6:	6923      	ldr	r3, [r4, #16]
 800ade8:	6023      	str	r3, [r4, #0]
 800adea:	89a3      	ldrh	r3, [r4, #12]
 800adec:	f043 0308 	orr.w	r3, r3, #8
 800adf0:	81a3      	strh	r3, [r4, #12]
 800adf2:	6923      	ldr	r3, [r4, #16]
 800adf4:	b94b      	cbnz	r3, 800ae0a <__swsetup_r+0x9a>
 800adf6:	89a3      	ldrh	r3, [r4, #12]
 800adf8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800adfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae00:	d003      	beq.n	800ae0a <__swsetup_r+0x9a>
 800ae02:	4621      	mov	r1, r4
 800ae04:	4630      	mov	r0, r6
 800ae06:	f000 f9ff 	bl	800b208 <__smakebuf_r>
 800ae0a:	89a0      	ldrh	r0, [r4, #12]
 800ae0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae10:	f010 0301 	ands.w	r3, r0, #1
 800ae14:	d00a      	beq.n	800ae2c <__swsetup_r+0xbc>
 800ae16:	2300      	movs	r3, #0
 800ae18:	60a3      	str	r3, [r4, #8]
 800ae1a:	6963      	ldr	r3, [r4, #20]
 800ae1c:	425b      	negs	r3, r3
 800ae1e:	61a3      	str	r3, [r4, #24]
 800ae20:	6923      	ldr	r3, [r4, #16]
 800ae22:	b943      	cbnz	r3, 800ae36 <__swsetup_r+0xc6>
 800ae24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ae28:	d1ba      	bne.n	800ada0 <__swsetup_r+0x30>
 800ae2a:	bd70      	pop	{r4, r5, r6, pc}
 800ae2c:	0781      	lsls	r1, r0, #30
 800ae2e:	bf58      	it	pl
 800ae30:	6963      	ldrpl	r3, [r4, #20]
 800ae32:	60a3      	str	r3, [r4, #8]
 800ae34:	e7f4      	b.n	800ae20 <__swsetup_r+0xb0>
 800ae36:	2000      	movs	r0, #0
 800ae38:	e7f7      	b.n	800ae2a <__swsetup_r+0xba>
 800ae3a:	bf00      	nop
 800ae3c:	20000a58 	.word	0x20000a58
 800ae40:	08069a44 	.word	0x08069a44
 800ae44:	08069a64 	.word	0x08069a64
 800ae48:	08069a24 	.word	0x08069a24

0800ae4c <__sflush_r>:
 800ae4c:	898a      	ldrh	r2, [r1, #12]
 800ae4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae52:	4605      	mov	r5, r0
 800ae54:	0710      	lsls	r0, r2, #28
 800ae56:	460c      	mov	r4, r1
 800ae58:	d458      	bmi.n	800af0c <__sflush_r+0xc0>
 800ae5a:	684b      	ldr	r3, [r1, #4]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	dc05      	bgt.n	800ae6c <__sflush_r+0x20>
 800ae60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	dc02      	bgt.n	800ae6c <__sflush_r+0x20>
 800ae66:	2000      	movs	r0, #0
 800ae68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae6e:	2e00      	cmp	r6, #0
 800ae70:	d0f9      	beq.n	800ae66 <__sflush_r+0x1a>
 800ae72:	2300      	movs	r3, #0
 800ae74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae78:	682f      	ldr	r7, [r5, #0]
 800ae7a:	602b      	str	r3, [r5, #0]
 800ae7c:	d032      	beq.n	800aee4 <__sflush_r+0x98>
 800ae7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae80:	89a3      	ldrh	r3, [r4, #12]
 800ae82:	075a      	lsls	r2, r3, #29
 800ae84:	d505      	bpl.n	800ae92 <__sflush_r+0x46>
 800ae86:	6863      	ldr	r3, [r4, #4]
 800ae88:	1ac0      	subs	r0, r0, r3
 800ae8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae8c:	b10b      	cbz	r3, 800ae92 <__sflush_r+0x46>
 800ae8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae90:	1ac0      	subs	r0, r0, r3
 800ae92:	2300      	movs	r3, #0
 800ae94:	4602      	mov	r2, r0
 800ae96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae98:	6a21      	ldr	r1, [r4, #32]
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	47b0      	blx	r6
 800ae9e:	1c43      	adds	r3, r0, #1
 800aea0:	89a3      	ldrh	r3, [r4, #12]
 800aea2:	d106      	bne.n	800aeb2 <__sflush_r+0x66>
 800aea4:	6829      	ldr	r1, [r5, #0]
 800aea6:	291d      	cmp	r1, #29
 800aea8:	d82c      	bhi.n	800af04 <__sflush_r+0xb8>
 800aeaa:	4a2a      	ldr	r2, [pc, #168]	; (800af54 <__sflush_r+0x108>)
 800aeac:	40ca      	lsrs	r2, r1
 800aeae:	07d6      	lsls	r6, r2, #31
 800aeb0:	d528      	bpl.n	800af04 <__sflush_r+0xb8>
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	6062      	str	r2, [r4, #4]
 800aeb6:	04d9      	lsls	r1, r3, #19
 800aeb8:	6922      	ldr	r2, [r4, #16]
 800aeba:	6022      	str	r2, [r4, #0]
 800aebc:	d504      	bpl.n	800aec8 <__sflush_r+0x7c>
 800aebe:	1c42      	adds	r2, r0, #1
 800aec0:	d101      	bne.n	800aec6 <__sflush_r+0x7a>
 800aec2:	682b      	ldr	r3, [r5, #0]
 800aec4:	b903      	cbnz	r3, 800aec8 <__sflush_r+0x7c>
 800aec6:	6560      	str	r0, [r4, #84]	; 0x54
 800aec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aeca:	602f      	str	r7, [r5, #0]
 800aecc:	2900      	cmp	r1, #0
 800aece:	d0ca      	beq.n	800ae66 <__sflush_r+0x1a>
 800aed0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aed4:	4299      	cmp	r1, r3
 800aed6:	d002      	beq.n	800aede <__sflush_r+0x92>
 800aed8:	4628      	mov	r0, r5
 800aeda:	f7ff fd8f 	bl	800a9fc <_free_r>
 800aede:	2000      	movs	r0, #0
 800aee0:	6360      	str	r0, [r4, #52]	; 0x34
 800aee2:	e7c1      	b.n	800ae68 <__sflush_r+0x1c>
 800aee4:	6a21      	ldr	r1, [r4, #32]
 800aee6:	2301      	movs	r3, #1
 800aee8:	4628      	mov	r0, r5
 800aeea:	47b0      	blx	r6
 800aeec:	1c41      	adds	r1, r0, #1
 800aeee:	d1c7      	bne.n	800ae80 <__sflush_r+0x34>
 800aef0:	682b      	ldr	r3, [r5, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d0c4      	beq.n	800ae80 <__sflush_r+0x34>
 800aef6:	2b1d      	cmp	r3, #29
 800aef8:	d001      	beq.n	800aefe <__sflush_r+0xb2>
 800aefa:	2b16      	cmp	r3, #22
 800aefc:	d101      	bne.n	800af02 <__sflush_r+0xb6>
 800aefe:	602f      	str	r7, [r5, #0]
 800af00:	e7b1      	b.n	800ae66 <__sflush_r+0x1a>
 800af02:	89a3      	ldrh	r3, [r4, #12]
 800af04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af08:	81a3      	strh	r3, [r4, #12]
 800af0a:	e7ad      	b.n	800ae68 <__sflush_r+0x1c>
 800af0c:	690f      	ldr	r7, [r1, #16]
 800af0e:	2f00      	cmp	r7, #0
 800af10:	d0a9      	beq.n	800ae66 <__sflush_r+0x1a>
 800af12:	0793      	lsls	r3, r2, #30
 800af14:	680e      	ldr	r6, [r1, #0]
 800af16:	bf08      	it	eq
 800af18:	694b      	ldreq	r3, [r1, #20]
 800af1a:	600f      	str	r7, [r1, #0]
 800af1c:	bf18      	it	ne
 800af1e:	2300      	movne	r3, #0
 800af20:	eba6 0807 	sub.w	r8, r6, r7
 800af24:	608b      	str	r3, [r1, #8]
 800af26:	f1b8 0f00 	cmp.w	r8, #0
 800af2a:	dd9c      	ble.n	800ae66 <__sflush_r+0x1a>
 800af2c:	6a21      	ldr	r1, [r4, #32]
 800af2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af30:	4643      	mov	r3, r8
 800af32:	463a      	mov	r2, r7
 800af34:	4628      	mov	r0, r5
 800af36:	47b0      	blx	r6
 800af38:	2800      	cmp	r0, #0
 800af3a:	dc06      	bgt.n	800af4a <__sflush_r+0xfe>
 800af3c:	89a3      	ldrh	r3, [r4, #12]
 800af3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af42:	81a3      	strh	r3, [r4, #12]
 800af44:	f04f 30ff 	mov.w	r0, #4294967295
 800af48:	e78e      	b.n	800ae68 <__sflush_r+0x1c>
 800af4a:	4407      	add	r7, r0
 800af4c:	eba8 0800 	sub.w	r8, r8, r0
 800af50:	e7e9      	b.n	800af26 <__sflush_r+0xda>
 800af52:	bf00      	nop
 800af54:	20400001 	.word	0x20400001

0800af58 <_fflush_r>:
 800af58:	b538      	push	{r3, r4, r5, lr}
 800af5a:	690b      	ldr	r3, [r1, #16]
 800af5c:	4605      	mov	r5, r0
 800af5e:	460c      	mov	r4, r1
 800af60:	b913      	cbnz	r3, 800af68 <_fflush_r+0x10>
 800af62:	2500      	movs	r5, #0
 800af64:	4628      	mov	r0, r5
 800af66:	bd38      	pop	{r3, r4, r5, pc}
 800af68:	b118      	cbz	r0, 800af72 <_fflush_r+0x1a>
 800af6a:	6983      	ldr	r3, [r0, #24]
 800af6c:	b90b      	cbnz	r3, 800af72 <_fflush_r+0x1a>
 800af6e:	f000 f887 	bl	800b080 <__sinit>
 800af72:	4b14      	ldr	r3, [pc, #80]	; (800afc4 <_fflush_r+0x6c>)
 800af74:	429c      	cmp	r4, r3
 800af76:	d11b      	bne.n	800afb0 <_fflush_r+0x58>
 800af78:	686c      	ldr	r4, [r5, #4]
 800af7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d0ef      	beq.n	800af62 <_fflush_r+0xa>
 800af82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af84:	07d0      	lsls	r0, r2, #31
 800af86:	d404      	bmi.n	800af92 <_fflush_r+0x3a>
 800af88:	0599      	lsls	r1, r3, #22
 800af8a:	d402      	bmi.n	800af92 <_fflush_r+0x3a>
 800af8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af8e:	f000 f915 	bl	800b1bc <__retarget_lock_acquire_recursive>
 800af92:	4628      	mov	r0, r5
 800af94:	4621      	mov	r1, r4
 800af96:	f7ff ff59 	bl	800ae4c <__sflush_r>
 800af9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af9c:	07da      	lsls	r2, r3, #31
 800af9e:	4605      	mov	r5, r0
 800afa0:	d4e0      	bmi.n	800af64 <_fflush_r+0xc>
 800afa2:	89a3      	ldrh	r3, [r4, #12]
 800afa4:	059b      	lsls	r3, r3, #22
 800afa6:	d4dd      	bmi.n	800af64 <_fflush_r+0xc>
 800afa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afaa:	f000 f908 	bl	800b1be <__retarget_lock_release_recursive>
 800afae:	e7d9      	b.n	800af64 <_fflush_r+0xc>
 800afb0:	4b05      	ldr	r3, [pc, #20]	; (800afc8 <_fflush_r+0x70>)
 800afb2:	429c      	cmp	r4, r3
 800afb4:	d101      	bne.n	800afba <_fflush_r+0x62>
 800afb6:	68ac      	ldr	r4, [r5, #8]
 800afb8:	e7df      	b.n	800af7a <_fflush_r+0x22>
 800afba:	4b04      	ldr	r3, [pc, #16]	; (800afcc <_fflush_r+0x74>)
 800afbc:	429c      	cmp	r4, r3
 800afbe:	bf08      	it	eq
 800afc0:	68ec      	ldreq	r4, [r5, #12]
 800afc2:	e7da      	b.n	800af7a <_fflush_r+0x22>
 800afc4:	08069a44 	.word	0x08069a44
 800afc8:	08069a64 	.word	0x08069a64
 800afcc:	08069a24 	.word	0x08069a24

0800afd0 <std>:
 800afd0:	2300      	movs	r3, #0
 800afd2:	b510      	push	{r4, lr}
 800afd4:	4604      	mov	r4, r0
 800afd6:	e9c0 3300 	strd	r3, r3, [r0]
 800afda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800afde:	6083      	str	r3, [r0, #8]
 800afe0:	8181      	strh	r1, [r0, #12]
 800afe2:	6643      	str	r3, [r0, #100]	; 0x64
 800afe4:	81c2      	strh	r2, [r0, #14]
 800afe6:	6183      	str	r3, [r0, #24]
 800afe8:	4619      	mov	r1, r3
 800afea:	2208      	movs	r2, #8
 800afec:	305c      	adds	r0, #92	; 0x5c
 800afee:	f7ff fcfd 	bl	800a9ec <memset>
 800aff2:	4b05      	ldr	r3, [pc, #20]	; (800b008 <std+0x38>)
 800aff4:	6263      	str	r3, [r4, #36]	; 0x24
 800aff6:	4b05      	ldr	r3, [pc, #20]	; (800b00c <std+0x3c>)
 800aff8:	62a3      	str	r3, [r4, #40]	; 0x28
 800affa:	4b05      	ldr	r3, [pc, #20]	; (800b010 <std+0x40>)
 800affc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800affe:	4b05      	ldr	r3, [pc, #20]	; (800b014 <std+0x44>)
 800b000:	6224      	str	r4, [r4, #32]
 800b002:	6323      	str	r3, [r4, #48]	; 0x30
 800b004:	bd10      	pop	{r4, pc}
 800b006:	bf00      	nop
 800b008:	0800bb81 	.word	0x0800bb81
 800b00c:	0800bba3 	.word	0x0800bba3
 800b010:	0800bbdb 	.word	0x0800bbdb
 800b014:	0800bbff 	.word	0x0800bbff

0800b018 <_cleanup_r>:
 800b018:	4901      	ldr	r1, [pc, #4]	; (800b020 <_cleanup_r+0x8>)
 800b01a:	f000 b8af 	b.w	800b17c <_fwalk_reent>
 800b01e:	bf00      	nop
 800b020:	0800af59 	.word	0x0800af59

0800b024 <__sfmoreglue>:
 800b024:	b570      	push	{r4, r5, r6, lr}
 800b026:	1e4a      	subs	r2, r1, #1
 800b028:	2568      	movs	r5, #104	; 0x68
 800b02a:	4355      	muls	r5, r2
 800b02c:	460e      	mov	r6, r1
 800b02e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b032:	f7ff fd33 	bl	800aa9c <_malloc_r>
 800b036:	4604      	mov	r4, r0
 800b038:	b140      	cbz	r0, 800b04c <__sfmoreglue+0x28>
 800b03a:	2100      	movs	r1, #0
 800b03c:	e9c0 1600 	strd	r1, r6, [r0]
 800b040:	300c      	adds	r0, #12
 800b042:	60a0      	str	r0, [r4, #8]
 800b044:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b048:	f7ff fcd0 	bl	800a9ec <memset>
 800b04c:	4620      	mov	r0, r4
 800b04e:	bd70      	pop	{r4, r5, r6, pc}

0800b050 <__sfp_lock_acquire>:
 800b050:	4801      	ldr	r0, [pc, #4]	; (800b058 <__sfp_lock_acquire+0x8>)
 800b052:	f000 b8b3 	b.w	800b1bc <__retarget_lock_acquire_recursive>
 800b056:	bf00      	nop
 800b058:	2000879c 	.word	0x2000879c

0800b05c <__sfp_lock_release>:
 800b05c:	4801      	ldr	r0, [pc, #4]	; (800b064 <__sfp_lock_release+0x8>)
 800b05e:	f000 b8ae 	b.w	800b1be <__retarget_lock_release_recursive>
 800b062:	bf00      	nop
 800b064:	2000879c 	.word	0x2000879c

0800b068 <__sinit_lock_acquire>:
 800b068:	4801      	ldr	r0, [pc, #4]	; (800b070 <__sinit_lock_acquire+0x8>)
 800b06a:	f000 b8a7 	b.w	800b1bc <__retarget_lock_acquire_recursive>
 800b06e:	bf00      	nop
 800b070:	20008797 	.word	0x20008797

0800b074 <__sinit_lock_release>:
 800b074:	4801      	ldr	r0, [pc, #4]	; (800b07c <__sinit_lock_release+0x8>)
 800b076:	f000 b8a2 	b.w	800b1be <__retarget_lock_release_recursive>
 800b07a:	bf00      	nop
 800b07c:	20008797 	.word	0x20008797

0800b080 <__sinit>:
 800b080:	b510      	push	{r4, lr}
 800b082:	4604      	mov	r4, r0
 800b084:	f7ff fff0 	bl	800b068 <__sinit_lock_acquire>
 800b088:	69a3      	ldr	r3, [r4, #24]
 800b08a:	b11b      	cbz	r3, 800b094 <__sinit+0x14>
 800b08c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b090:	f7ff bff0 	b.w	800b074 <__sinit_lock_release>
 800b094:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b098:	6523      	str	r3, [r4, #80]	; 0x50
 800b09a:	4b13      	ldr	r3, [pc, #76]	; (800b0e8 <__sinit+0x68>)
 800b09c:	4a13      	ldr	r2, [pc, #76]	; (800b0ec <__sinit+0x6c>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	62a2      	str	r2, [r4, #40]	; 0x28
 800b0a2:	42a3      	cmp	r3, r4
 800b0a4:	bf04      	itt	eq
 800b0a6:	2301      	moveq	r3, #1
 800b0a8:	61a3      	streq	r3, [r4, #24]
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	f000 f820 	bl	800b0f0 <__sfp>
 800b0b0:	6060      	str	r0, [r4, #4]
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	f000 f81c 	bl	800b0f0 <__sfp>
 800b0b8:	60a0      	str	r0, [r4, #8]
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	f000 f818 	bl	800b0f0 <__sfp>
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	60e0      	str	r0, [r4, #12]
 800b0c4:	2104      	movs	r1, #4
 800b0c6:	6860      	ldr	r0, [r4, #4]
 800b0c8:	f7ff ff82 	bl	800afd0 <std>
 800b0cc:	68a0      	ldr	r0, [r4, #8]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	2109      	movs	r1, #9
 800b0d2:	f7ff ff7d 	bl	800afd0 <std>
 800b0d6:	68e0      	ldr	r0, [r4, #12]
 800b0d8:	2202      	movs	r2, #2
 800b0da:	2112      	movs	r1, #18
 800b0dc:	f7ff ff78 	bl	800afd0 <std>
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	61a3      	str	r3, [r4, #24]
 800b0e4:	e7d2      	b.n	800b08c <__sinit+0xc>
 800b0e6:	bf00      	nop
 800b0e8:	08069a20 	.word	0x08069a20
 800b0ec:	0800b019 	.word	0x0800b019

0800b0f0 <__sfp>:
 800b0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0f2:	4607      	mov	r7, r0
 800b0f4:	f7ff ffac 	bl	800b050 <__sfp_lock_acquire>
 800b0f8:	4b1e      	ldr	r3, [pc, #120]	; (800b174 <__sfp+0x84>)
 800b0fa:	681e      	ldr	r6, [r3, #0]
 800b0fc:	69b3      	ldr	r3, [r6, #24]
 800b0fe:	b913      	cbnz	r3, 800b106 <__sfp+0x16>
 800b100:	4630      	mov	r0, r6
 800b102:	f7ff ffbd 	bl	800b080 <__sinit>
 800b106:	3648      	adds	r6, #72	; 0x48
 800b108:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b10c:	3b01      	subs	r3, #1
 800b10e:	d503      	bpl.n	800b118 <__sfp+0x28>
 800b110:	6833      	ldr	r3, [r6, #0]
 800b112:	b30b      	cbz	r3, 800b158 <__sfp+0x68>
 800b114:	6836      	ldr	r6, [r6, #0]
 800b116:	e7f7      	b.n	800b108 <__sfp+0x18>
 800b118:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b11c:	b9d5      	cbnz	r5, 800b154 <__sfp+0x64>
 800b11e:	4b16      	ldr	r3, [pc, #88]	; (800b178 <__sfp+0x88>)
 800b120:	60e3      	str	r3, [r4, #12]
 800b122:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b126:	6665      	str	r5, [r4, #100]	; 0x64
 800b128:	f000 f847 	bl	800b1ba <__retarget_lock_init_recursive>
 800b12c:	f7ff ff96 	bl	800b05c <__sfp_lock_release>
 800b130:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b134:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b138:	6025      	str	r5, [r4, #0]
 800b13a:	61a5      	str	r5, [r4, #24]
 800b13c:	2208      	movs	r2, #8
 800b13e:	4629      	mov	r1, r5
 800b140:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b144:	f7ff fc52 	bl	800a9ec <memset>
 800b148:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b14c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b150:	4620      	mov	r0, r4
 800b152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b154:	3468      	adds	r4, #104	; 0x68
 800b156:	e7d9      	b.n	800b10c <__sfp+0x1c>
 800b158:	2104      	movs	r1, #4
 800b15a:	4638      	mov	r0, r7
 800b15c:	f7ff ff62 	bl	800b024 <__sfmoreglue>
 800b160:	4604      	mov	r4, r0
 800b162:	6030      	str	r0, [r6, #0]
 800b164:	2800      	cmp	r0, #0
 800b166:	d1d5      	bne.n	800b114 <__sfp+0x24>
 800b168:	f7ff ff78 	bl	800b05c <__sfp_lock_release>
 800b16c:	230c      	movs	r3, #12
 800b16e:	603b      	str	r3, [r7, #0]
 800b170:	e7ee      	b.n	800b150 <__sfp+0x60>
 800b172:	bf00      	nop
 800b174:	08069a20 	.word	0x08069a20
 800b178:	ffff0001 	.word	0xffff0001

0800b17c <_fwalk_reent>:
 800b17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b180:	4606      	mov	r6, r0
 800b182:	4688      	mov	r8, r1
 800b184:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b188:	2700      	movs	r7, #0
 800b18a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b18e:	f1b9 0901 	subs.w	r9, r9, #1
 800b192:	d505      	bpl.n	800b1a0 <_fwalk_reent+0x24>
 800b194:	6824      	ldr	r4, [r4, #0]
 800b196:	2c00      	cmp	r4, #0
 800b198:	d1f7      	bne.n	800b18a <_fwalk_reent+0xe>
 800b19a:	4638      	mov	r0, r7
 800b19c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1a0:	89ab      	ldrh	r3, [r5, #12]
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d907      	bls.n	800b1b6 <_fwalk_reent+0x3a>
 800b1a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	d003      	beq.n	800b1b6 <_fwalk_reent+0x3a>
 800b1ae:	4629      	mov	r1, r5
 800b1b0:	4630      	mov	r0, r6
 800b1b2:	47c0      	blx	r8
 800b1b4:	4307      	orrs	r7, r0
 800b1b6:	3568      	adds	r5, #104	; 0x68
 800b1b8:	e7e9      	b.n	800b18e <_fwalk_reent+0x12>

0800b1ba <__retarget_lock_init_recursive>:
 800b1ba:	4770      	bx	lr

0800b1bc <__retarget_lock_acquire_recursive>:
 800b1bc:	4770      	bx	lr

0800b1be <__retarget_lock_release_recursive>:
 800b1be:	4770      	bx	lr

0800b1c0 <__swhatbuf_r>:
 800b1c0:	b570      	push	{r4, r5, r6, lr}
 800b1c2:	460e      	mov	r6, r1
 800b1c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1c8:	2900      	cmp	r1, #0
 800b1ca:	b096      	sub	sp, #88	; 0x58
 800b1cc:	4614      	mov	r4, r2
 800b1ce:	461d      	mov	r5, r3
 800b1d0:	da07      	bge.n	800b1e2 <__swhatbuf_r+0x22>
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	602b      	str	r3, [r5, #0]
 800b1d6:	89b3      	ldrh	r3, [r6, #12]
 800b1d8:	061a      	lsls	r2, r3, #24
 800b1da:	d410      	bmi.n	800b1fe <__swhatbuf_r+0x3e>
 800b1dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1e0:	e00e      	b.n	800b200 <__swhatbuf_r+0x40>
 800b1e2:	466a      	mov	r2, sp
 800b1e4:	f000 fd32 	bl	800bc4c <_fstat_r>
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	dbf2      	blt.n	800b1d2 <__swhatbuf_r+0x12>
 800b1ec:	9a01      	ldr	r2, [sp, #4]
 800b1ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b1f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b1f6:	425a      	negs	r2, r3
 800b1f8:	415a      	adcs	r2, r3
 800b1fa:	602a      	str	r2, [r5, #0]
 800b1fc:	e7ee      	b.n	800b1dc <__swhatbuf_r+0x1c>
 800b1fe:	2340      	movs	r3, #64	; 0x40
 800b200:	2000      	movs	r0, #0
 800b202:	6023      	str	r3, [r4, #0]
 800b204:	b016      	add	sp, #88	; 0x58
 800b206:	bd70      	pop	{r4, r5, r6, pc}

0800b208 <__smakebuf_r>:
 800b208:	898b      	ldrh	r3, [r1, #12]
 800b20a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b20c:	079d      	lsls	r5, r3, #30
 800b20e:	4606      	mov	r6, r0
 800b210:	460c      	mov	r4, r1
 800b212:	d507      	bpl.n	800b224 <__smakebuf_r+0x1c>
 800b214:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b218:	6023      	str	r3, [r4, #0]
 800b21a:	6123      	str	r3, [r4, #16]
 800b21c:	2301      	movs	r3, #1
 800b21e:	6163      	str	r3, [r4, #20]
 800b220:	b002      	add	sp, #8
 800b222:	bd70      	pop	{r4, r5, r6, pc}
 800b224:	ab01      	add	r3, sp, #4
 800b226:	466a      	mov	r2, sp
 800b228:	f7ff ffca 	bl	800b1c0 <__swhatbuf_r>
 800b22c:	9900      	ldr	r1, [sp, #0]
 800b22e:	4605      	mov	r5, r0
 800b230:	4630      	mov	r0, r6
 800b232:	f7ff fc33 	bl	800aa9c <_malloc_r>
 800b236:	b948      	cbnz	r0, 800b24c <__smakebuf_r+0x44>
 800b238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b23c:	059a      	lsls	r2, r3, #22
 800b23e:	d4ef      	bmi.n	800b220 <__smakebuf_r+0x18>
 800b240:	f023 0303 	bic.w	r3, r3, #3
 800b244:	f043 0302 	orr.w	r3, r3, #2
 800b248:	81a3      	strh	r3, [r4, #12]
 800b24a:	e7e3      	b.n	800b214 <__smakebuf_r+0xc>
 800b24c:	4b0d      	ldr	r3, [pc, #52]	; (800b284 <__smakebuf_r+0x7c>)
 800b24e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b250:	89a3      	ldrh	r3, [r4, #12]
 800b252:	6020      	str	r0, [r4, #0]
 800b254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b258:	81a3      	strh	r3, [r4, #12]
 800b25a:	9b00      	ldr	r3, [sp, #0]
 800b25c:	6163      	str	r3, [r4, #20]
 800b25e:	9b01      	ldr	r3, [sp, #4]
 800b260:	6120      	str	r0, [r4, #16]
 800b262:	b15b      	cbz	r3, 800b27c <__smakebuf_r+0x74>
 800b264:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b268:	4630      	mov	r0, r6
 800b26a:	f000 fd01 	bl	800bc70 <_isatty_r>
 800b26e:	b128      	cbz	r0, 800b27c <__smakebuf_r+0x74>
 800b270:	89a3      	ldrh	r3, [r4, #12]
 800b272:	f023 0303 	bic.w	r3, r3, #3
 800b276:	f043 0301 	orr.w	r3, r3, #1
 800b27a:	81a3      	strh	r3, [r4, #12]
 800b27c:	89a0      	ldrh	r0, [r4, #12]
 800b27e:	4305      	orrs	r5, r0
 800b280:	81a5      	strh	r5, [r4, #12]
 800b282:	e7cd      	b.n	800b220 <__smakebuf_r+0x18>
 800b284:	0800b019 	.word	0x0800b019

0800b288 <__malloc_lock>:
 800b288:	4801      	ldr	r0, [pc, #4]	; (800b290 <__malloc_lock+0x8>)
 800b28a:	f7ff bf97 	b.w	800b1bc <__retarget_lock_acquire_recursive>
 800b28e:	bf00      	nop
 800b290:	20008798 	.word	0x20008798

0800b294 <__malloc_unlock>:
 800b294:	4801      	ldr	r0, [pc, #4]	; (800b29c <__malloc_unlock+0x8>)
 800b296:	f7ff bf92 	b.w	800b1be <__retarget_lock_release_recursive>
 800b29a:	bf00      	nop
 800b29c:	20008798 	.word	0x20008798

0800b2a0 <_realloc_r>:
 800b2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2a2:	4607      	mov	r7, r0
 800b2a4:	4614      	mov	r4, r2
 800b2a6:	460e      	mov	r6, r1
 800b2a8:	b921      	cbnz	r1, 800b2b4 <_realloc_r+0x14>
 800b2aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b2ae:	4611      	mov	r1, r2
 800b2b0:	f7ff bbf4 	b.w	800aa9c <_malloc_r>
 800b2b4:	b922      	cbnz	r2, 800b2c0 <_realloc_r+0x20>
 800b2b6:	f7ff fba1 	bl	800a9fc <_free_r>
 800b2ba:	4625      	mov	r5, r4
 800b2bc:	4628      	mov	r0, r5
 800b2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2c0:	f000 fd12 	bl	800bce8 <_malloc_usable_size_r>
 800b2c4:	42a0      	cmp	r0, r4
 800b2c6:	d20f      	bcs.n	800b2e8 <_realloc_r+0x48>
 800b2c8:	4621      	mov	r1, r4
 800b2ca:	4638      	mov	r0, r7
 800b2cc:	f7ff fbe6 	bl	800aa9c <_malloc_r>
 800b2d0:	4605      	mov	r5, r0
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	d0f2      	beq.n	800b2bc <_realloc_r+0x1c>
 800b2d6:	4631      	mov	r1, r6
 800b2d8:	4622      	mov	r2, r4
 800b2da:	f7ff fb79 	bl	800a9d0 <memcpy>
 800b2de:	4631      	mov	r1, r6
 800b2e0:	4638      	mov	r0, r7
 800b2e2:	f7ff fb8b 	bl	800a9fc <_free_r>
 800b2e6:	e7e9      	b.n	800b2bc <_realloc_r+0x1c>
 800b2e8:	4635      	mov	r5, r6
 800b2ea:	e7e7      	b.n	800b2bc <_realloc_r+0x1c>

0800b2ec <__ssputs_r>:
 800b2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2f0:	688e      	ldr	r6, [r1, #8]
 800b2f2:	429e      	cmp	r6, r3
 800b2f4:	4682      	mov	sl, r0
 800b2f6:	460c      	mov	r4, r1
 800b2f8:	4690      	mov	r8, r2
 800b2fa:	461f      	mov	r7, r3
 800b2fc:	d838      	bhi.n	800b370 <__ssputs_r+0x84>
 800b2fe:	898a      	ldrh	r2, [r1, #12]
 800b300:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b304:	d032      	beq.n	800b36c <__ssputs_r+0x80>
 800b306:	6825      	ldr	r5, [r4, #0]
 800b308:	6909      	ldr	r1, [r1, #16]
 800b30a:	eba5 0901 	sub.w	r9, r5, r1
 800b30e:	6965      	ldr	r5, [r4, #20]
 800b310:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b314:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b318:	3301      	adds	r3, #1
 800b31a:	444b      	add	r3, r9
 800b31c:	106d      	asrs	r5, r5, #1
 800b31e:	429d      	cmp	r5, r3
 800b320:	bf38      	it	cc
 800b322:	461d      	movcc	r5, r3
 800b324:	0553      	lsls	r3, r2, #21
 800b326:	d531      	bpl.n	800b38c <__ssputs_r+0xa0>
 800b328:	4629      	mov	r1, r5
 800b32a:	f7ff fbb7 	bl	800aa9c <_malloc_r>
 800b32e:	4606      	mov	r6, r0
 800b330:	b950      	cbnz	r0, 800b348 <__ssputs_r+0x5c>
 800b332:	230c      	movs	r3, #12
 800b334:	f8ca 3000 	str.w	r3, [sl]
 800b338:	89a3      	ldrh	r3, [r4, #12]
 800b33a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b33e:	81a3      	strh	r3, [r4, #12]
 800b340:	f04f 30ff 	mov.w	r0, #4294967295
 800b344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b348:	6921      	ldr	r1, [r4, #16]
 800b34a:	464a      	mov	r2, r9
 800b34c:	f7ff fb40 	bl	800a9d0 <memcpy>
 800b350:	89a3      	ldrh	r3, [r4, #12]
 800b352:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b35a:	81a3      	strh	r3, [r4, #12]
 800b35c:	6126      	str	r6, [r4, #16]
 800b35e:	6165      	str	r5, [r4, #20]
 800b360:	444e      	add	r6, r9
 800b362:	eba5 0509 	sub.w	r5, r5, r9
 800b366:	6026      	str	r6, [r4, #0]
 800b368:	60a5      	str	r5, [r4, #8]
 800b36a:	463e      	mov	r6, r7
 800b36c:	42be      	cmp	r6, r7
 800b36e:	d900      	bls.n	800b372 <__ssputs_r+0x86>
 800b370:	463e      	mov	r6, r7
 800b372:	4632      	mov	r2, r6
 800b374:	6820      	ldr	r0, [r4, #0]
 800b376:	4641      	mov	r1, r8
 800b378:	f000 fc9c 	bl	800bcb4 <memmove>
 800b37c:	68a3      	ldr	r3, [r4, #8]
 800b37e:	6822      	ldr	r2, [r4, #0]
 800b380:	1b9b      	subs	r3, r3, r6
 800b382:	4432      	add	r2, r6
 800b384:	60a3      	str	r3, [r4, #8]
 800b386:	6022      	str	r2, [r4, #0]
 800b388:	2000      	movs	r0, #0
 800b38a:	e7db      	b.n	800b344 <__ssputs_r+0x58>
 800b38c:	462a      	mov	r2, r5
 800b38e:	f7ff ff87 	bl	800b2a0 <_realloc_r>
 800b392:	4606      	mov	r6, r0
 800b394:	2800      	cmp	r0, #0
 800b396:	d1e1      	bne.n	800b35c <__ssputs_r+0x70>
 800b398:	6921      	ldr	r1, [r4, #16]
 800b39a:	4650      	mov	r0, sl
 800b39c:	f7ff fb2e 	bl	800a9fc <_free_r>
 800b3a0:	e7c7      	b.n	800b332 <__ssputs_r+0x46>
	...

0800b3a4 <_svfiprintf_r>:
 800b3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a8:	4698      	mov	r8, r3
 800b3aa:	898b      	ldrh	r3, [r1, #12]
 800b3ac:	061b      	lsls	r3, r3, #24
 800b3ae:	b09d      	sub	sp, #116	; 0x74
 800b3b0:	4607      	mov	r7, r0
 800b3b2:	460d      	mov	r5, r1
 800b3b4:	4614      	mov	r4, r2
 800b3b6:	d50e      	bpl.n	800b3d6 <_svfiprintf_r+0x32>
 800b3b8:	690b      	ldr	r3, [r1, #16]
 800b3ba:	b963      	cbnz	r3, 800b3d6 <_svfiprintf_r+0x32>
 800b3bc:	2140      	movs	r1, #64	; 0x40
 800b3be:	f7ff fb6d 	bl	800aa9c <_malloc_r>
 800b3c2:	6028      	str	r0, [r5, #0]
 800b3c4:	6128      	str	r0, [r5, #16]
 800b3c6:	b920      	cbnz	r0, 800b3d2 <_svfiprintf_r+0x2e>
 800b3c8:	230c      	movs	r3, #12
 800b3ca:	603b      	str	r3, [r7, #0]
 800b3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d0:	e0d1      	b.n	800b576 <_svfiprintf_r+0x1d2>
 800b3d2:	2340      	movs	r3, #64	; 0x40
 800b3d4:	616b      	str	r3, [r5, #20]
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	9309      	str	r3, [sp, #36]	; 0x24
 800b3da:	2320      	movs	r3, #32
 800b3dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3e4:	2330      	movs	r3, #48	; 0x30
 800b3e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b590 <_svfiprintf_r+0x1ec>
 800b3ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3ee:	f04f 0901 	mov.w	r9, #1
 800b3f2:	4623      	mov	r3, r4
 800b3f4:	469a      	mov	sl, r3
 800b3f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3fa:	b10a      	cbz	r2, 800b400 <_svfiprintf_r+0x5c>
 800b3fc:	2a25      	cmp	r2, #37	; 0x25
 800b3fe:	d1f9      	bne.n	800b3f4 <_svfiprintf_r+0x50>
 800b400:	ebba 0b04 	subs.w	fp, sl, r4
 800b404:	d00b      	beq.n	800b41e <_svfiprintf_r+0x7a>
 800b406:	465b      	mov	r3, fp
 800b408:	4622      	mov	r2, r4
 800b40a:	4629      	mov	r1, r5
 800b40c:	4638      	mov	r0, r7
 800b40e:	f7ff ff6d 	bl	800b2ec <__ssputs_r>
 800b412:	3001      	adds	r0, #1
 800b414:	f000 80aa 	beq.w	800b56c <_svfiprintf_r+0x1c8>
 800b418:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b41a:	445a      	add	r2, fp
 800b41c:	9209      	str	r2, [sp, #36]	; 0x24
 800b41e:	f89a 3000 	ldrb.w	r3, [sl]
 800b422:	2b00      	cmp	r3, #0
 800b424:	f000 80a2 	beq.w	800b56c <_svfiprintf_r+0x1c8>
 800b428:	2300      	movs	r3, #0
 800b42a:	f04f 32ff 	mov.w	r2, #4294967295
 800b42e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b432:	f10a 0a01 	add.w	sl, sl, #1
 800b436:	9304      	str	r3, [sp, #16]
 800b438:	9307      	str	r3, [sp, #28]
 800b43a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b43e:	931a      	str	r3, [sp, #104]	; 0x68
 800b440:	4654      	mov	r4, sl
 800b442:	2205      	movs	r2, #5
 800b444:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b448:	4851      	ldr	r0, [pc, #324]	; (800b590 <_svfiprintf_r+0x1ec>)
 800b44a:	f7f4 fee1 	bl	8000210 <memchr>
 800b44e:	9a04      	ldr	r2, [sp, #16]
 800b450:	b9d8      	cbnz	r0, 800b48a <_svfiprintf_r+0xe6>
 800b452:	06d0      	lsls	r0, r2, #27
 800b454:	bf44      	itt	mi
 800b456:	2320      	movmi	r3, #32
 800b458:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b45c:	0711      	lsls	r1, r2, #28
 800b45e:	bf44      	itt	mi
 800b460:	232b      	movmi	r3, #43	; 0x2b
 800b462:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b466:	f89a 3000 	ldrb.w	r3, [sl]
 800b46a:	2b2a      	cmp	r3, #42	; 0x2a
 800b46c:	d015      	beq.n	800b49a <_svfiprintf_r+0xf6>
 800b46e:	9a07      	ldr	r2, [sp, #28]
 800b470:	4654      	mov	r4, sl
 800b472:	2000      	movs	r0, #0
 800b474:	f04f 0c0a 	mov.w	ip, #10
 800b478:	4621      	mov	r1, r4
 800b47a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b47e:	3b30      	subs	r3, #48	; 0x30
 800b480:	2b09      	cmp	r3, #9
 800b482:	d94e      	bls.n	800b522 <_svfiprintf_r+0x17e>
 800b484:	b1b0      	cbz	r0, 800b4b4 <_svfiprintf_r+0x110>
 800b486:	9207      	str	r2, [sp, #28]
 800b488:	e014      	b.n	800b4b4 <_svfiprintf_r+0x110>
 800b48a:	eba0 0308 	sub.w	r3, r0, r8
 800b48e:	fa09 f303 	lsl.w	r3, r9, r3
 800b492:	4313      	orrs	r3, r2
 800b494:	9304      	str	r3, [sp, #16]
 800b496:	46a2      	mov	sl, r4
 800b498:	e7d2      	b.n	800b440 <_svfiprintf_r+0x9c>
 800b49a:	9b03      	ldr	r3, [sp, #12]
 800b49c:	1d19      	adds	r1, r3, #4
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	9103      	str	r1, [sp, #12]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	bfbb      	ittet	lt
 800b4a6:	425b      	neglt	r3, r3
 800b4a8:	f042 0202 	orrlt.w	r2, r2, #2
 800b4ac:	9307      	strge	r3, [sp, #28]
 800b4ae:	9307      	strlt	r3, [sp, #28]
 800b4b0:	bfb8      	it	lt
 800b4b2:	9204      	strlt	r2, [sp, #16]
 800b4b4:	7823      	ldrb	r3, [r4, #0]
 800b4b6:	2b2e      	cmp	r3, #46	; 0x2e
 800b4b8:	d10c      	bne.n	800b4d4 <_svfiprintf_r+0x130>
 800b4ba:	7863      	ldrb	r3, [r4, #1]
 800b4bc:	2b2a      	cmp	r3, #42	; 0x2a
 800b4be:	d135      	bne.n	800b52c <_svfiprintf_r+0x188>
 800b4c0:	9b03      	ldr	r3, [sp, #12]
 800b4c2:	1d1a      	adds	r2, r3, #4
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	9203      	str	r2, [sp, #12]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	bfb8      	it	lt
 800b4cc:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4d0:	3402      	adds	r4, #2
 800b4d2:	9305      	str	r3, [sp, #20]
 800b4d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b5a0 <_svfiprintf_r+0x1fc>
 800b4d8:	7821      	ldrb	r1, [r4, #0]
 800b4da:	2203      	movs	r2, #3
 800b4dc:	4650      	mov	r0, sl
 800b4de:	f7f4 fe97 	bl	8000210 <memchr>
 800b4e2:	b140      	cbz	r0, 800b4f6 <_svfiprintf_r+0x152>
 800b4e4:	2340      	movs	r3, #64	; 0x40
 800b4e6:	eba0 000a 	sub.w	r0, r0, sl
 800b4ea:	fa03 f000 	lsl.w	r0, r3, r0
 800b4ee:	9b04      	ldr	r3, [sp, #16]
 800b4f0:	4303      	orrs	r3, r0
 800b4f2:	3401      	adds	r4, #1
 800b4f4:	9304      	str	r3, [sp, #16]
 800b4f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4fa:	4826      	ldr	r0, [pc, #152]	; (800b594 <_svfiprintf_r+0x1f0>)
 800b4fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b500:	2206      	movs	r2, #6
 800b502:	f7f4 fe85 	bl	8000210 <memchr>
 800b506:	2800      	cmp	r0, #0
 800b508:	d038      	beq.n	800b57c <_svfiprintf_r+0x1d8>
 800b50a:	4b23      	ldr	r3, [pc, #140]	; (800b598 <_svfiprintf_r+0x1f4>)
 800b50c:	bb1b      	cbnz	r3, 800b556 <_svfiprintf_r+0x1b2>
 800b50e:	9b03      	ldr	r3, [sp, #12]
 800b510:	3307      	adds	r3, #7
 800b512:	f023 0307 	bic.w	r3, r3, #7
 800b516:	3308      	adds	r3, #8
 800b518:	9303      	str	r3, [sp, #12]
 800b51a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b51c:	4433      	add	r3, r6
 800b51e:	9309      	str	r3, [sp, #36]	; 0x24
 800b520:	e767      	b.n	800b3f2 <_svfiprintf_r+0x4e>
 800b522:	fb0c 3202 	mla	r2, ip, r2, r3
 800b526:	460c      	mov	r4, r1
 800b528:	2001      	movs	r0, #1
 800b52a:	e7a5      	b.n	800b478 <_svfiprintf_r+0xd4>
 800b52c:	2300      	movs	r3, #0
 800b52e:	3401      	adds	r4, #1
 800b530:	9305      	str	r3, [sp, #20]
 800b532:	4619      	mov	r1, r3
 800b534:	f04f 0c0a 	mov.w	ip, #10
 800b538:	4620      	mov	r0, r4
 800b53a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b53e:	3a30      	subs	r2, #48	; 0x30
 800b540:	2a09      	cmp	r2, #9
 800b542:	d903      	bls.n	800b54c <_svfiprintf_r+0x1a8>
 800b544:	2b00      	cmp	r3, #0
 800b546:	d0c5      	beq.n	800b4d4 <_svfiprintf_r+0x130>
 800b548:	9105      	str	r1, [sp, #20]
 800b54a:	e7c3      	b.n	800b4d4 <_svfiprintf_r+0x130>
 800b54c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b550:	4604      	mov	r4, r0
 800b552:	2301      	movs	r3, #1
 800b554:	e7f0      	b.n	800b538 <_svfiprintf_r+0x194>
 800b556:	ab03      	add	r3, sp, #12
 800b558:	9300      	str	r3, [sp, #0]
 800b55a:	462a      	mov	r2, r5
 800b55c:	4b0f      	ldr	r3, [pc, #60]	; (800b59c <_svfiprintf_r+0x1f8>)
 800b55e:	a904      	add	r1, sp, #16
 800b560:	4638      	mov	r0, r7
 800b562:	f3af 8000 	nop.w
 800b566:	1c42      	adds	r2, r0, #1
 800b568:	4606      	mov	r6, r0
 800b56a:	d1d6      	bne.n	800b51a <_svfiprintf_r+0x176>
 800b56c:	89ab      	ldrh	r3, [r5, #12]
 800b56e:	065b      	lsls	r3, r3, #25
 800b570:	f53f af2c 	bmi.w	800b3cc <_svfiprintf_r+0x28>
 800b574:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b576:	b01d      	add	sp, #116	; 0x74
 800b578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b57c:	ab03      	add	r3, sp, #12
 800b57e:	9300      	str	r3, [sp, #0]
 800b580:	462a      	mov	r2, r5
 800b582:	4b06      	ldr	r3, [pc, #24]	; (800b59c <_svfiprintf_r+0x1f8>)
 800b584:	a904      	add	r1, sp, #16
 800b586:	4638      	mov	r0, r7
 800b588:	f000 f9d4 	bl	800b934 <_printf_i>
 800b58c:	e7eb      	b.n	800b566 <_svfiprintf_r+0x1c2>
 800b58e:	bf00      	nop
 800b590:	08069a84 	.word	0x08069a84
 800b594:	08069a8e 	.word	0x08069a8e
 800b598:	00000000 	.word	0x00000000
 800b59c:	0800b2ed 	.word	0x0800b2ed
 800b5a0:	08069a8a 	.word	0x08069a8a

0800b5a4 <__sfputc_r>:
 800b5a4:	6893      	ldr	r3, [r2, #8]
 800b5a6:	3b01      	subs	r3, #1
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	b410      	push	{r4}
 800b5ac:	6093      	str	r3, [r2, #8]
 800b5ae:	da08      	bge.n	800b5c2 <__sfputc_r+0x1e>
 800b5b0:	6994      	ldr	r4, [r2, #24]
 800b5b2:	42a3      	cmp	r3, r4
 800b5b4:	db01      	blt.n	800b5ba <__sfputc_r+0x16>
 800b5b6:	290a      	cmp	r1, #10
 800b5b8:	d103      	bne.n	800b5c2 <__sfputc_r+0x1e>
 800b5ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5be:	f7ff bb85 	b.w	800accc <__swbuf_r>
 800b5c2:	6813      	ldr	r3, [r2, #0]
 800b5c4:	1c58      	adds	r0, r3, #1
 800b5c6:	6010      	str	r0, [r2, #0]
 800b5c8:	7019      	strb	r1, [r3, #0]
 800b5ca:	4608      	mov	r0, r1
 800b5cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5d0:	4770      	bx	lr

0800b5d2 <__sfputs_r>:
 800b5d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5d4:	4606      	mov	r6, r0
 800b5d6:	460f      	mov	r7, r1
 800b5d8:	4614      	mov	r4, r2
 800b5da:	18d5      	adds	r5, r2, r3
 800b5dc:	42ac      	cmp	r4, r5
 800b5de:	d101      	bne.n	800b5e4 <__sfputs_r+0x12>
 800b5e0:	2000      	movs	r0, #0
 800b5e2:	e007      	b.n	800b5f4 <__sfputs_r+0x22>
 800b5e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5e8:	463a      	mov	r2, r7
 800b5ea:	4630      	mov	r0, r6
 800b5ec:	f7ff ffda 	bl	800b5a4 <__sfputc_r>
 800b5f0:	1c43      	adds	r3, r0, #1
 800b5f2:	d1f3      	bne.n	800b5dc <__sfputs_r+0xa>
 800b5f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b5f8 <_vfiprintf_r>:
 800b5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5fc:	460d      	mov	r5, r1
 800b5fe:	b09d      	sub	sp, #116	; 0x74
 800b600:	4614      	mov	r4, r2
 800b602:	4698      	mov	r8, r3
 800b604:	4606      	mov	r6, r0
 800b606:	b118      	cbz	r0, 800b610 <_vfiprintf_r+0x18>
 800b608:	6983      	ldr	r3, [r0, #24]
 800b60a:	b90b      	cbnz	r3, 800b610 <_vfiprintf_r+0x18>
 800b60c:	f7ff fd38 	bl	800b080 <__sinit>
 800b610:	4b89      	ldr	r3, [pc, #548]	; (800b838 <_vfiprintf_r+0x240>)
 800b612:	429d      	cmp	r5, r3
 800b614:	d11b      	bne.n	800b64e <_vfiprintf_r+0x56>
 800b616:	6875      	ldr	r5, [r6, #4]
 800b618:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b61a:	07d9      	lsls	r1, r3, #31
 800b61c:	d405      	bmi.n	800b62a <_vfiprintf_r+0x32>
 800b61e:	89ab      	ldrh	r3, [r5, #12]
 800b620:	059a      	lsls	r2, r3, #22
 800b622:	d402      	bmi.n	800b62a <_vfiprintf_r+0x32>
 800b624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b626:	f7ff fdc9 	bl	800b1bc <__retarget_lock_acquire_recursive>
 800b62a:	89ab      	ldrh	r3, [r5, #12]
 800b62c:	071b      	lsls	r3, r3, #28
 800b62e:	d501      	bpl.n	800b634 <_vfiprintf_r+0x3c>
 800b630:	692b      	ldr	r3, [r5, #16]
 800b632:	b9eb      	cbnz	r3, 800b670 <_vfiprintf_r+0x78>
 800b634:	4629      	mov	r1, r5
 800b636:	4630      	mov	r0, r6
 800b638:	f7ff fb9a 	bl	800ad70 <__swsetup_r>
 800b63c:	b1c0      	cbz	r0, 800b670 <_vfiprintf_r+0x78>
 800b63e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b640:	07dc      	lsls	r4, r3, #31
 800b642:	d50e      	bpl.n	800b662 <_vfiprintf_r+0x6a>
 800b644:	f04f 30ff 	mov.w	r0, #4294967295
 800b648:	b01d      	add	sp, #116	; 0x74
 800b64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b64e:	4b7b      	ldr	r3, [pc, #492]	; (800b83c <_vfiprintf_r+0x244>)
 800b650:	429d      	cmp	r5, r3
 800b652:	d101      	bne.n	800b658 <_vfiprintf_r+0x60>
 800b654:	68b5      	ldr	r5, [r6, #8]
 800b656:	e7df      	b.n	800b618 <_vfiprintf_r+0x20>
 800b658:	4b79      	ldr	r3, [pc, #484]	; (800b840 <_vfiprintf_r+0x248>)
 800b65a:	429d      	cmp	r5, r3
 800b65c:	bf08      	it	eq
 800b65e:	68f5      	ldreq	r5, [r6, #12]
 800b660:	e7da      	b.n	800b618 <_vfiprintf_r+0x20>
 800b662:	89ab      	ldrh	r3, [r5, #12]
 800b664:	0598      	lsls	r0, r3, #22
 800b666:	d4ed      	bmi.n	800b644 <_vfiprintf_r+0x4c>
 800b668:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b66a:	f7ff fda8 	bl	800b1be <__retarget_lock_release_recursive>
 800b66e:	e7e9      	b.n	800b644 <_vfiprintf_r+0x4c>
 800b670:	2300      	movs	r3, #0
 800b672:	9309      	str	r3, [sp, #36]	; 0x24
 800b674:	2320      	movs	r3, #32
 800b676:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b67a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b67e:	2330      	movs	r3, #48	; 0x30
 800b680:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b844 <_vfiprintf_r+0x24c>
 800b684:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b688:	f04f 0901 	mov.w	r9, #1
 800b68c:	4623      	mov	r3, r4
 800b68e:	469a      	mov	sl, r3
 800b690:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b694:	b10a      	cbz	r2, 800b69a <_vfiprintf_r+0xa2>
 800b696:	2a25      	cmp	r2, #37	; 0x25
 800b698:	d1f9      	bne.n	800b68e <_vfiprintf_r+0x96>
 800b69a:	ebba 0b04 	subs.w	fp, sl, r4
 800b69e:	d00b      	beq.n	800b6b8 <_vfiprintf_r+0xc0>
 800b6a0:	465b      	mov	r3, fp
 800b6a2:	4622      	mov	r2, r4
 800b6a4:	4629      	mov	r1, r5
 800b6a6:	4630      	mov	r0, r6
 800b6a8:	f7ff ff93 	bl	800b5d2 <__sfputs_r>
 800b6ac:	3001      	adds	r0, #1
 800b6ae:	f000 80aa 	beq.w	800b806 <_vfiprintf_r+0x20e>
 800b6b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6b4:	445a      	add	r2, fp
 800b6b6:	9209      	str	r2, [sp, #36]	; 0x24
 800b6b8:	f89a 3000 	ldrb.w	r3, [sl]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	f000 80a2 	beq.w	800b806 <_vfiprintf_r+0x20e>
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b6c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6cc:	f10a 0a01 	add.w	sl, sl, #1
 800b6d0:	9304      	str	r3, [sp, #16]
 800b6d2:	9307      	str	r3, [sp, #28]
 800b6d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6d8:	931a      	str	r3, [sp, #104]	; 0x68
 800b6da:	4654      	mov	r4, sl
 800b6dc:	2205      	movs	r2, #5
 800b6de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6e2:	4858      	ldr	r0, [pc, #352]	; (800b844 <_vfiprintf_r+0x24c>)
 800b6e4:	f7f4 fd94 	bl	8000210 <memchr>
 800b6e8:	9a04      	ldr	r2, [sp, #16]
 800b6ea:	b9d8      	cbnz	r0, 800b724 <_vfiprintf_r+0x12c>
 800b6ec:	06d1      	lsls	r1, r2, #27
 800b6ee:	bf44      	itt	mi
 800b6f0:	2320      	movmi	r3, #32
 800b6f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6f6:	0713      	lsls	r3, r2, #28
 800b6f8:	bf44      	itt	mi
 800b6fa:	232b      	movmi	r3, #43	; 0x2b
 800b6fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b700:	f89a 3000 	ldrb.w	r3, [sl]
 800b704:	2b2a      	cmp	r3, #42	; 0x2a
 800b706:	d015      	beq.n	800b734 <_vfiprintf_r+0x13c>
 800b708:	9a07      	ldr	r2, [sp, #28]
 800b70a:	4654      	mov	r4, sl
 800b70c:	2000      	movs	r0, #0
 800b70e:	f04f 0c0a 	mov.w	ip, #10
 800b712:	4621      	mov	r1, r4
 800b714:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b718:	3b30      	subs	r3, #48	; 0x30
 800b71a:	2b09      	cmp	r3, #9
 800b71c:	d94e      	bls.n	800b7bc <_vfiprintf_r+0x1c4>
 800b71e:	b1b0      	cbz	r0, 800b74e <_vfiprintf_r+0x156>
 800b720:	9207      	str	r2, [sp, #28]
 800b722:	e014      	b.n	800b74e <_vfiprintf_r+0x156>
 800b724:	eba0 0308 	sub.w	r3, r0, r8
 800b728:	fa09 f303 	lsl.w	r3, r9, r3
 800b72c:	4313      	orrs	r3, r2
 800b72e:	9304      	str	r3, [sp, #16]
 800b730:	46a2      	mov	sl, r4
 800b732:	e7d2      	b.n	800b6da <_vfiprintf_r+0xe2>
 800b734:	9b03      	ldr	r3, [sp, #12]
 800b736:	1d19      	adds	r1, r3, #4
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	9103      	str	r1, [sp, #12]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	bfbb      	ittet	lt
 800b740:	425b      	neglt	r3, r3
 800b742:	f042 0202 	orrlt.w	r2, r2, #2
 800b746:	9307      	strge	r3, [sp, #28]
 800b748:	9307      	strlt	r3, [sp, #28]
 800b74a:	bfb8      	it	lt
 800b74c:	9204      	strlt	r2, [sp, #16]
 800b74e:	7823      	ldrb	r3, [r4, #0]
 800b750:	2b2e      	cmp	r3, #46	; 0x2e
 800b752:	d10c      	bne.n	800b76e <_vfiprintf_r+0x176>
 800b754:	7863      	ldrb	r3, [r4, #1]
 800b756:	2b2a      	cmp	r3, #42	; 0x2a
 800b758:	d135      	bne.n	800b7c6 <_vfiprintf_r+0x1ce>
 800b75a:	9b03      	ldr	r3, [sp, #12]
 800b75c:	1d1a      	adds	r2, r3, #4
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	9203      	str	r2, [sp, #12]
 800b762:	2b00      	cmp	r3, #0
 800b764:	bfb8      	it	lt
 800b766:	f04f 33ff 	movlt.w	r3, #4294967295
 800b76a:	3402      	adds	r4, #2
 800b76c:	9305      	str	r3, [sp, #20]
 800b76e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b854 <_vfiprintf_r+0x25c>
 800b772:	7821      	ldrb	r1, [r4, #0]
 800b774:	2203      	movs	r2, #3
 800b776:	4650      	mov	r0, sl
 800b778:	f7f4 fd4a 	bl	8000210 <memchr>
 800b77c:	b140      	cbz	r0, 800b790 <_vfiprintf_r+0x198>
 800b77e:	2340      	movs	r3, #64	; 0x40
 800b780:	eba0 000a 	sub.w	r0, r0, sl
 800b784:	fa03 f000 	lsl.w	r0, r3, r0
 800b788:	9b04      	ldr	r3, [sp, #16]
 800b78a:	4303      	orrs	r3, r0
 800b78c:	3401      	adds	r4, #1
 800b78e:	9304      	str	r3, [sp, #16]
 800b790:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b794:	482c      	ldr	r0, [pc, #176]	; (800b848 <_vfiprintf_r+0x250>)
 800b796:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b79a:	2206      	movs	r2, #6
 800b79c:	f7f4 fd38 	bl	8000210 <memchr>
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	d03f      	beq.n	800b824 <_vfiprintf_r+0x22c>
 800b7a4:	4b29      	ldr	r3, [pc, #164]	; (800b84c <_vfiprintf_r+0x254>)
 800b7a6:	bb1b      	cbnz	r3, 800b7f0 <_vfiprintf_r+0x1f8>
 800b7a8:	9b03      	ldr	r3, [sp, #12]
 800b7aa:	3307      	adds	r3, #7
 800b7ac:	f023 0307 	bic.w	r3, r3, #7
 800b7b0:	3308      	adds	r3, #8
 800b7b2:	9303      	str	r3, [sp, #12]
 800b7b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7b6:	443b      	add	r3, r7
 800b7b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b7ba:	e767      	b.n	800b68c <_vfiprintf_r+0x94>
 800b7bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7c0:	460c      	mov	r4, r1
 800b7c2:	2001      	movs	r0, #1
 800b7c4:	e7a5      	b.n	800b712 <_vfiprintf_r+0x11a>
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	3401      	adds	r4, #1
 800b7ca:	9305      	str	r3, [sp, #20]
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	f04f 0c0a 	mov.w	ip, #10
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7d8:	3a30      	subs	r2, #48	; 0x30
 800b7da:	2a09      	cmp	r2, #9
 800b7dc:	d903      	bls.n	800b7e6 <_vfiprintf_r+0x1ee>
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d0c5      	beq.n	800b76e <_vfiprintf_r+0x176>
 800b7e2:	9105      	str	r1, [sp, #20]
 800b7e4:	e7c3      	b.n	800b76e <_vfiprintf_r+0x176>
 800b7e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7ea:	4604      	mov	r4, r0
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	e7f0      	b.n	800b7d2 <_vfiprintf_r+0x1da>
 800b7f0:	ab03      	add	r3, sp, #12
 800b7f2:	9300      	str	r3, [sp, #0]
 800b7f4:	462a      	mov	r2, r5
 800b7f6:	4b16      	ldr	r3, [pc, #88]	; (800b850 <_vfiprintf_r+0x258>)
 800b7f8:	a904      	add	r1, sp, #16
 800b7fa:	4630      	mov	r0, r6
 800b7fc:	f3af 8000 	nop.w
 800b800:	4607      	mov	r7, r0
 800b802:	1c78      	adds	r0, r7, #1
 800b804:	d1d6      	bne.n	800b7b4 <_vfiprintf_r+0x1bc>
 800b806:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b808:	07d9      	lsls	r1, r3, #31
 800b80a:	d405      	bmi.n	800b818 <_vfiprintf_r+0x220>
 800b80c:	89ab      	ldrh	r3, [r5, #12]
 800b80e:	059a      	lsls	r2, r3, #22
 800b810:	d402      	bmi.n	800b818 <_vfiprintf_r+0x220>
 800b812:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b814:	f7ff fcd3 	bl	800b1be <__retarget_lock_release_recursive>
 800b818:	89ab      	ldrh	r3, [r5, #12]
 800b81a:	065b      	lsls	r3, r3, #25
 800b81c:	f53f af12 	bmi.w	800b644 <_vfiprintf_r+0x4c>
 800b820:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b822:	e711      	b.n	800b648 <_vfiprintf_r+0x50>
 800b824:	ab03      	add	r3, sp, #12
 800b826:	9300      	str	r3, [sp, #0]
 800b828:	462a      	mov	r2, r5
 800b82a:	4b09      	ldr	r3, [pc, #36]	; (800b850 <_vfiprintf_r+0x258>)
 800b82c:	a904      	add	r1, sp, #16
 800b82e:	4630      	mov	r0, r6
 800b830:	f000 f880 	bl	800b934 <_printf_i>
 800b834:	e7e4      	b.n	800b800 <_vfiprintf_r+0x208>
 800b836:	bf00      	nop
 800b838:	08069a44 	.word	0x08069a44
 800b83c:	08069a64 	.word	0x08069a64
 800b840:	08069a24 	.word	0x08069a24
 800b844:	08069a84 	.word	0x08069a84
 800b848:	08069a8e 	.word	0x08069a8e
 800b84c:	00000000 	.word	0x00000000
 800b850:	0800b5d3 	.word	0x0800b5d3
 800b854:	08069a8a 	.word	0x08069a8a

0800b858 <_printf_common>:
 800b858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b85c:	4616      	mov	r6, r2
 800b85e:	4699      	mov	r9, r3
 800b860:	688a      	ldr	r2, [r1, #8]
 800b862:	690b      	ldr	r3, [r1, #16]
 800b864:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b868:	4293      	cmp	r3, r2
 800b86a:	bfb8      	it	lt
 800b86c:	4613      	movlt	r3, r2
 800b86e:	6033      	str	r3, [r6, #0]
 800b870:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b874:	4607      	mov	r7, r0
 800b876:	460c      	mov	r4, r1
 800b878:	b10a      	cbz	r2, 800b87e <_printf_common+0x26>
 800b87a:	3301      	adds	r3, #1
 800b87c:	6033      	str	r3, [r6, #0]
 800b87e:	6823      	ldr	r3, [r4, #0]
 800b880:	0699      	lsls	r1, r3, #26
 800b882:	bf42      	ittt	mi
 800b884:	6833      	ldrmi	r3, [r6, #0]
 800b886:	3302      	addmi	r3, #2
 800b888:	6033      	strmi	r3, [r6, #0]
 800b88a:	6825      	ldr	r5, [r4, #0]
 800b88c:	f015 0506 	ands.w	r5, r5, #6
 800b890:	d106      	bne.n	800b8a0 <_printf_common+0x48>
 800b892:	f104 0a19 	add.w	sl, r4, #25
 800b896:	68e3      	ldr	r3, [r4, #12]
 800b898:	6832      	ldr	r2, [r6, #0]
 800b89a:	1a9b      	subs	r3, r3, r2
 800b89c:	42ab      	cmp	r3, r5
 800b89e:	dc26      	bgt.n	800b8ee <_printf_common+0x96>
 800b8a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b8a4:	1e13      	subs	r3, r2, #0
 800b8a6:	6822      	ldr	r2, [r4, #0]
 800b8a8:	bf18      	it	ne
 800b8aa:	2301      	movne	r3, #1
 800b8ac:	0692      	lsls	r2, r2, #26
 800b8ae:	d42b      	bmi.n	800b908 <_printf_common+0xb0>
 800b8b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b8b4:	4649      	mov	r1, r9
 800b8b6:	4638      	mov	r0, r7
 800b8b8:	47c0      	blx	r8
 800b8ba:	3001      	adds	r0, #1
 800b8bc:	d01e      	beq.n	800b8fc <_printf_common+0xa4>
 800b8be:	6823      	ldr	r3, [r4, #0]
 800b8c0:	68e5      	ldr	r5, [r4, #12]
 800b8c2:	6832      	ldr	r2, [r6, #0]
 800b8c4:	f003 0306 	and.w	r3, r3, #6
 800b8c8:	2b04      	cmp	r3, #4
 800b8ca:	bf08      	it	eq
 800b8cc:	1aad      	subeq	r5, r5, r2
 800b8ce:	68a3      	ldr	r3, [r4, #8]
 800b8d0:	6922      	ldr	r2, [r4, #16]
 800b8d2:	bf0c      	ite	eq
 800b8d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8d8:	2500      	movne	r5, #0
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	bfc4      	itt	gt
 800b8de:	1a9b      	subgt	r3, r3, r2
 800b8e0:	18ed      	addgt	r5, r5, r3
 800b8e2:	2600      	movs	r6, #0
 800b8e4:	341a      	adds	r4, #26
 800b8e6:	42b5      	cmp	r5, r6
 800b8e8:	d11a      	bne.n	800b920 <_printf_common+0xc8>
 800b8ea:	2000      	movs	r0, #0
 800b8ec:	e008      	b.n	800b900 <_printf_common+0xa8>
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	4652      	mov	r2, sl
 800b8f2:	4649      	mov	r1, r9
 800b8f4:	4638      	mov	r0, r7
 800b8f6:	47c0      	blx	r8
 800b8f8:	3001      	adds	r0, #1
 800b8fa:	d103      	bne.n	800b904 <_printf_common+0xac>
 800b8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b904:	3501      	adds	r5, #1
 800b906:	e7c6      	b.n	800b896 <_printf_common+0x3e>
 800b908:	18e1      	adds	r1, r4, r3
 800b90a:	1c5a      	adds	r2, r3, #1
 800b90c:	2030      	movs	r0, #48	; 0x30
 800b90e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b912:	4422      	add	r2, r4
 800b914:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b918:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b91c:	3302      	adds	r3, #2
 800b91e:	e7c7      	b.n	800b8b0 <_printf_common+0x58>
 800b920:	2301      	movs	r3, #1
 800b922:	4622      	mov	r2, r4
 800b924:	4649      	mov	r1, r9
 800b926:	4638      	mov	r0, r7
 800b928:	47c0      	blx	r8
 800b92a:	3001      	adds	r0, #1
 800b92c:	d0e6      	beq.n	800b8fc <_printf_common+0xa4>
 800b92e:	3601      	adds	r6, #1
 800b930:	e7d9      	b.n	800b8e6 <_printf_common+0x8e>
	...

0800b934 <_printf_i>:
 800b934:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b938:	460c      	mov	r4, r1
 800b93a:	4691      	mov	r9, r2
 800b93c:	7e27      	ldrb	r7, [r4, #24]
 800b93e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b940:	2f78      	cmp	r7, #120	; 0x78
 800b942:	4680      	mov	r8, r0
 800b944:	469a      	mov	sl, r3
 800b946:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b94a:	d807      	bhi.n	800b95c <_printf_i+0x28>
 800b94c:	2f62      	cmp	r7, #98	; 0x62
 800b94e:	d80a      	bhi.n	800b966 <_printf_i+0x32>
 800b950:	2f00      	cmp	r7, #0
 800b952:	f000 80d8 	beq.w	800bb06 <_printf_i+0x1d2>
 800b956:	2f58      	cmp	r7, #88	; 0x58
 800b958:	f000 80a3 	beq.w	800baa2 <_printf_i+0x16e>
 800b95c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b960:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b964:	e03a      	b.n	800b9dc <_printf_i+0xa8>
 800b966:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b96a:	2b15      	cmp	r3, #21
 800b96c:	d8f6      	bhi.n	800b95c <_printf_i+0x28>
 800b96e:	a001      	add	r0, pc, #4	; (adr r0, 800b974 <_printf_i+0x40>)
 800b970:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b974:	0800b9cd 	.word	0x0800b9cd
 800b978:	0800b9e1 	.word	0x0800b9e1
 800b97c:	0800b95d 	.word	0x0800b95d
 800b980:	0800b95d 	.word	0x0800b95d
 800b984:	0800b95d 	.word	0x0800b95d
 800b988:	0800b95d 	.word	0x0800b95d
 800b98c:	0800b9e1 	.word	0x0800b9e1
 800b990:	0800b95d 	.word	0x0800b95d
 800b994:	0800b95d 	.word	0x0800b95d
 800b998:	0800b95d 	.word	0x0800b95d
 800b99c:	0800b95d 	.word	0x0800b95d
 800b9a0:	0800baed 	.word	0x0800baed
 800b9a4:	0800ba11 	.word	0x0800ba11
 800b9a8:	0800bacf 	.word	0x0800bacf
 800b9ac:	0800b95d 	.word	0x0800b95d
 800b9b0:	0800b95d 	.word	0x0800b95d
 800b9b4:	0800bb0f 	.word	0x0800bb0f
 800b9b8:	0800b95d 	.word	0x0800b95d
 800b9bc:	0800ba11 	.word	0x0800ba11
 800b9c0:	0800b95d 	.word	0x0800b95d
 800b9c4:	0800b95d 	.word	0x0800b95d
 800b9c8:	0800bad7 	.word	0x0800bad7
 800b9cc:	680b      	ldr	r3, [r1, #0]
 800b9ce:	1d1a      	adds	r2, r3, #4
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	600a      	str	r2, [r1, #0]
 800b9d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b9d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b9dc:	2301      	movs	r3, #1
 800b9de:	e0a3      	b.n	800bb28 <_printf_i+0x1f4>
 800b9e0:	6825      	ldr	r5, [r4, #0]
 800b9e2:	6808      	ldr	r0, [r1, #0]
 800b9e4:	062e      	lsls	r6, r5, #24
 800b9e6:	f100 0304 	add.w	r3, r0, #4
 800b9ea:	d50a      	bpl.n	800ba02 <_printf_i+0xce>
 800b9ec:	6805      	ldr	r5, [r0, #0]
 800b9ee:	600b      	str	r3, [r1, #0]
 800b9f0:	2d00      	cmp	r5, #0
 800b9f2:	da03      	bge.n	800b9fc <_printf_i+0xc8>
 800b9f4:	232d      	movs	r3, #45	; 0x2d
 800b9f6:	426d      	negs	r5, r5
 800b9f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9fc:	485e      	ldr	r0, [pc, #376]	; (800bb78 <_printf_i+0x244>)
 800b9fe:	230a      	movs	r3, #10
 800ba00:	e019      	b.n	800ba36 <_printf_i+0x102>
 800ba02:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ba06:	6805      	ldr	r5, [r0, #0]
 800ba08:	600b      	str	r3, [r1, #0]
 800ba0a:	bf18      	it	ne
 800ba0c:	b22d      	sxthne	r5, r5
 800ba0e:	e7ef      	b.n	800b9f0 <_printf_i+0xbc>
 800ba10:	680b      	ldr	r3, [r1, #0]
 800ba12:	6825      	ldr	r5, [r4, #0]
 800ba14:	1d18      	adds	r0, r3, #4
 800ba16:	6008      	str	r0, [r1, #0]
 800ba18:	0628      	lsls	r0, r5, #24
 800ba1a:	d501      	bpl.n	800ba20 <_printf_i+0xec>
 800ba1c:	681d      	ldr	r5, [r3, #0]
 800ba1e:	e002      	b.n	800ba26 <_printf_i+0xf2>
 800ba20:	0669      	lsls	r1, r5, #25
 800ba22:	d5fb      	bpl.n	800ba1c <_printf_i+0xe8>
 800ba24:	881d      	ldrh	r5, [r3, #0]
 800ba26:	4854      	ldr	r0, [pc, #336]	; (800bb78 <_printf_i+0x244>)
 800ba28:	2f6f      	cmp	r7, #111	; 0x6f
 800ba2a:	bf0c      	ite	eq
 800ba2c:	2308      	moveq	r3, #8
 800ba2e:	230a      	movne	r3, #10
 800ba30:	2100      	movs	r1, #0
 800ba32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba36:	6866      	ldr	r6, [r4, #4]
 800ba38:	60a6      	str	r6, [r4, #8]
 800ba3a:	2e00      	cmp	r6, #0
 800ba3c:	bfa2      	ittt	ge
 800ba3e:	6821      	ldrge	r1, [r4, #0]
 800ba40:	f021 0104 	bicge.w	r1, r1, #4
 800ba44:	6021      	strge	r1, [r4, #0]
 800ba46:	b90d      	cbnz	r5, 800ba4c <_printf_i+0x118>
 800ba48:	2e00      	cmp	r6, #0
 800ba4a:	d04d      	beq.n	800bae8 <_printf_i+0x1b4>
 800ba4c:	4616      	mov	r6, r2
 800ba4e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ba52:	fb03 5711 	mls	r7, r3, r1, r5
 800ba56:	5dc7      	ldrb	r7, [r0, r7]
 800ba58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ba5c:	462f      	mov	r7, r5
 800ba5e:	42bb      	cmp	r3, r7
 800ba60:	460d      	mov	r5, r1
 800ba62:	d9f4      	bls.n	800ba4e <_printf_i+0x11a>
 800ba64:	2b08      	cmp	r3, #8
 800ba66:	d10b      	bne.n	800ba80 <_printf_i+0x14c>
 800ba68:	6823      	ldr	r3, [r4, #0]
 800ba6a:	07df      	lsls	r7, r3, #31
 800ba6c:	d508      	bpl.n	800ba80 <_printf_i+0x14c>
 800ba6e:	6923      	ldr	r3, [r4, #16]
 800ba70:	6861      	ldr	r1, [r4, #4]
 800ba72:	4299      	cmp	r1, r3
 800ba74:	bfde      	ittt	le
 800ba76:	2330      	movle	r3, #48	; 0x30
 800ba78:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ba7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ba80:	1b92      	subs	r2, r2, r6
 800ba82:	6122      	str	r2, [r4, #16]
 800ba84:	f8cd a000 	str.w	sl, [sp]
 800ba88:	464b      	mov	r3, r9
 800ba8a:	aa03      	add	r2, sp, #12
 800ba8c:	4621      	mov	r1, r4
 800ba8e:	4640      	mov	r0, r8
 800ba90:	f7ff fee2 	bl	800b858 <_printf_common>
 800ba94:	3001      	adds	r0, #1
 800ba96:	d14c      	bne.n	800bb32 <_printf_i+0x1fe>
 800ba98:	f04f 30ff 	mov.w	r0, #4294967295
 800ba9c:	b004      	add	sp, #16
 800ba9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baa2:	4835      	ldr	r0, [pc, #212]	; (800bb78 <_printf_i+0x244>)
 800baa4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800baa8:	6823      	ldr	r3, [r4, #0]
 800baaa:	680e      	ldr	r6, [r1, #0]
 800baac:	061f      	lsls	r7, r3, #24
 800baae:	f856 5b04 	ldr.w	r5, [r6], #4
 800bab2:	600e      	str	r6, [r1, #0]
 800bab4:	d514      	bpl.n	800bae0 <_printf_i+0x1ac>
 800bab6:	07d9      	lsls	r1, r3, #31
 800bab8:	bf44      	itt	mi
 800baba:	f043 0320 	orrmi.w	r3, r3, #32
 800babe:	6023      	strmi	r3, [r4, #0]
 800bac0:	b91d      	cbnz	r5, 800baca <_printf_i+0x196>
 800bac2:	6823      	ldr	r3, [r4, #0]
 800bac4:	f023 0320 	bic.w	r3, r3, #32
 800bac8:	6023      	str	r3, [r4, #0]
 800baca:	2310      	movs	r3, #16
 800bacc:	e7b0      	b.n	800ba30 <_printf_i+0xfc>
 800bace:	6823      	ldr	r3, [r4, #0]
 800bad0:	f043 0320 	orr.w	r3, r3, #32
 800bad4:	6023      	str	r3, [r4, #0]
 800bad6:	2378      	movs	r3, #120	; 0x78
 800bad8:	4828      	ldr	r0, [pc, #160]	; (800bb7c <_printf_i+0x248>)
 800bada:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bade:	e7e3      	b.n	800baa8 <_printf_i+0x174>
 800bae0:	065e      	lsls	r6, r3, #25
 800bae2:	bf48      	it	mi
 800bae4:	b2ad      	uxthmi	r5, r5
 800bae6:	e7e6      	b.n	800bab6 <_printf_i+0x182>
 800bae8:	4616      	mov	r6, r2
 800baea:	e7bb      	b.n	800ba64 <_printf_i+0x130>
 800baec:	680b      	ldr	r3, [r1, #0]
 800baee:	6826      	ldr	r6, [r4, #0]
 800baf0:	6960      	ldr	r0, [r4, #20]
 800baf2:	1d1d      	adds	r5, r3, #4
 800baf4:	600d      	str	r5, [r1, #0]
 800baf6:	0635      	lsls	r5, r6, #24
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	d501      	bpl.n	800bb00 <_printf_i+0x1cc>
 800bafc:	6018      	str	r0, [r3, #0]
 800bafe:	e002      	b.n	800bb06 <_printf_i+0x1d2>
 800bb00:	0671      	lsls	r1, r6, #25
 800bb02:	d5fb      	bpl.n	800bafc <_printf_i+0x1c8>
 800bb04:	8018      	strh	r0, [r3, #0]
 800bb06:	2300      	movs	r3, #0
 800bb08:	6123      	str	r3, [r4, #16]
 800bb0a:	4616      	mov	r6, r2
 800bb0c:	e7ba      	b.n	800ba84 <_printf_i+0x150>
 800bb0e:	680b      	ldr	r3, [r1, #0]
 800bb10:	1d1a      	adds	r2, r3, #4
 800bb12:	600a      	str	r2, [r1, #0]
 800bb14:	681e      	ldr	r6, [r3, #0]
 800bb16:	6862      	ldr	r2, [r4, #4]
 800bb18:	2100      	movs	r1, #0
 800bb1a:	4630      	mov	r0, r6
 800bb1c:	f7f4 fb78 	bl	8000210 <memchr>
 800bb20:	b108      	cbz	r0, 800bb26 <_printf_i+0x1f2>
 800bb22:	1b80      	subs	r0, r0, r6
 800bb24:	6060      	str	r0, [r4, #4]
 800bb26:	6863      	ldr	r3, [r4, #4]
 800bb28:	6123      	str	r3, [r4, #16]
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb30:	e7a8      	b.n	800ba84 <_printf_i+0x150>
 800bb32:	6923      	ldr	r3, [r4, #16]
 800bb34:	4632      	mov	r2, r6
 800bb36:	4649      	mov	r1, r9
 800bb38:	4640      	mov	r0, r8
 800bb3a:	47d0      	blx	sl
 800bb3c:	3001      	adds	r0, #1
 800bb3e:	d0ab      	beq.n	800ba98 <_printf_i+0x164>
 800bb40:	6823      	ldr	r3, [r4, #0]
 800bb42:	079b      	lsls	r3, r3, #30
 800bb44:	d413      	bmi.n	800bb6e <_printf_i+0x23a>
 800bb46:	68e0      	ldr	r0, [r4, #12]
 800bb48:	9b03      	ldr	r3, [sp, #12]
 800bb4a:	4298      	cmp	r0, r3
 800bb4c:	bfb8      	it	lt
 800bb4e:	4618      	movlt	r0, r3
 800bb50:	e7a4      	b.n	800ba9c <_printf_i+0x168>
 800bb52:	2301      	movs	r3, #1
 800bb54:	4632      	mov	r2, r6
 800bb56:	4649      	mov	r1, r9
 800bb58:	4640      	mov	r0, r8
 800bb5a:	47d0      	blx	sl
 800bb5c:	3001      	adds	r0, #1
 800bb5e:	d09b      	beq.n	800ba98 <_printf_i+0x164>
 800bb60:	3501      	adds	r5, #1
 800bb62:	68e3      	ldr	r3, [r4, #12]
 800bb64:	9903      	ldr	r1, [sp, #12]
 800bb66:	1a5b      	subs	r3, r3, r1
 800bb68:	42ab      	cmp	r3, r5
 800bb6a:	dcf2      	bgt.n	800bb52 <_printf_i+0x21e>
 800bb6c:	e7eb      	b.n	800bb46 <_printf_i+0x212>
 800bb6e:	2500      	movs	r5, #0
 800bb70:	f104 0619 	add.w	r6, r4, #25
 800bb74:	e7f5      	b.n	800bb62 <_printf_i+0x22e>
 800bb76:	bf00      	nop
 800bb78:	08069a95 	.word	0x08069a95
 800bb7c:	08069aa6 	.word	0x08069aa6

0800bb80 <__sread>:
 800bb80:	b510      	push	{r4, lr}
 800bb82:	460c      	mov	r4, r1
 800bb84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb88:	f000 f8b6 	bl	800bcf8 <_read_r>
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	bfab      	itete	ge
 800bb90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb92:	89a3      	ldrhlt	r3, [r4, #12]
 800bb94:	181b      	addge	r3, r3, r0
 800bb96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb9a:	bfac      	ite	ge
 800bb9c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb9e:	81a3      	strhlt	r3, [r4, #12]
 800bba0:	bd10      	pop	{r4, pc}

0800bba2 <__swrite>:
 800bba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bba6:	461f      	mov	r7, r3
 800bba8:	898b      	ldrh	r3, [r1, #12]
 800bbaa:	05db      	lsls	r3, r3, #23
 800bbac:	4605      	mov	r5, r0
 800bbae:	460c      	mov	r4, r1
 800bbb0:	4616      	mov	r6, r2
 800bbb2:	d505      	bpl.n	800bbc0 <__swrite+0x1e>
 800bbb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbb8:	2302      	movs	r3, #2
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f000 f868 	bl	800bc90 <_lseek_r>
 800bbc0:	89a3      	ldrh	r3, [r4, #12]
 800bbc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bbca:	81a3      	strh	r3, [r4, #12]
 800bbcc:	4632      	mov	r2, r6
 800bbce:	463b      	mov	r3, r7
 800bbd0:	4628      	mov	r0, r5
 800bbd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbd6:	f000 b817 	b.w	800bc08 <_write_r>

0800bbda <__sseek>:
 800bbda:	b510      	push	{r4, lr}
 800bbdc:	460c      	mov	r4, r1
 800bbde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbe2:	f000 f855 	bl	800bc90 <_lseek_r>
 800bbe6:	1c43      	adds	r3, r0, #1
 800bbe8:	89a3      	ldrh	r3, [r4, #12]
 800bbea:	bf15      	itete	ne
 800bbec:	6560      	strne	r0, [r4, #84]	; 0x54
 800bbee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bbf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bbf6:	81a3      	strheq	r3, [r4, #12]
 800bbf8:	bf18      	it	ne
 800bbfa:	81a3      	strhne	r3, [r4, #12]
 800bbfc:	bd10      	pop	{r4, pc}

0800bbfe <__sclose>:
 800bbfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc02:	f000 b813 	b.w	800bc2c <_close_r>
	...

0800bc08 <_write_r>:
 800bc08:	b538      	push	{r3, r4, r5, lr}
 800bc0a:	4d07      	ldr	r5, [pc, #28]	; (800bc28 <_write_r+0x20>)
 800bc0c:	4604      	mov	r4, r0
 800bc0e:	4608      	mov	r0, r1
 800bc10:	4611      	mov	r1, r2
 800bc12:	2200      	movs	r2, #0
 800bc14:	602a      	str	r2, [r5, #0]
 800bc16:	461a      	mov	r2, r3
 800bc18:	f000 f9c8 	bl	800bfac <_write>
 800bc1c:	1c43      	adds	r3, r0, #1
 800bc1e:	d102      	bne.n	800bc26 <_write_r+0x1e>
 800bc20:	682b      	ldr	r3, [r5, #0]
 800bc22:	b103      	cbz	r3, 800bc26 <_write_r+0x1e>
 800bc24:	6023      	str	r3, [r4, #0]
 800bc26:	bd38      	pop	{r3, r4, r5, pc}
 800bc28:	200087a0 	.word	0x200087a0

0800bc2c <_close_r>:
 800bc2c:	b538      	push	{r3, r4, r5, lr}
 800bc2e:	4d06      	ldr	r5, [pc, #24]	; (800bc48 <_close_r+0x1c>)
 800bc30:	2300      	movs	r3, #0
 800bc32:	4604      	mov	r4, r0
 800bc34:	4608      	mov	r0, r1
 800bc36:	602b      	str	r3, [r5, #0]
 800bc38:	f000 f990 	bl	800bf5c <_close>
 800bc3c:	1c43      	adds	r3, r0, #1
 800bc3e:	d102      	bne.n	800bc46 <_close_r+0x1a>
 800bc40:	682b      	ldr	r3, [r5, #0]
 800bc42:	b103      	cbz	r3, 800bc46 <_close_r+0x1a>
 800bc44:	6023      	str	r3, [r4, #0]
 800bc46:	bd38      	pop	{r3, r4, r5, pc}
 800bc48:	200087a0 	.word	0x200087a0

0800bc4c <_fstat_r>:
 800bc4c:	b538      	push	{r3, r4, r5, lr}
 800bc4e:	4d07      	ldr	r5, [pc, #28]	; (800bc6c <_fstat_r+0x20>)
 800bc50:	2300      	movs	r3, #0
 800bc52:	4604      	mov	r4, r0
 800bc54:	4608      	mov	r0, r1
 800bc56:	4611      	mov	r1, r2
 800bc58:	602b      	str	r3, [r5, #0]
 800bc5a:	f000 f987 	bl	800bf6c <_fstat>
 800bc5e:	1c43      	adds	r3, r0, #1
 800bc60:	d102      	bne.n	800bc68 <_fstat_r+0x1c>
 800bc62:	682b      	ldr	r3, [r5, #0]
 800bc64:	b103      	cbz	r3, 800bc68 <_fstat_r+0x1c>
 800bc66:	6023      	str	r3, [r4, #0]
 800bc68:	bd38      	pop	{r3, r4, r5, pc}
 800bc6a:	bf00      	nop
 800bc6c:	200087a0 	.word	0x200087a0

0800bc70 <_isatty_r>:
 800bc70:	b538      	push	{r3, r4, r5, lr}
 800bc72:	4d06      	ldr	r5, [pc, #24]	; (800bc8c <_isatty_r+0x1c>)
 800bc74:	2300      	movs	r3, #0
 800bc76:	4604      	mov	r4, r0
 800bc78:	4608      	mov	r0, r1
 800bc7a:	602b      	str	r3, [r5, #0]
 800bc7c:	f000 f97e 	bl	800bf7c <_isatty>
 800bc80:	1c43      	adds	r3, r0, #1
 800bc82:	d102      	bne.n	800bc8a <_isatty_r+0x1a>
 800bc84:	682b      	ldr	r3, [r5, #0]
 800bc86:	b103      	cbz	r3, 800bc8a <_isatty_r+0x1a>
 800bc88:	6023      	str	r3, [r4, #0]
 800bc8a:	bd38      	pop	{r3, r4, r5, pc}
 800bc8c:	200087a0 	.word	0x200087a0

0800bc90 <_lseek_r>:
 800bc90:	b538      	push	{r3, r4, r5, lr}
 800bc92:	4d07      	ldr	r5, [pc, #28]	; (800bcb0 <_lseek_r+0x20>)
 800bc94:	4604      	mov	r4, r0
 800bc96:	4608      	mov	r0, r1
 800bc98:	4611      	mov	r1, r2
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	602a      	str	r2, [r5, #0]
 800bc9e:	461a      	mov	r2, r3
 800bca0:	f000 f974 	bl	800bf8c <_lseek>
 800bca4:	1c43      	adds	r3, r0, #1
 800bca6:	d102      	bne.n	800bcae <_lseek_r+0x1e>
 800bca8:	682b      	ldr	r3, [r5, #0]
 800bcaa:	b103      	cbz	r3, 800bcae <_lseek_r+0x1e>
 800bcac:	6023      	str	r3, [r4, #0]
 800bcae:	bd38      	pop	{r3, r4, r5, pc}
 800bcb0:	200087a0 	.word	0x200087a0

0800bcb4 <memmove>:
 800bcb4:	4288      	cmp	r0, r1
 800bcb6:	b510      	push	{r4, lr}
 800bcb8:	eb01 0402 	add.w	r4, r1, r2
 800bcbc:	d902      	bls.n	800bcc4 <memmove+0x10>
 800bcbe:	4284      	cmp	r4, r0
 800bcc0:	4623      	mov	r3, r4
 800bcc2:	d807      	bhi.n	800bcd4 <memmove+0x20>
 800bcc4:	1e43      	subs	r3, r0, #1
 800bcc6:	42a1      	cmp	r1, r4
 800bcc8:	d008      	beq.n	800bcdc <memmove+0x28>
 800bcca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bcce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bcd2:	e7f8      	b.n	800bcc6 <memmove+0x12>
 800bcd4:	4402      	add	r2, r0
 800bcd6:	4601      	mov	r1, r0
 800bcd8:	428a      	cmp	r2, r1
 800bcda:	d100      	bne.n	800bcde <memmove+0x2a>
 800bcdc:	bd10      	pop	{r4, pc}
 800bcde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bce2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bce6:	e7f7      	b.n	800bcd8 <memmove+0x24>

0800bce8 <_malloc_usable_size_r>:
 800bce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcec:	1f18      	subs	r0, r3, #4
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	bfbc      	itt	lt
 800bcf2:	580b      	ldrlt	r3, [r1, r0]
 800bcf4:	18c0      	addlt	r0, r0, r3
 800bcf6:	4770      	bx	lr

0800bcf8 <_read_r>:
 800bcf8:	b538      	push	{r3, r4, r5, lr}
 800bcfa:	4d07      	ldr	r5, [pc, #28]	; (800bd18 <_read_r+0x20>)
 800bcfc:	4604      	mov	r4, r0
 800bcfe:	4608      	mov	r0, r1
 800bd00:	4611      	mov	r1, r2
 800bd02:	2200      	movs	r2, #0
 800bd04:	602a      	str	r2, [r5, #0]
 800bd06:	461a      	mov	r2, r3
 800bd08:	f000 f948 	bl	800bf9c <_read>
 800bd0c:	1c43      	adds	r3, r0, #1
 800bd0e:	d102      	bne.n	800bd16 <_read_r+0x1e>
 800bd10:	682b      	ldr	r3, [r5, #0]
 800bd12:	b103      	cbz	r3, 800bd16 <_read_r+0x1e>
 800bd14:	6023      	str	r3, [r4, #0]
 800bd16:	bd38      	pop	{r3, r4, r5, pc}
 800bd18:	200087a0 	.word	0x200087a0

0800bd1c <expf>:
 800bd1c:	b508      	push	{r3, lr}
 800bd1e:	ed2d 8b02 	vpush	{d8}
 800bd22:	eef0 8a40 	vmov.f32	s17, s0
 800bd26:	f000 f837 	bl	800bd98 <__ieee754_expf>
 800bd2a:	4b16      	ldr	r3, [pc, #88]	; (800bd84 <expf+0x68>)
 800bd2c:	f993 3000 	ldrsb.w	r3, [r3]
 800bd30:	3301      	adds	r3, #1
 800bd32:	eeb0 8a40 	vmov.f32	s16, s0
 800bd36:	d011      	beq.n	800bd5c <expf+0x40>
 800bd38:	eeb0 0a68 	vmov.f32	s0, s17
 800bd3c:	f000 f900 	bl	800bf40 <finitef>
 800bd40:	b160      	cbz	r0, 800bd5c <expf+0x40>
 800bd42:	eddf 7a11 	vldr	s15, [pc, #68]	; 800bd88 <expf+0x6c>
 800bd46:	eef4 8ae7 	vcmpe.f32	s17, s15
 800bd4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd4e:	dd0a      	ble.n	800bd66 <expf+0x4a>
 800bd50:	f7fe fe14 	bl	800a97c <__errno>
 800bd54:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 800bd8c <expf+0x70>
 800bd58:	2322      	movs	r3, #34	; 0x22
 800bd5a:	6003      	str	r3, [r0, #0]
 800bd5c:	eeb0 0a48 	vmov.f32	s0, s16
 800bd60:	ecbd 8b02 	vpop	{d8}
 800bd64:	bd08      	pop	{r3, pc}
 800bd66:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800bd90 <expf+0x74>
 800bd6a:	eef4 8ae7 	vcmpe.f32	s17, s15
 800bd6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd72:	d5f3      	bpl.n	800bd5c <expf+0x40>
 800bd74:	f7fe fe02 	bl	800a97c <__errno>
 800bd78:	2322      	movs	r3, #34	; 0x22
 800bd7a:	ed9f 8a06 	vldr	s16, [pc, #24]	; 800bd94 <expf+0x78>
 800bd7e:	6003      	str	r3, [r0, #0]
 800bd80:	e7ec      	b.n	800bd5c <expf+0x40>
 800bd82:	bf00      	nop
 800bd84:	20000abc 	.word	0x20000abc
 800bd88:	42b17180 	.word	0x42b17180
 800bd8c:	7f800000 	.word	0x7f800000
 800bd90:	c2cff1b5 	.word	0xc2cff1b5
 800bd94:	00000000 	.word	0x00000000

0800bd98 <__ieee754_expf>:
 800bd98:	ee10 2a10 	vmov	r2, s0
 800bd9c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800bda0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800bda4:	d902      	bls.n	800bdac <__ieee754_expf+0x14>
 800bda6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bdaa:	4770      	bx	lr
 800bdac:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800bdb0:	d106      	bne.n	800bdc0 <__ieee754_expf+0x28>
 800bdb2:	eddf 7a51 	vldr	s15, [pc, #324]	; 800bef8 <__ieee754_expf+0x160>
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	bf18      	it	ne
 800bdba:	eeb0 0a67 	vmovne.f32	s0, s15
 800bdbe:	4770      	bx	lr
 800bdc0:	484e      	ldr	r0, [pc, #312]	; (800befc <__ieee754_expf+0x164>)
 800bdc2:	4282      	cmp	r2, r0
 800bdc4:	dd04      	ble.n	800bdd0 <__ieee754_expf+0x38>
 800bdc6:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800bf00 <__ieee754_expf+0x168>
 800bdca:	ee20 0a00 	vmul.f32	s0, s0, s0
 800bdce:	4770      	bx	lr
 800bdd0:	2a00      	cmp	r2, #0
 800bdd2:	da03      	bge.n	800bddc <__ieee754_expf+0x44>
 800bdd4:	4a4b      	ldr	r2, [pc, #300]	; (800bf04 <__ieee754_expf+0x16c>)
 800bdd6:	4291      	cmp	r1, r2
 800bdd8:	f200 808a 	bhi.w	800bef0 <__ieee754_expf+0x158>
 800bddc:	4a4a      	ldr	r2, [pc, #296]	; (800bf08 <__ieee754_expf+0x170>)
 800bdde:	4291      	cmp	r1, r2
 800bde0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800bde4:	d954      	bls.n	800be90 <__ieee754_expf+0xf8>
 800bde6:	4a49      	ldr	r2, [pc, #292]	; (800bf0c <__ieee754_expf+0x174>)
 800bde8:	4291      	cmp	r1, r2
 800bdea:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800bdee:	d836      	bhi.n	800be5e <__ieee754_expf+0xc6>
 800bdf0:	4947      	ldr	r1, [pc, #284]	; (800bf10 <__ieee754_expf+0x178>)
 800bdf2:	4411      	add	r1, r2
 800bdf4:	ed91 7a00 	vldr	s14, [r1]
 800bdf8:	4946      	ldr	r1, [pc, #280]	; (800bf14 <__ieee754_expf+0x17c>)
 800bdfa:	440a      	add	r2, r1
 800bdfc:	edd2 7a00 	vldr	s15, [r2]
 800be00:	ee30 7a47 	vsub.f32	s14, s0, s14
 800be04:	f1c3 0201 	rsb	r2, r3, #1
 800be08:	1ad2      	subs	r2, r2, r3
 800be0a:	ee37 0a67 	vsub.f32	s0, s14, s15
 800be0e:	ee60 6a00 	vmul.f32	s13, s0, s0
 800be12:	eddf 5a41 	vldr	s11, [pc, #260]	; 800bf18 <__ieee754_expf+0x180>
 800be16:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800bf1c <__ieee754_expf+0x184>
 800be1a:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800be1e:	eddf 5a40 	vldr	s11, [pc, #256]	; 800bf20 <__ieee754_expf+0x188>
 800be22:	eee5 5a26 	vfma.f32	s11, s10, s13
 800be26:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 800bf24 <__ieee754_expf+0x18c>
 800be2a:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800be2e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800bf28 <__ieee754_expf+0x190>
 800be32:	eee5 5a26 	vfma.f32	s11, s10, s13
 800be36:	eeb0 5a40 	vmov.f32	s10, s0
 800be3a:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800be3e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800be42:	eef0 6a45 	vmov.f32	s13, s10
 800be46:	ee20 5a05 	vmul.f32	s10, s0, s10
 800be4a:	bb92      	cbnz	r2, 800beb2 <__ieee754_expf+0x11a>
 800be4c:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800be50:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800be54:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800be58:	ee36 0a40 	vsub.f32	s0, s12, s0
 800be5c:	4770      	bx	lr
 800be5e:	4b33      	ldr	r3, [pc, #204]	; (800bf2c <__ieee754_expf+0x194>)
 800be60:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800bf30 <__ieee754_expf+0x198>
 800be64:	4413      	add	r3, r2
 800be66:	edd3 7a00 	vldr	s15, [r3]
 800be6a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800be6e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800bf34 <__ieee754_expf+0x19c>
 800be72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be76:	ee17 2a90 	vmov	r2, s15
 800be7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be7e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800be82:	eeb0 7a40 	vmov.f32	s14, s0
 800be86:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800bf38 <__ieee754_expf+0x1a0>
 800be8a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800be8e:	e7bc      	b.n	800be0a <__ieee754_expf+0x72>
 800be90:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 800be94:	d20b      	bcs.n	800beae <__ieee754_expf+0x116>
 800be96:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800bf00 <__ieee754_expf+0x168>
 800be9a:	ee70 6a26 	vadd.f32	s13, s0, s13
 800be9e:	eef4 6ac6 	vcmpe.f32	s13, s12
 800bea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bea6:	dd02      	ble.n	800beae <__ieee754_expf+0x116>
 800bea8:	ee30 0a06 	vadd.f32	s0, s0, s12
 800beac:	4770      	bx	lr
 800beae:	2200      	movs	r2, #0
 800beb0:	e7ad      	b.n	800be0e <__ieee754_expf+0x76>
 800beb2:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800beb6:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800beba:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800bebe:	bfb8      	it	lt
 800bec0:	3264      	addlt	r2, #100	; 0x64
 800bec2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bec6:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800beca:	ee76 7a40 	vsub.f32	s15, s12, s0
 800bece:	ee17 3a90 	vmov	r3, s15
 800bed2:	bfab      	itete	ge
 800bed4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800bed8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800bedc:	ee00 3a10 	vmovge	s0, r3
 800bee0:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800bf3c <__ieee754_expf+0x1a4>
 800bee4:	bfbc      	itt	lt
 800bee6:	ee00 3a10 	vmovlt	s0, r3
 800beea:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800beee:	4770      	bx	lr
 800bef0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bef8 <__ieee754_expf+0x160>
 800bef4:	4770      	bx	lr
 800bef6:	bf00      	nop
 800bef8:	00000000 	.word	0x00000000
 800befc:	42b17217 	.word	0x42b17217
 800bf00:	7149f2ca 	.word	0x7149f2ca
 800bf04:	42cff1b5 	.word	0x42cff1b5
 800bf08:	3eb17218 	.word	0x3eb17218
 800bf0c:	3f851591 	.word	0x3f851591
 800bf10:	08069ac0 	.word	0x08069ac0
 800bf14:	08069ac8 	.word	0x08069ac8
 800bf18:	3331bb4c 	.word	0x3331bb4c
 800bf1c:	b5ddea0e 	.word	0xb5ddea0e
 800bf20:	388ab355 	.word	0x388ab355
 800bf24:	bb360b61 	.word	0xbb360b61
 800bf28:	3e2aaaab 	.word	0x3e2aaaab
 800bf2c:	08069ab8 	.word	0x08069ab8
 800bf30:	3fb8aa3b 	.word	0x3fb8aa3b
 800bf34:	3f317180 	.word	0x3f317180
 800bf38:	3717f7d1 	.word	0x3717f7d1
 800bf3c:	0d800000 	.word	0x0d800000

0800bf40 <finitef>:
 800bf40:	b082      	sub	sp, #8
 800bf42:	ed8d 0a01 	vstr	s0, [sp, #4]
 800bf46:	9801      	ldr	r0, [sp, #4]
 800bf48:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800bf4c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800bf50:	bfac      	ite	ge
 800bf52:	2000      	movge	r0, #0
 800bf54:	2001      	movlt	r0, #1
 800bf56:	b002      	add	sp, #8
 800bf58:	4770      	bx	lr
	...

0800bf5c <_close>:
 800bf5c:	4b02      	ldr	r3, [pc, #8]	; (800bf68 <_close+0xc>)
 800bf5e:	2258      	movs	r2, #88	; 0x58
 800bf60:	601a      	str	r2, [r3, #0]
 800bf62:	f04f 30ff 	mov.w	r0, #4294967295
 800bf66:	4770      	bx	lr
 800bf68:	200087a0 	.word	0x200087a0

0800bf6c <_fstat>:
 800bf6c:	4b02      	ldr	r3, [pc, #8]	; (800bf78 <_fstat+0xc>)
 800bf6e:	2258      	movs	r2, #88	; 0x58
 800bf70:	601a      	str	r2, [r3, #0]
 800bf72:	f04f 30ff 	mov.w	r0, #4294967295
 800bf76:	4770      	bx	lr
 800bf78:	200087a0 	.word	0x200087a0

0800bf7c <_isatty>:
 800bf7c:	4b02      	ldr	r3, [pc, #8]	; (800bf88 <_isatty+0xc>)
 800bf7e:	2258      	movs	r2, #88	; 0x58
 800bf80:	601a      	str	r2, [r3, #0]
 800bf82:	2000      	movs	r0, #0
 800bf84:	4770      	bx	lr
 800bf86:	bf00      	nop
 800bf88:	200087a0 	.word	0x200087a0

0800bf8c <_lseek>:
 800bf8c:	4b02      	ldr	r3, [pc, #8]	; (800bf98 <_lseek+0xc>)
 800bf8e:	2258      	movs	r2, #88	; 0x58
 800bf90:	601a      	str	r2, [r3, #0]
 800bf92:	f04f 30ff 	mov.w	r0, #4294967295
 800bf96:	4770      	bx	lr
 800bf98:	200087a0 	.word	0x200087a0

0800bf9c <_read>:
 800bf9c:	4b02      	ldr	r3, [pc, #8]	; (800bfa8 <_read+0xc>)
 800bf9e:	2258      	movs	r2, #88	; 0x58
 800bfa0:	601a      	str	r2, [r3, #0]
 800bfa2:	f04f 30ff 	mov.w	r0, #4294967295
 800bfa6:	4770      	bx	lr
 800bfa8:	200087a0 	.word	0x200087a0

0800bfac <_write>:
 800bfac:	4b02      	ldr	r3, [pc, #8]	; (800bfb8 <_write+0xc>)
 800bfae:	2258      	movs	r2, #88	; 0x58
 800bfb0:	601a      	str	r2, [r3, #0]
 800bfb2:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb6:	4770      	bx	lr
 800bfb8:	200087a0 	.word	0x200087a0

0800bfbc <_init>:
 800bfbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfbe:	bf00      	nop
 800bfc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfc2:	bc08      	pop	{r3}
 800bfc4:	469e      	mov	lr, r3
 800bfc6:	4770      	bx	lr

0800bfc8 <_fini>:
 800bfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfca:	bf00      	nop
 800bfcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfce:	bc08      	pop	{r3}
 800bfd0:	469e      	mov	lr, r3
 800bfd2:	4770      	bx	lr
